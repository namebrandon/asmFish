macro ClampUnsigned Reg, RegMin, RegMax
            cmp  Reg, RegMin
           csel  Reg, Reg, RegMin, hs
            cmp  Reg, RegMax
           csel  Reg, Reg, RegMax, ls
end macro

macro ClampSigned Reg, RegMin, RegMax
            cmp  Reg, RegMin
           csel  Reg, Reg, RegMin, ge
            cmp  Reg, RegMax
           csel  Reg, Reg, RegMax, le
end macro

macro Popcnt Reg0, Reg1, Temp2 ; its ok if Reg0 and Reg1 are the same
            lsr  Temp2, Reg1, 1
            and  Temp2, Temp2, 6148914691236517205
            sub  Temp2, Reg1, Temp2
            and  Reg0, Temp2, 3689348814741910323
            lsr  Temp2, Temp2, 2
            and  Temp2, Temp2, 3689348814741910323
            add  Temp2, Reg0, Temp2
            mov  Reg0, 72340172838076673
            add  Temp2, Temp2, Temp2, lsr 4
            and  Temp2, Temp2, 1085102592571150095
            mul  Reg0, Temp2, Reg0
            lsr  Reg0, Reg0, 56
end macro

macro Popcnt16 Reg0, Reg1, Temp2 ; its ok if Reg0 and Reg1 are the same
            lsr  Temp2, Reg1, 1
            and  Temp2, Temp2, 6148914691236517205
            sub  Temp2, Reg1, Temp2
            lsr  Reg0, Temp2, 2
            and  Temp2, Temp2, 3689348814741910323
            and  Reg0, Reg0, 3689348814741910323
            add  Temp2, Reg0, Temp2
            mov  Reg0, 72340172838076673
            mul  Reg0, Temp2, Reg0
            lsr  Reg0, Reg0, 56
end macro

macro _popcnt Reg0, Reg1, Temp2 ; its ok if Reg0 and Reg1 are the same
            lsr  Temp2, Reg1, 1
            and  Temp2, Temp2, 6148914691236517205
            sub  Temp2, Reg1, Temp2
            and  Reg0, Temp2, 3689348814741910323
            lsr  Temp2, Temp2, 2
            and  Temp2, Temp2, 3689348814741910323
            add  Temp2, Reg0, Temp2
            mov  Reg0, 72340172838076673
            add  Temp2, Temp2, Temp2, lsr 4
            and  Temp2, Temp2, 1085102592571150095
            mul  Reg0, Temp2, Reg0
            lsr  Reg0, Reg0, 56
end macro

macro _popcnt16 Reg0, Reg1, Temp2 ; its ok if Reg0 and Reg1 are the same
            lsr  Temp2, Reg1, 1
            and  Temp2, Temp2, 6148914691236517205
            sub  Temp2, Reg1, Temp2
            lsr  Reg0, Temp2, 2
            and  Temp2, Temp2, 3689348814741910323
            and  Reg0, Reg0, 3689348814741910323
            add  Temp2, Reg0, Temp2
            mov  Reg0, 72340172838076673
            mul  Reg0, Temp2, Reg0
            lsr  Reg0, Reg0, 56
end macro




; this gets the address of a label that is too far away for adr instruction
macro lea Reg, Addr
           adrp  Reg, Addr
            add  Reg, Reg, :lo12:Addr
end macro
macro _lea Reg, Addr
            adr  Reg, Addr
           ;adrp  Reg, Addr
           ; add  Reg, Reg, :lo12:Addr
end macro


; this loads a 32bit quantity into a register when one instruction is not enough
macro mov32 reg, num
            mov  reg, ((num) and 0x00000FFFF)
           movk  reg, ((num) and 0x0FFFF0000) shr 16, lsl 16
end macro
macro _mov32 reg, num
            mov  reg, ((num) and 0x00000FFFF)
           movk  reg, ((num) and 0x0FFFF0000) shr 16, lsl 16
end macro
; this loads a 48bit quantity into a register when one instruction is not enough
macro mov48 reg, num
            mov  reg, ((num) and 0x000000000FFFF)
           movk  reg, ((num) and 0x00000FFFF0000) shr 16, lsl 16
           movk  reg, ((num) and 0x0FFFF00000000) shr 32, lsl 32
end macro
; this loads a 64bit quantity into a register when one instruction is not enough
macro mov64 reg, num
            mov  reg, ((num) and 0x0000000000000FFFF)
           movk  reg, ((num) and 0x000000000FFFF0000) shr 16, lsl 16
           movk  reg, ((num) and 0x00000FFFF00000000) shr 32, lsl 32
           movk  reg, ((num) and 0x0FFFF000000000000) shr 48, lsl 48
end macro
macro _mov64 reg, num
            mov  reg, ((num) and 0x0000000000000FFFF)
           movk  reg, ((num) and 0x000000000FFFF0000) shr 16, lsl 16
           movk  reg, ((num) and 0x00000FFFF00000000) shr 32, lsl 32
           movk  reg, ((num) and 0x0FFFF000000000000) shr 48, lsl 48
end macro

macro addsub? T, A, B, C, D:0
    if T = White
            add  A, B, C, lsl D
    else
            sub  A, B, C, lsl D
    end if    
end macro

macro PrintNewLine
            mov  w0, 10
           strb  w0, [x27], 1
end macro

macro PrintNL
            mov  w0, 10
           strb  w0, [x27], 1
end macro

; lazy way to put an address of a string into a register
macro lstring reg, target, Mes
  local m
            adr  reg, m
              b  target
    m:
        db Mes
        db 0
         balign  4
end macro

macro PushAll
            sub  sp, sp, 16*4
            st1  {v28.16b, v29.16b, v30.16b, v31.16b}, [sp]
            sub  sp, sp, 16*4
            st1  {v24.16b, v25.16b, v26.16b, v27.16b}, [sp]
            sub  sp, sp, 16*4
            st1  {v20.16b, v21.16b, v22.16b, v23.16b}, [sp]
            sub  sp, sp, 16*4
            st1  {v16.16b, v17.16b, v18.16b, v19.16b}, [sp]
            sub  sp, sp, 16*4
            st1  {v12.16b, v13.16b, v14.16b, v15.16b}, [sp]
            sub  sp, sp, 16*4
            st1  {v8.16b, v9.16b, v10.16b, v11.16b}, [sp]
            sub  sp, sp, 16*4
            st1  {v4.16b, v5.16b, v6.16b, v7.16b}, [sp]
            sub  sp, sp, 16*4
            st1  {v0.16b, v1.16b, v2.16b, v3.16b}, [sp]
            stp  x30, xzr, [sp, -16]!
            stp  x28, x29, [sp, -16]!
            stp  x26, x27, [sp, -16]!
            stp  x24, x25, [sp, -16]!
            stp  x22, x23, [sp, -16]!
            stp  x20, x21, [sp, -16]!
            stp  x18, x19, [sp, -16]!
            stp  x16, x17, [sp, -16]!
            stp  x14, x15, [sp, -16]!
            stp  x12, x13, [sp, -16]!
            stp  x10, x11, [sp, -16]!
            stp  x8, x9, [sp, -16]!
            stp  x6, x7, [sp, -16]!
            stp  x4, x5, [sp, -16]!
            stp  x2, x3, [sp, -16]!
            stp  x0, x1, [sp, -16]!
            add  x0, sp, 8*32 + 16*32
            str  x0, [sp, 8*31]
            ldr  x0, [sp] 
end macro

macro PopAll
            ldp  x0, x1, [sp], 16
            ldp  x2, x3, [sp], 16
            ldp  x4, x5, [sp], 16
            ldp  x6, x7, [sp], 16
            ldp  x8, x9, [sp], 16
            ldp  x10, x11, [sp], 16
            ldp  x12, x13, [sp], 16
            ldp  x14, x15, [sp], 16
            ldp  x16, x17, [sp], 16
            ldp  x18, x19, [sp], 16
            ldp  x20, x21, [sp], 16
            ldp  x22, x23, [sp], 16
            ldp  x24, x25, [sp], 16
            ldp  x26, x27, [sp], 16
            ldp  x28, x29, [sp], 16
            ldr  x30, [sp], 16
            ld1  {v0.16b, v1.16b, v2.16b, v3.16b}, [sp]
            add  sp, sp, 16*4
            ld1  {v4.16b, v5.16b, v6.16b, v7.16b}, [sp]
            add  sp, sp, 16*4
            ld1  {v8.16b, v9.16b, v10.16b, v11.16b}, [sp]
            add  sp, sp, 16*4
            ld1  {v12.16b, v13.16b, v14.16b, v15.16b}, [sp]
            add  sp, sp, 16*4
            ld1  {v16.16b, v17.16b, v18.16b, v19.16b}, [sp]
            add  sp, sp, 16*4
            ld1  {v20.16b, v21.16b, v22.16b, v23.16b}, [sp]
            add  sp, sp, 16*4
            ld1  {v24.16b, v25.16b, v26.16b, v27.16b}, [sp]
            add  sp, sp, 16*4
            ld1  {v28.16b, v29.16b, v30.16b, v31.16b}, [sp]
            add  sp, sp, 16*4
end macro

; Display a formated message. Use %[x,i,u]n for displaying
; register xn in hex, signed or unsigned.
; ex: Display "sq: %i14  sq: %i15  line: %x0  bet: %x1\n"
macro Display vlevel, Mes
    local anom, anol
    if VERBOSE = vlevel
            PushAll
;                lea  x1, DisplayLock
;                 bl  Os_MutexLock
                adr  x1, anom
                  b  anol
anom:
        db Mes
        db 0
        balign 4
anol:
                lea  x27, DisplayOutput
                mov  x2, sp
                add  x3, sp, 32*8
                 bl  PrintFancy
                lea  x1, DisplayOutput
                 bl  _Os_WriteOut
;                lea  x1, DisplayLock
;                 bl  Os_MutexUnlock
             PopAll
    end if
end macro

; just write the message to x27
macro Print Mes
    local anom, anol
            PushAll
                adr  x1, anom
                  b  anol
anom:
        db Mes
        db 0
        balign 4
anol:
                mov  x2, sp
                add  x3, sp, 32*8
                 bl  PrintFancy
                str  x27, [sp, 8*27]
             PopAll
end macro



macro DisplayPause
            PushAll
                mov  x1, 400
                 bl  Os_Sleep
             PopAll
end macro

macro ToLower Reg
    local lower
                sub  Reg, Reg, 'A'
                cmp  Reg, 'Z'-'A'+1
                bhs  lower
                add  Reg, Reg, 'a'-'A'
lower:
                add  Reg, Reg, 'A'
end macro










macro NewLineData
        db 10
end macro

macro IntegerStringData number
local value, pos, digit, disp
  value = number
  if value < 0
    db '-'
    value = -value
  end if
  pos = 10000000
  disp = 0
  repeat 8
    digit = value/pos
    value = value - (digit*pos)
    pos = pos/10
    disp = disp or digit
    if disp <> 0 | pos = 1
        db '0' + digit
    end if
  end repeat
end macro


macro BuildTimeData
  local time, day, year, month, febdays
  time = %t
  day = time/(24*3600)
  day = day - (day + 365)/(3*365+366) 
  year = 1970 + day/365
  day = day mod 365 + 1
  month = 1
  if year mod 4 = 0
    febdays = 29
  else
    febdays = 28
  end if
  iterate dayscount, 31,febdays,31,30,31,30,31,31,30,31,30,31
    if day > dayscount
      day = day - dayscount
      month = month + 1
    end if
  end iterate
        db '0' + (year / 1000) 
        db '0' + (year mod 1000) / 100
        db '0' + (year mod 100) / 10
        db '0' + (year mod 10)
        db '-'
        db '0' + (month / 10)
        db '0' + (month mod 10)
        db '-'
        db '0' + (day / 10)
        db '0' + (day mod 10)
end macro


