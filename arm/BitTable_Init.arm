
BitTable_Init:
            stp  x29, x30, [sp, -16]!
            stp  x27, x28, [sp, -16]!
            mov  x1, 64*64*2*64
             bl  Os_VirtualAlloc
            mov  x29, x0
Init_KPKTable:

tnc   equ x26
tn    equ x25
wp    equ x24
wpb   equ x14
wk    equ x23
wkb   equ x13
bk    equ x22
bkb   equ x12
to    equ x7
un    equ x8
u     equ x9
ncnt  equ x10
ocnt  equ x11

macro KPKOffset Res, Tn, Wp, Wk, Bk
            add  Res, Wk, Wp, lsl 6
            add  Res, Bk, Res, lsl 6
            add  Res, Tn, Res, lsl 1
end macro
; KPKEndgameTable[WhitePawn-8][WhiteKing] is a qword
; bit 2*BlackKing+0 is set if win for white to move
; bit 2*BlackKing+1 is set if win for black to move
           _lea  x28, KPKEndgameTable
           _lea  x16, WhitePawnAttacks
           _lea  x17, KingAttacks
            mov  x0, x28
            mov  x1, 0
            mov  x2, 48*64*8
             bl  MemoryFill
            mov  x0, x29
            mov  x1, 0
            mov  x2, 64*64*2*64
             bl  MemoryFill
            mov  ncnt, 0
            mov  ocnt, 1
.Start:
            cmp  ncnt, ocnt
            beq  .End
            mov  ocnt, ncnt
            mov  ncnt, 0
            mov  tn, 0
.TurnLoop:
            eor  tnc, tn, 1
            mov  wp, 0
            mov  wpb, 1
.WhitePawnLoop:
            mov  wk, 0
            mov  wkb, 1
.WhiteKingLoop:
            mov  bk, 0
            mov  bkb, 1
.BlackKingLoop:
      KPKOffset  x21, tn, wp, wk, bk
           ldrb  w0, [x29, x21]
           cbnz  w0, .Continue
            add  ncnt, ncnt, 1
            cmp  wp, 8
            blo  .Draw
            cmp  wp, 56
            bhs  .Draw
            cmp  wp, wk
            beq  .Draw
            cmp  wk, bk
            beq  .Draw
            cmp  bk, wp
            beq  .Draw
            ldr  x0, [x16, wp, lsl 3]
            ldr  x1, [x17, wk, lsl 3]
            tst  x0, bkb
            beq  .CheckTurn
            cbz  tn, .Draw
            tst  x1, wpb
            beq  .Draw
.CheckTurn:
            mov  un, 0
            cbz  tn, .WhiteToMove
.BlackToMove:
            ldr  x0, [x17, bk, lsl 3]
            ldr  u, [x17, wk, lsl 3]
            ldr  x4, [x16, wp, lsl 3]
            orr  u, u, x4
            bic  u, x0, u
            cbz  u, .Draw
.BlackMoveLoop:
           rbit  to, u
            clz  to, to
      KPKOffset  x1, tnc, wp, wk, to
           ldrb  w4, [x29, x1]
            cmp  x4, 1
            beq  .Draw
           cinc  un, un, lo
            sub  x4, u, 1
            and  u, u, x4
           cbnz  u, .BlackMoveLoop
            cbz  un, .Win
              b  .Continue
.WhiteToMove:
            ldr  x0, [x17, wk, lsl 3]
            ldr  u, [x17, bk, lsl 3]
            orr  u, u, wpb
           bics  u, x0, u
            beq  .WhiteMoveLoopDone
.WhiteMoveLoop:
           rbit  to, u
            clz  to, to
      KPKOffset  x1, tnc, wp, to, bk
           ldrb  w4, [x29, x1]
            cmp  x4, 1
            bhi  .Win
           cinc  un, un, lo
            sub  x4, u, 1
            and  u, u, x4
           cbnz  u, .WhiteMoveLoop
.WhiteMoveLoopDone:
            add  to, wp, 8
            cmp  to, wk
            beq  .WhiteMoveDone
            cmp  to, bk
            beq  .WhiteMoveDone
            cmp  to, 56
            bhs  .PromCheck
      KPKOffset  x1, tnc, to, wk, bk
           ldrb  w4, [x29, x1]
            cmp  x4, 1
            bhi  .Win
           cinc  un, un, lo
            cmp  to, 24
            bhs  .WhiteMoveDone
.DoubleCheck:
            add  to, to, 8
            cmp  to, wk
            beq  .WhiteMoveDone
            cmp  to, bk
            beq  .WhiteMoveDone
      KPKOffset  x1, tnc, to, wk, bk 
           ldrb  w4, [x29, x1]
            cmp  x4, 1
            bhi  .Win
           cinc  un, un, lo
              b  .WhiteMoveDone
.PromCheck:
            ldr  x0, [x17, to, lsl 3]
            tst  x0, bkb
            beq  .Win
            tst  x0, wkb
            bne  .Win
.WhiteMoveDone:
           cbnz  un, .Continue 
.Draw:
            mov  x4, 1
           strb  w4, [x29, x21]
              b  .Continue
.Win:
            mov  x4, 2
           strb  w4, [x29, x21]
            cmp  wp, 8
            blo  .Continue
            cmp  wp, 56
            bhs  .Continue
            tst  bk, 4
            bne  .Continue
            mov  x3, 1
            eor  x1, tn, 1
            add  x1, bk, x1, lsl 2
            lsl  x3, x3, x1
            sub  x2, wp, 8
            add  x2, wk, x2, lsl 6
            ldr  x0, [x28, x2, lsl 3]
            orr  x0, x0, x3
            str  x0, [x28, x2, lsl 3]
.Continue:
            add  bk, bk, 1
            lsl  bkb, bkb, 1
            tbz  bk, 6, .BlackKingLoop
            add  wk, wk, 1
            lsl  wkb, wkb, 1
            tbz  wk, 6, .WhiteKingLoop
            add  wp, wp, 1
            lsl  wpb, wpb, 1
            tbz  wp, 6, .WhitePawnLoop
            add  tn, tn, 1
            tbz  tn, 1, .TurnLoop
           cbnz  ncnt, .Start
.End:
            mov  x1, x29
            mov  x2, 64*64*2*64
             bl  Os_VirtualFree
            ldp  x27, x28, [sp], 16
            ldp  x29, x30, [sp], 16
            ret
