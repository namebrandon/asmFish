; see Endgame_Init.asm for how these functions work
; summary: these functions get strong side in x1

EndgameEval_KXK:
Display 2, "KXK%n"
    ; Mate with KX vs K. This function is used to evaluate positions with
    ; king and plenty of material vs a lone king. It simply gives the
    ; attacking side a bonus for driving the defending king towards the edge
    ; of the board, and for keeping the distance between the two kings small.
            stp  x25, x24, [sp, -16]!
            stp  x27, x26, [sp, -16]!
            stp  x29, x30, [sp, -16]!
            mov  w26, w1

    ; r15 = strong pieces
            ldr  x27, [x20, Pos.typeBB + 8*King]
            add  x6, x20, Pos.typeBB
            ldr  x24, [x6, x1, lsl 3]
            and  x24, x24, x27
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x4, [x6, x1, lsl 3]
            and  x27, x27, x4
    ; rdi = weak ksq
           rbit  x27, x27
            clz  x27, x27
           rbit  x24, x24
            clz  x24, x24
    ; r14 = strong ksq
            ldr  w4, [x20, Pos.sideToMove]
            cmp  w26, w4
            bne  .CheckStalemate
.NotStalemate:
            ldr  x8, [x20, Pos.typeBB + 8*Rook]
            ldr  x4, [x20, Pos.typeBB + 8*Queen]
            orr  x8, x8, x4
            ldr  x9, [x20, Pos.typeBB + 8*Bishop]
            ldr  x10, [x20, Pos.typeBB + 8*Knight]
            lsl  w24, w24, 6
            add  x6, x21, State.npMaterial
           ldrh  w0, [x6, x26, lsl 1]
           _lea  x6, PushToEdges
           ldrb  w2, [x6, x27]
           _lea  x6, SquareDistance
            add  x6, x6, x24
           ldrb  w27, [x6, x27]
           _lea  x6, PushClose
           ldrb  w27, [x6, x27]
            add  w27, w27, w2
            ldr  x4, [x20, Pos.typeBB+8*Pawn]
        _popcnt  x1, x4, x2
            mov  w4, PawnValueEg
            mul  w1, w1, w4
            add  w0, w0, w1
            add  w0, w0, w27
         _mov64  x1, LightSquares
         _mov64  x2, DarkSquares
            mov  w27, VALUE_MATE_IN_MAX_PLY - 1
            ldr  w4, [x20, Pos.sideToMove]
            eor  w26, w26, w4
            neg  w26, w26
           cbnz  x8, .Winning
            cbz  x9, .Drawish
           cbnz  x10, .Winning
           ands  x1, x1, x9
            beq  .Drawish
           ands  x2, x2, x9
            beq  .Drawish
.Winning:
            mov  w4, VALUE_KNOWN_WIN
            add  w0, w0, w4
            cmp  w0, w27
           csel  w0, w27, w0, gt
.Drawish:
            eor  w0, w0, w26
            sub  w0, w0, w26
            ldp  x29, x30, [sp], 16
            ldp  x27, x26, [sp], 16
            ldp  x25, x24, [sp], 16
            ret
.CheckStalemate:
           _lea  x6, KingAttacks
            ldr  x25, [x6, x27, lsl 3]
.NextSquare:
            eor  w1, w26, 1
           rbit  x2, x25
            clz  x2, x2
             bl  AttackersTo_Side
            cbz  x0, .NotStalemate
            sub  x1, x25, 1
           ands  x25, x25, x1
            bne  .NextSquare
            
            mov  w0, 0
            ldp  x29, x30, [sp], 16
            ldp  x27, x26, [sp], 16
            ldp  x25, x24, [sp], 16
            ret

EndgameEval_KBNK:
Display 2, "KBNK%n"
          mov64  x0, LightSquares
            ldr  x4, [x20, Pos.typeBB + 8*Bishop]
            and  x0, x0, x4
            ldr  x2, [x20, Pos.typeBB + 8*King]
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x11, [x6, x1, lsl 3]        
            and  x10, x10, x2
            and  x11, x11, x2
           rbit  x10, x10
            clz  x10, x10
           rbit  x11, x11
            clz  x11, x11

            tst  x0, x0
          csetm  w0, ne
            and  w0, w0, 56
            eor  w10, w10, w0
            eor  w11, w11, w0
            lsl  w10, w10, 6
           _lea  x6, SquareDistance
            add  x6, x6, x10
           ldrb  w2, [x6, x11]
           _lea  x6, PushClose
           ldrb  w2, [x6, x2]
           _lea  x6, PushToCorners
           ldrb  w0, [x6, x11]
            mov  w4, VALUE_KNOWN_WIN
            add  w0, w0, w4
            add  w0, w0, w2
            ldr  w4, [x20, Pos.sideToMove]
            eor  w1, w1, w4
            sub  w1, w1, 1
            eor  w0, w0, w1
            sub  w0, w0, w1
            ret


EndgameEval_KPK:
Display 2, "KPK%n"
    ; KP vs K. This endgame is evaluated with the help of a bitbase.
            add  x6, x20, Pos.typeBB
            ldr  x2, [x6, x1, lsl 3]
            ldr  x9, [x20, Pos.typeBB + 8*King]
            ldr  x8, [x20, Pos.typeBB + 8*Pawn]
    ; rdx = strong pieces
            eor  w1, w1, 1
    ; ecx = weak side
    ; r10 = weak pieces  should be the long king
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            and  x8, x8, x2
           rbit  x8, x8
            clz  x8, x8
    ; r8d = strong pawn
            and  x9, x9, x2
           rbit  x9, x9
            clz  x9, x9
    ; r9d = strong king
           rbit  x10, x10
            clz  x10, x10
    ; r10d = weak king
    ; if black is the strong side, flip pieces along horizontal axis
            sub  w0, w1, 1
            and  w0, w0, 56
    ; if weak king is on right side of board, flip pieces along vertical axis
            tst  w10, 4
          csetm  w2, ne
            and  w2, w2, 7
    ; do the flip
            eor  w0, w0, w2
            eor  w8, w8, w0
            eor  w9, w9, w0
            eor  w10, w10, w0
    ; look up entry
            mov  w0, w8
            add  w11, w9, w8, lsl 6
           _lea  x6, KPKEndgameTable + 8*(-8*64)
            ldr  x11, [x6, x11, lsl 3]
    ; figure out which bit to test
    ; bit 2 of weak king should now be 0, so fill it with the correct side
            ldr  w4, [x20, Pos.sideToMove]
            eor  w1, w1, w4
            add  w2, w10, w1, lsl 2
            sub  w1, w1, 1
            lsr  w0, w0, 3
            mov  w4, VALUE_KNOWN_WIN + PawnValueEg
            add  w0, w0, w4
            eor  w0, w0, w1
    ; eax = score if win
            sub  w0, w0, w1
            lsr  x2, x11, x2
            and  w2, w2, 1
            neg  w2, w2
            and  w0, w0, w2
            ret


EndgameEval_KRKP:
Display 2, "KRKP%n"
    ; KR vs KP. This is a somewhat tricky endgame to evaluate precisely without
    ; a bitbase. The function below returns drawish scores when the pawn is
    ; far advanced with support of the king, while the attacking king is far
    ; away.
            stp  x26, x27, [sp, -16]!
            add  x6, x20, Pos.typeBB
            ldr  x8, [x6, x1, lsl 3]
            mov  w26, w1
            mov  w4, 56
            mul  w0, w1, w4
            eor  w1, w1, 1
            ldr  w4, [x20, Pos.sideToMove]
            eor  w26, w26, w4
            add  x6, x20, Pos.typeBB
            ldr  x9, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x8, x8, x4
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x9, x9, x4
            ldr  x10, [x20, Pos.typeBB + 8*Rook]
            ldr  x11, [x20, Pos.typeBB + 8*Pawn]
           rbit  x8, x8
            clz  x8, x8
           rbit  x9, x9
            clz  x9, x9
           rbit  x10, x10
            clz  x10, x10
           rbit  x11, x11
            clz  x11, x11
            eor  w8, w8, w0
            eor  w9, w9, w0
            eor  w10, w10, w0
            eor  w11, w11, w0

wksq_ equ x8
bksq_ equ x9
rsq_ equ x10
psq_ equ x11
wksq equ w8
bksq equ w9
rsq equ w10
psq equ w11
    ; If the stronger side's king is in front of the pawn, it's a win
            lsl  w0, wksq, 3
           _lea  x6, SquareDistance
            add  x6, x6, x0, lsl 3
           ldrb  w0, [x6, psq_]
            sub  w0, w0, RookValueEg
            mov  w1, wksq
            mov  w2, psq
            and  w1, w1, 7
            and  w2, w2, 7
            sub  w1, w1, w2
            sub  w2, psq, wksq
            asr  w2, w2, 31
            orr  w1, w1, w2
            cbz  w1, .Return
    ; If the weaker side's king is too far from the pawn and the rook,
    ; it's a win.
            lsl  bksq, bksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, bksq_
           ldrb  w1, [x6, psq_]
            sub  w1, w1, 3
            sub  w1, w1, w26
           _lea  x6, SquareDistance
            add  x6, x6, bksq_
           ldrb  w2, [x6, rsq_]
            sub  w2, w2, 3
            orr  w1, w1, w2
            tbz  w1, 31, .Return
    ; If the pawn is far advanced and supported by the defending king,
    ; the position is drawish
            lsr  w2, bksq, 9
            cmp  w2, RANK_3
            bhi  @1f
           _lea  x6, SquareDistance
            add  x6, x6, bksq_
           ldrb  w2, [x6, psq_]
            cmp  w2, 1
            bne  @1f
            lsr  w2, wksq, 3
            cmp  w2, RANK_4
            blo  @1f
            lsl  x2, wksq_, 3
           _lea  x6, SquareDistance
            add  x6, x6, x2, lsl 3
           ldrb  w2, [x6, psq_]
            mov  w0, -80
            add  w0, w0, w2, lsl 3
            eor  w1, w26, 1
            add  w1, w1, 2
            cmp  w2, w1
            bhi  .Return
@1:
            lsl  wksq, wksq, 6
            and  w1, psq, 7
            lsl  w1, w1, 6
           _lea  x6, SquareDistance
            add  x6, x6, bksq_
            add  x6, x6, psq_
           ldrb  w2, [x6, DELTA_S]
           _lea  x6, SquareDistance
            add  x6, x6, wksq_
            add  x6, x6, psq_
           ldrb  w0, [x6, DELTA_S]
           _lea  x6, SquareDistance
            add  x6, x6, x1
           ldrb  w1, [x6, psq_]
            sub  w0, w0, w2
            sub  w0, w0, w1
            mov  w4, -200
            add  w0, w4, w0, lsl 3
.Return:
            sub  w26, w26, 1
            eor  w0, w0, w26
            sub  w0, w0, w26
            ldp  x26, x27, [sp], 16
            ret

restore wksq_
restore bksq_
restore rsq_
restore psq_
restore wksq
restore bksq
restore rsq
restore psq


EndgameEval_KRKB:
Display 2, "KRKB%n"
    ; KR vs KB. This is very simple, and always returns drawish scores.  The
    ; score is slightly bigger when the defending king is close to the edge.
            ldr  x0, [x20, Pos.typeBB + 8*King]
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x4, [x6, x1, lsl 3]
            and  x0, x0, x4
           rbit  x0, x0
            clz  x0, x0
           _lea  x6, PushToEdges
           ldrb  w0, [x6, x0]
            ldr  w4, [x20, Pos.sideToMove]
            eor  w1, w1, w4
            sub  w1, w1, 1
            eor  w0, w0, w1
            sub  w0, w0, w1
            ret

EndgameEval_KRKN:
Display 2, "KRKN%n"
    ; KR vs KN. The attacking side has slightly better winning chances than
    ; in KR vs KB, particularly if the king and the knight are far apart.
            ldr  x8, [x20, Pos.typeBB + 8*Knight]
            ldr  x9, [x20, Pos.typeBB + 8*King]
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x4, [x6, x1, lsl 3]
            and  x9, x9, x4
           rbit  x8, x8
            clz  x8, x8
           rbit  x9, x9
            clz  x9, x9
            lsl  x8, x8, 6
           _lea  x6, SquareDistance
            add  x6, x6, x8
           ldrb  w0, [x6, x9]
           _lea  x6, PushAway
           ldrb  w0, [x6, x0]
           _lea  x6, PushToEdges
           ldrb  w2, [x6, x9]
            add  w0, w0, w2
            ldr  w4, [x20, Pos.sideToMove]
            eor  w1, w1, w4
            sub  w1, w1, 1
            eor  w0, w0, w1
            sub  w0, w0, w1
            ret

EndgameEval_KQKP:
Display 2, "KQKP%n"
    ; KQ vs KP. In general, this is a win for the stronger side, but there are a
    ; few important exceptions. A pawn on 7th rank and on the A,C,F or H files
    ; with a king positioned next to it can be a draw, so in that case, we only
    ; use the distance between the kings.
            ldr  x8, [x20, Pos.typeBB + 8*Pawn]
            ldr  x2, [x20, Pos.typeBB + 8*King]
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            add  w9, w1, w1, lsl 2
            add  w9, w9, 1
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x11, [x6, x1, lsl 3]
            and  x10, x10, x2
            and  x11, x11, x2
           rbit  x10, x10
            clz  x10, x10
           rbit  x11, x11
            clz  x11, x11
           rbit  x2, x8
            clz  x2, x2
            lsl  x11, x11, 6
          mov64  x0, FileABB or FileCBB or FileFBB or FileHBB
            and  x8, x8, x0
            tst  x8, x8
          csetm  w8, eq
           _lea  x6, SquareDistance
            add  x6, x6, x11
           ldrb  w0, [x6, x2]
            sub  w0, w0, 1
            orr  w0, w0, w8
            lsr  w2, w2, 3
            eor  w2, w2, w9
            orr  w0, w0, w2
            tst  w0, w0
          csetm  w0, ne
            mov  w4, QueenValueEg - PawnValueEg
            and  w0, w0, w4
           _lea  x6, SquareDistance
            add  x6, x6, x11
           ldrb  w2, [x6, x10]
           _lea  x6, PushClose
           ldrb  w2, [x6, x2]
            add  w0, w0, w2
            ldr  w4, [x20, Pos.sideToMove]
            eor  w1, w1, w4
            sub  w1, w1, 1
            eor  w0, w0, w1
            sub  w0, w0, w1
            ret


EndgameEval_KQKR:
Display 2, "KQKR%n"
    ; KQ vs KR.  This is almost identical to KX vs K:  We give the attacking
    ; king a bonus for having the kings close together, and for forcing the
    ; defending king towards the edge. If we also take care to avoid null move for
    ; the defending side in the search, this is usually sufficient to win KQ vs KR.
            ldr  x2, [x20, Pos.typeBB + 8*King]
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x11, [x6, x1, lsl 3]
            and  x10, x10, x2
            and  x11, x11, x2
           rbit  x10, x10
            clz  x10, x10
           rbit  x11, x11
            clz  x11, x11
            lsl  x10, x10, 6
           _lea  x6, SquareDistance
            add  x6, x6, x10
           ldrb  w2, [x6, x11]
           _lea  x6, PushClose
           ldrb  w2, [x6, x2]
           _lea  x6, PushToEdges
           ldrb  w0, [x6, x11]
            add  w0, w0, QueenValueEg - RookValueEg
            add  w0, w0, w2
            ldr  w4, [x20, Pos.sideToMove]
            eor  w1, w1, w4
            sub  w1, w1, 1
            eor  w0, w0, w1
            sub  w0, w0, w1
            ret


EndgameEval_KNNK:
Display 2, "KNNK%n"
    ; Some cases of trivial draws
            mov  w0, 0
            ret



EndgameScale_KBPsK:
Display 2, "KBPsK%n"
    ; r8 = pawns
    ; r9 = strong pieces
            ldr  x8, [x20, Pos.typeBB + 8*Pawn]
            add  x6, x20, Pos.typeBB
            ldr  x9, [x6, x1, lsl 3]
    ; are all of the pawns on B or G file?
            mov  x10, not FileBBB
            tst  x8, x10
            beq  .AllOnBFile
            mov  x10, not FileGBB
            tst  x8, x10
            beq  .AllOnGFile
    ; are all of the strong pawns on A or H file?
            and  x8, x8, x9
            mov  x0, not FileABB
          mov64  x11, LightSquares
            mov  w2, SQ_A8
            tst  x8, x0
            beq  .OnAFile
            mov  x0, AllSquares xor FileHBB
            mvn  x11, x11
            add  w2, w2, 7
            tst  x8, x0
            beq  .OnHFile
    ; else return none
.ReturnNone:
            mov  w0, SCALE_FACTOR_NONE
            ret

.OnHFile:
.OnAFile:
            ldr  x4, [x20, Pos.typeBB + 8*Bishop]
            and  x9, x9, x4
    ; r9 = strong bishop bitboard
            neg  x1, x1
            eor  x11, x11, x1
    ; r11 = color bb of queening square
            ldr  x0, [x20, Pos.typeBB + 8*King]
            add  x6, x20, Pos.typeBB + 8*(1)
            ldr  x4, [x6, x1, lsl 3]
            and  x0, x0, x4
           rbit  x0, x0
            clz  x0, x0
    ; eax = weak king square
            and  w1, w1, 56
            eor  w2, w2, w1
    ; edx = queening square
            tst  x11, x9
            bne  .ReturnNone
    ; bishop is opp color as queening square
            lsl  w0, w0, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w4, [x6, x2]
            cmp  w4, 2
            bhs  .ReturnNone
    ; distance(queeningSq, kingSq) <= 1
            mov  w0, 0
            ret

.AllOnBFile:
.AllOnGFile:
            eor  w1, w1, 1
    ; ecx = weak side
            add  x6, x20, Pos.typeBB
            ldr  x11, [x6, x1, lsl 3]
    ; r11 = weak pieces
            add  x6, x21, State.npMaterial
           ldrh  w0, [x6, x1, lsl 1]
           ands  x8, x8, x11
            beq  .ReturnNone
           cbnz  w0, .ReturnNone
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x11, x11, x4
           rbit  x11, x11
            clz  x11, x11
    ; r11 = weakKingSq
            eor  w1, w1, 1
    ; ecx = strong side
            cbz  w1, .BlackIsWeak
           rbit  x8, x8
            clz  x8, x8
              b  .WhiteIsWeak
.BlackIsWeak:
            clz  x8, x8
            eor  x8, x8, 63
.WhiteIsWeak:
    ; r8 = weakPawnSq
            ldr  x10, [x20, Pos.typeBB + 8*Bishop]
            and  x10, x10, x9
           rbit  x10, x10
            clz  x10, x10
    ; r10 = bishopSq
            mov  w4, 7
            mul  w2, w1, w4
            lsr  w0, w8, 3
            eor  w0, w0, w2
            cmp  w0, RANK_7
            bne  .ReturnNone
    ; relative_rank(strongSide, weakPawnSq) == RANK_7
            mov  w0, -1
            add  w0, w0, w1, lsl 1
            add  w0, w8, w0, lsl 3
    ; eax = weakPawnSq + pawn_push(weakSide)
            ldr  x2, [x20, Pos.typeBB + 8*Pawn]
            and  x2, x2, x9
            lsr  x4, x2, x0
            tbz  x4, 0, .ReturnNone
    ; pos.pieces(strongSide, PAWN) & (weakPawnSq + pawn_push(weakSide))
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x9, x9, x4
           rbit  x9, x9
            clz  x9, x9
    ; r9 = strongKingSq
            sub  x0, x2, 1
            and  x0, x0, x2
    ; rax is zero if strong has one pawn
            cbz  x0, @1f
            eor  w10, w10, w8
            mov  w4, 9
            and  w10, w10, w4
            cbz  w10, .ReturnNone
            mov  w4, 9
            cmp  w10, w4
            beq  .ReturnNone
@1:
            lsl  x8, x8, 6
           _lea  x6, SquareDistance
            add  x6, x6, x8
           ldrb  w0, [x6, x11]
           _lea  x6, SquareDistance
            add  x6, x6, x8
           ldrb  w2, [x6, x9]
            cmp  w0, 3
            bhs  .ReturnNone
            cmp  w0, w2
            bhi  .ReturnNone
            mov  w4, 56
            mul  w2, w1, w4
            eor  w2, w2, w11
            cmp  w2, SQ_A7
            blo  .ReturnNone
            mov  w0, 0
            ret


EndgameScale_KQKRPs:
Display 2, "KQKRPs%n"
            ldr  x9, [x20, Pos.typeBB + 8*King]
            add  x6, x20, Pos.typeBB
            ldr  x8, [x6, x1, lsl 3]
            and  x8, x8, x9
           rbit  x8, x8
            clz  x8, x8
    ; r8 = strong ksq
            lsl  w0, w1, 9
            eor  w1, w1, 1
            mov  w4, 56
            mul  w2, w1, w4
            add  x6, x20, Pos.typeBB
            ldr  x11, [x6, x1, lsl 3]
            ldr  x10, [x20, Pos.typeBB + 8*Rook]
            and  x9, x9, x11
            and  x10, x10, x11
           rbit  x9, x9
            clz  x9, x9
           rbit  x10, x10
            clz  x10, x10
    ; r9 = kingSq
    ; r10 = rsq
            eor  w8, w8, w2
            cmp  w8, SQ_A4
            blo  .ReturnNone
            ldr  x4, [x20, Pos.typeBB + 8*Pawn]
            and  x11, x11, x4
           _lea  x6, KingAttacks
            ldr  x4, [x6, x9, lsl 3]
            and  x11, x11, x4
           _lea  x6, PawnAttacks
            add  x6, x6, x0
            ldr  x4, [x6, x10, lsl 3]
            and  x11, x11, x4
            cbz  x11, .ReturnNone
            eor  w9, w9, w2
            eor  w10, w10, w2
            lsr  w10, w10, 3
            cmp  w9, SQ_A3
            bhs  .ReturnNone
            cmp  w10, RANK_3
            bne  .ReturnNone
            mov  w0, 0
            ret
.ReturnNone:
            mov  w0, SCALE_FACTOR_NONE
            ret

EndgameScale_KRPKR:
Display 2, "KRPKR%n"
            stp  x25, x24, [sp, -16]!
            stp  x23, x22, [sp, -16]!
            stp  x21, x30, [sp, -16]!
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x22, [x6, x1, lsl 3]
            ldr  x8, [x20, Pos.typeBB+8*Pawn]
            and  x8, x8, x10
           rbit  x8, x8
            clz  x8, x8
            ldr  x9, [x20, Pos.typeBB + 8*Rook]
            and  x9, x9, x10
           rbit  x9, x9
            clz  x9, x9
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x10, x10, x4
           rbit  x10, x10
            clz  x10, x10
            ldr  x11, [x20, Pos.typeBB + 8*Rook]
            and  x11, x11, x22
           rbit  x11, x11
            clz  x11, x11
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x22, x22, x4
           rbit  x22, x22
            clz  x22, x22
            sub  w2, w1, 1
            and  x2, x2, 56
            tst  w8, 4
          csetm  w0, ne
            and  w0, w0, 7
            eor  w0, w0, w2
            eor  w8, w8, w0
            eor  w9, w9, w0
            eor  w10, w10, w0
            eor  w11, w11, w0
            eor  w22, w22, w0

wpsq_ equ x8
wrsq_ equ x9
wksq_ equ x10
brsq_ equ x11
bksq_ equ x22
wpsq equ w8
wrsq equ w9
wksq equ w10
brsq equ w11
bksq equ w22

f_ equ x23
r_ equ x24
qs_ equ x25
f equ w23
r equ w24
qs equ w25

            and  f, wpsq, 7
            lsr  r, wpsq, 3
            add  qs, f, 8*7
            ldr  w4, [x20, Pos.sideToMove]
            eor  w1, w1, w4
        ; w1 = tempo
._1:
            cmp  r, RANK_5
            bhi  ._2
            lsl  w0, bksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w4, [x6, qs_]
            cmp  w4, 1
            bhi  ._2
            cmp  wksq, SQ_H5
            bhi  ._2
            lsr  w0, brsq, 3
            cmp  w0, RANK_6
            beq  .ReturnDraw
            cmp  r, RANK_3
            bhi  ._2
            lsr  w0, wrsq, 3
            cmp  w0, RANK_6
            bne  .ReturnDraw
._2:
            cmp  r, RANK_6
            bne  ._3
            lsl  w0, bksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w4, [x6, qs_]
            cmp  w4, 1
            bhi  ._3
            lsr  w0, wksq, 3
            add  w0, w0, w1
            cmp  w0, RANK_6
            bhi  ._3
            lsr  w0, brsq, 3
            cmp  w0, RANK_1
            beq  .ReturnDraw
           cbnz  w1, ._3
            and  w0, brsq, 7
            and  w2, wpsq, 7
            sub  w0, w0, w2
            cmp  w0, 3
            bge  .ReturnDraw
            cmp  w0, -3
            ble  .ReturnDraw
._3:
            cmp  r, RANK_6
            blo  ._4
            cmp  bksq, qs
            bne  ._4
            lsr  w0, brsq, 3
            cmp  w0, RANK_1
            bne  ._4
            cbz  w1, .ReturnDraw
            lsl  w0, wksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w4, [x6, wpsq_]
            cmp  w4, 2
            bhs  .ReturnDraw
._4:
            cmp  wpsq, SQ_A7
            bne  ._5
            cmp  wrsq, SQ_A8
            bne  ._5
            cmp  bksq, SQ_H7
            beq  @1f
            cmp  bksq, SQ_G7
            bne  ._5
@1:
            and  w0, brsq, 7
            cmp  w0, FILE_A
            bne  ._5
            lsr  w0, brsq, 3
            cmp  w0, RANK_3
            bls  .ReturnDraw
            and  w0, wksq, 7
            cmp  w0, FILE_D
            bhs  .ReturnDraw
            lsr  w0, wksq, 3
            cmp  w0, RANK_5
            bls  .ReturnDraw
._5:
            cmp  r, RANK_5
            bhi  ._6
            add  w0, wpsq, DELTA_N
            cmp  w0, bksq
            bne  ._6
            lsl  w0, wksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, wpsq_]
            sub  w0, w0, w1
            cmp  w0, 2
            blt  ._6
            lsl  w0, wksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, brsq_]
            sub  w0, w0, w1
            cmp  w0, 2
            bge  .ReturnDraw
._6:
            cmp  r, RANK_7
            bne  ._7
            cmp  f, FILE_A
            beq  ._7
            and  w0, wrsq, 7
            cmp  w0, f
            bne  ._7
            cmp  wrsq, qs
            beq  ._7
            lsl  w0, wksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, qs_]
            lsl  w2, bksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x2
           ldrb  w2, [x6, qs_]
            sub  w2, w2, 2
            add  w2, w2, w1
            cmp  w0, w2
            bge  ._7
            lsl  w2, bksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x2
           ldrb  w2, [x6, wrsq_]
            add  w2, w2, w1
            cmp  w0, w2
            bge  ._7
            add  w0, w0, w0
            sub  w0, w0, SCALE_FACTOR_MAX
            neg  w0, w0
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret
._7:
            cmp  f, FILE_A
            beq  ._8
            and  w0, wrsq, 7
            cmp  w0, f
            bne  ._8
            cmp  wrsq, wpsq
            bhs  ._8
            lsl  w0, wksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, qs_]
            lsl  w2, bksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x2
           ldrb  w2, [x6, qs_]
            sub  w2, w2, 2
            add  w2, w2, w1
            cmp  w0, w2
            bge  ._8
            lsl  w0, wksq, 6
           _lea  x6, SquareDistance + DELTA_N
            add  x6, x6, x0
           ldrb  w0, [x6, wpsq_]
            lsl  w2, bksq, 6
           _lea  x6, SquareDistance + DELTA_N
            add  x6, x6, x2
           ldrb  w2, [x6, wpsq_]
            sub  w2, w2, 2
            add  w2, w2, w1
            cmp  w0, w2
            bge  ._8
            lsl  w0, bksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, wrsq_]
            add  w0, w0, w1
            cmp  w0, 3
            bge  @1f
            lsl  w0, wksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, qs_]
            lsl  w2, bksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x2
           ldrb  w2, [x6, wrsq_]
            add  w2, w2, w1
            cmp  w0, w2
            bge  ._8
            lsl  w0, wksq, 6
           _lea  x6, SquareDistance + DELTA_N
            add  x6, x6, x0
           ldrb  w0, [x6, wpsq_]
            lsl  w2, bksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x2
           ldrb  w2, [x6, wrsq_]
            add  w2, w2, w1
            cmp  w0, w2
            bge  ._8
@1:
            lsl  w0, wpsq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, qs_]
            lsl  w2, wksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x2
           ldrb  w2, [x6, qs_]
            mov  w4, -8
            mul  w0, w0, w4
            mov  w4, -2
            mul  w2, w2, w4
            add  w0, w0, SCALE_FACTOR_MAX
            add  w0, w0, w2
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret
._8:
            cmp  r, RANK_4
            bhi  ._9
            cmp  bksq, wpsq
            blo  ._9
            and  w0, bksq, 7
            and  w2, wpsq, 7
            cmp  w0, w2
            bne  @1f
            mov  w0, 10
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret
@1:
            and  w0, bksq, 7
            and  w2, wpsq, 7
            sub  w0, w0, w2
            add  w0, w0, 1
            tst  w0, not 2
            bne  ._9
            lsl  w0, wksq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, bksq_]
            cmp  w0, 2
            bls  ._9
            add  w0, w0, w0
            sub  w0, w0, 24
            neg  w0, w0
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret
._9:
            mov  w0, SCALE_FACTOR_NONE
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret
.ReturnDraw:
            mov  w0, 0
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret

restore wpsq_
restore wrsq_
restore wksq_
restore brsq_
restore bksq_
restore wpsq
restore wrsq
restore wksq
restore brsq
restore bksq


restore f_
restore r_
restore qs_
restore f
restore r
restore qs

EndgameScale_KRPKB:
Display 2, "KRPKB%n"

ksq_ equ x8
bsq_ equ x9
psq_ equ x10
ppush_	equ x11
ksq equ w8
bsq equ w9
psq equ w10
ppush  equ w11

            ldr  x2, [x20, Pos.typeBB + 8*Pawn]
            mov  x0, FileABB or FileHBB
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*Pawn]
            and  x10, x10, x4
           rbit  x10, x10
            clz  x10, x10
            tst  x0, x2
            beq  .ReturnNone
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x8, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x8, x8, x4
           rbit  x8, x8
            clz  x8, x8
            add  x6, x20, Pos.typeBB
            ldr  x9, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*Bishop]
            and  x9, x9, x4
           rbit  x9, x9
            clz  x9, x9
            mov  ppush_, -1
            add  ppush_, ppush_, x1, lsl 1
            lsl  ppush_, ppush_, 3
            eor  w1, w1, 1
            mov  w4, 7
            mul  w2, w1, w4
            lsr  w0, psq, 3
            eor  w0, w0, w2
            cmp  w0, RANK_5
            beq  .Rank5
            cmp  w0, RANK_6
            beq  .Rank6
.ReturnNone:
            mov  w0, SCALE_FACTOR_NONE
.Return:
            ret
.Rank6:
            lsl  w0, ksq, 6
            add  w0, w0, psq
           _lea  x6, SquareDistance
            add  x6, x6, ppush_, lsl 1
           ldrb  w0, [x6, x0]
            cmp  w0, 1
            bhi  .ReturnNone
            add  w0, psq, ppush
           _lea  x6, BishopAttacksPDEP
            ldr  x2, [x6, bsq_, lsl 3]
            lsr  x4, x2, x0
            tbz  x4, 0, .ReturnNone
            and  w0, bsq, 7
            and  w2, psq, 7
            sub  w0, w0, w2
            add  w0, w0, 1
            cmp  w0, 3
            blo  .ReturnNone
            mov  w0, 8
            ret
.Rank5:
            mov  w0, bsq
            eor  w0, w0, psq
            mov  w4, 9
            and  w0, w0, w4
            cmp  w0, 8
            beq  .ReturnNone
            cmp  w0, 1
            beq  .ReturnNone
            add  w2, psq, ppush
            add  w2, w2, ppush, lsl 1
            lsl  w2, w2, 6
           _lea  x6, SquareDistance
            add  x6, x6, x2
           ldrb  w2, [x6, ksq_]
            mov  w0, 48
            cmp  w2, 2
            bhi  .Return
            mov  w0, 24
           cbnz  w2, .Return
            sub  ksq, ksq, ppush, lsl 1
            ldr  x2, [x20, Pos.typeBB + 8*King]
            add  x6, x20, Pos.typeBB
            ldr  x4, [x6, x1, lsl 3]
            and  x2, x2, x4
           rbit  x2, x2
            clz  x2, x2
            cmp  ksq, w2
            bne  .Return
            mov  w0, 48
            ret

restore ksq_
restore bsq_
restore psq_
restore ppush_
restore ksq
restore bsq
restore psq
restore ppush

EndgameScale_KRPPKRP:
Display 2, "KRPPKRP%n"

wpsq1_ equ x8
wpsq2_ equ x9
bksq_  equ x10
wpsq1 equ w8
wpsq2 equ w9
bksq  equ w10

KRPPKRPScaleFactors = (0+256*(9+256*(10+256*(14+256*(21+256*(44))))))
            lsl  w0, w1, 9
            ldr  x8, [x20, Pos.typeBB + 8*Pawn]
            mov  x2, x8
            add  x6, x20, Pos.typeBB
            ldr  x4, [x6, x1, lsl 3]
            and  x8, x8, x4
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            and  x2, x2, x10
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x10, x10, x4
           rbit  x9, x8
            clz  x9, x9
            clz  x8, x8
            eor  x8, x8, 63
           rbit  x10, x10
            clz  x10, x10
           _lea  x6, PassedPawnMask
            add  x6, x6, x0
            ldr  x4, [x6, x8, lsl 3]
            tst  x2, x4
            beq  .ReturnNone
           _lea  x6, PassedPawnMask
            add  x6, x6, x0
            ldr  x4, [x6, x9, lsl 3]
            tst  x2, x4
            beq  .ReturnNone
            sub  w0, w1, 1
            and  w0, w0, 7
            mov  w11, wpsq1
            mov  w2, wpsq2
            lsr  w11, w11, 3
            lsr  w2, w2, 3
            eor  w11, w11, w0
            eor  w2, w2, w0
            cmp  w11, w2
           csel  w11, w2, w11, lo
            lsr  w2, bksq, 3
            eor  w2, w2, w0
            cmp  w2, w11
            bls  .ReturnNone
            and  w0, bksq, 7
            and  w2, wpsq1, 7
            sub  w0, w0, w2
            add  w0, w0, 1
            cmp  w0, 3
            bhs  .ReturnNone
            and  w0, bksq, 7
            and  w2, wpsq2, 7
            sub  w0, w0, w2
            add  w0, w0, 1
            cmp  w0, 3
            bhs  .ReturnNone
          mov64  x0, KRPPKRPScaleFactors
            lsl  w1, w11, 3
            lsr  x0, x0, x1
            and  w0, w0, 255
            ret
.ReturnNone:
            mov  w0, SCALE_FACTOR_NONE
            ret

restore wpsq1_
restore wpsq2_
restore bksq_
restore wpsq1
restore wpsq2
restore bksq

EndgameScale_KPsK:
Display 2, "KPsK%n"

pawns equ x8
ksq  equ w9
ksq_  equ x9
            add  x6, x20, Pos.typeBB
            ldr  x8, [x6, x1, lsl 3]
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x9, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*Pawn]
            and  x8, x8, x4
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x9, x9, x4
           rbit  x9, x9
            clz  x9, x9
            and  w0, ksq, 7
           rbit  x2, x8
            clz  x2, x2
            and  w2, w2, 7
            sub  w0, w0, w2
            add  w0, w0, 1
            cmp  w0, 3
            bhs  .ReturnNone
            lsr  ksq, ksq, 3
            lsl  w0, w1, 6
           _lea  x6, InFrontBB
            add  x6, x6, x0
            ldr  x0, [x6, ksq_, lsl 3]
            mvn  x0, x0
            tst  x0, pawns
            bne  .ReturnNone
            mov  x0, AllSquares xor FileABB
           ands  x0, x0, pawns
            beq  .Return
            mov  x0, AllSquares xor FileHBB
           ands  x0, x0, pawns
            beq  .Return
        
.ReturnNone:
            mov  w0, SCALE_FACTOR_NONE
.Return:
            ret

restore pawns
restore ksq
restore ksq_


EndgameScale_KBPKB:
Display 2, "KBPKB%n"

pawnSq	        equ w8
strongBishopSq  equ w9
weakBishopSq    equ w10
weakKingSq      equ w11
pawnSq_ 	equ x8
strongBishopSq_ equ x9
weakBishopSq_	equ x10
weakKingSq_	equ x11

            stp  x21, x29, [sp, -16]!
            add  x6, x20, Pos.typeBB
            ldr  x8, [x6, x1, lsl 3]
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            ldr  x9, [x20, Pos.typeBB + 8*Bishop]
            ldr  x11, [x20, Pos.typeBB + 8*King]
            and  x11, x11, x10
            and  x10, x10, x9
            and  x9, x9, x8
            ldr  x4, [x20, Pos.typeBB+8*Pawn]
            and  x8, x8, x4
           rbit  x8, x8
            clz  x8, x8
           rbit  x9, x9
            clz  x9, x9
           rbit  x10, x10
            clz  x10, x10
           rbit  x11, x11
            clz  x11, x11
            sub  w21, w1, 1
            and  w21, w21, 7
            and  w0, weakKingSq, 7
            and  w2, pawnSq, 7
            cmp  w0, w2
            bne  .c2
            lsr  w0, pawnSq, 3
            lsr  w2, weakKingSq, 3
            eor  w0, w0, w21
            eor  w2, w2, w21
            cmp  w0, w2
            bhs  .c2
            lsr  w2, weakKingSq, 3
            eor  w2, w2, w21
            cmp  w2, RANK_6
            bls  .ReturnDraw
            eor  w0, weakKingSq, strongBishopSq
            mov  w4, 9
           ands  w0, w0, w4
            beq  .c2
            mov  w4, 9
            cmp  w0, w4
            beq  .c2
.ReturnDraw:
            mov  w0, 0
            ldp  x21, x29, [sp], 16
            ret
.c2:
            eor  w0, weakBishopSq, strongBishopSq
            mov  w4, 9
           ands  w0, w0, w4
            beq  .ReturnNone
            mov  w4, 9
            cmp  w0, w4
            beq  .ReturnNone
            lsr  w0, pawnSq, 3
            eor  w0, w0, w21
            cmp  w0, RANK_5
            bls  .ReturnDraw
            and  w21, w21, 1
            lsl  w21, w21, 9
           _lea  x6, ForwardBB
            add  x6, x6, x21
            ldr  x21, [x6, pawnSq_, lsl 3]
            lsr  x4, x21, weakKingSq_
           tbnz  x4, 0, .ReturnDraw
            lsl  w0, weakBishopSq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, pawnSq_]
            cmp  w0, 3
            blo  .ReturnNone
            ldr  x8, [x20, Pos.typeBB + 8*White]
            ldr  x4, [x20, Pos.typeBB + 8*Black]
            orr  x8, x8, x4
            BishopAttacks  x0, x10, x8, x2, x4
            tst  x0, x21
            bne  .ReturnDraw
.ReturnNone:
            mov  w0, SCALE_FACTOR_NONE
            ldp  x21, x29, [sp], 16
            ret

restore pawnSq
restore strongBishopSq
restore weakBishopSq
restore weakKingSq
restore pawnSq_
restore strongBishopSq_
restore weakBishopSq_
restore weakKingSq_


EndgameScale_KBPPKB:
Display 2, "KBPPKB%n"

wbsq equ w8
bbsq equ w9
ksq  equ w10
psq1 equ w11
psq2 equ w22
blockSq1 equ w23
blockSq2 equ w24
wbsq_ equ x8
bbsq_ equ x9
ksq_  equ x10
psq1_ equ x11
psq2_ equ x22
blockSq1_ equ x23
blockSq2_ equ x24

            stp  x25, x24, [sp, -16]!
            stp  x23, x22, [sp, -16]!
            stp  x21, x30, [sp, -16]!
            add  x6, x20, Pos.typeBB
            ldr  x8, [x6, x1, lsl 3]
            add  x6, x20, Pos.typeBB
            ldr  x11, [x6, x1, lsl 3]
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x9, [x6, x1, lsl 3]
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*Bishop]
            and  x8, x8, x4
            ldr  x4, [x20, Pos.typeBB + 8*Bishop]
            and  x9, x9, x4
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x10, x10, x4
            ldr  x4, [x20, Pos.typeBB + 8*Pawn]
            and  x11, x11, x4
           rbit  x8, x8
            clz  x8, x8
           rbit  x9, x9
            clz  x9, x9
           rbit  x10, x10
            clz  x10, x10
           rbit  x22, x11
            clz  x22, x22
            clz  x11, x11
            eor  x11, x11, 63
            sub  w21, w1, 1
            and  w21, w21, 7
            cbz  w1, @1f
            mov  w4, w11
            mov  w11, w22
            mov  w22, w4
    @1:
            eor  w0, wbsq, bbsq
            mov  w4, 9
           ands  w0, w0, w4
            beq  .ReturnNone
            mov  w4, 9
            cmp  w0, w4
            bne  @1f
.ReturnNone:
            mov  w0, SCALE_FACTOR_NONE
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret
    @1:
            mov  w0, -1
            add  w0, w0, w1, lsl 1
            add  blockSq1, psq2, w0, lsl 3
            and  blockSq2, psq1, 7
            and  w2, psq2, 56
            add  blockSq2, blockSq2, w2
            eor  w0, ksq, wbsq
            mov  w4, 9
           ands  w0, w0, w4
            beq  .ReturnNone
            mov  w4, 9
            cmp  w0, w4
            beq  .ReturnNone
            and  w0, psq1, 7
            and  w2, psq2, 7
           subs  w0, w0, w2
            beq  .c0
            cmp  w0, 1
            beq  .c1
            cmp  w0, -1
            beq  .c1
              b  .ReturnNone
.c0:
            and  w0, ksq, 7
            and  w2, blockSq1, 7
            cmp  w0, w2
            bne  .ReturnNone
            lsr  w0, ksq, 3
            lsr  w2, blockSq1, 3
            eor  w0, w0, w21
            eor  w2, w2, w21
            cmp  w0, w2
            blo  .ReturnNone
.ReturnDraw:
            mov  w0, 0
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret
.c1:
            ldr  x21, [x20, Pos.typeBB + 8*White]
            ldr  x4, [x20, Pos.typeBB + 8*Black]
            orr  x21, x21, x4
            cmp  ksq, blockSq1
            bne  .c12
            cmp  bbsq, blockSq2
            beq  .ReturnDraw
            lsr  w0, psq1, 3
            lsr  w2, psq2, 3
            sub  w0, w0, w2
            add  w0, w0, 1
            cmp  w0, 3
            bhs  .ReturnDraw
  BishopAttacks  x0, blockSq2_, x21, x2, x4
            add  x6, x20, Pos.typeBB
            ldr  x2, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*Bishop]
            and  x2, x2, x4
            tst  x0, x2
            bne  .ReturnDraw
.ReturnNone2:
            mov  w0, SCALE_FACTOR_NONE
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret
.c12:
            cmp  ksq, blockSq2
            bne  .ReturnNone2
            cmp  bbsq, blockSq1
            beq  .ReturnDraw
  BishopAttacks  x0, blockSq1_, x21, x2, x4
            add  x6, x20, Pos.typeBB
            ldr  x2, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*Bishop]
            and  x2, x2, x4
            tst  x0, x2
            bne  .ReturnDraw
            mov  w0, SCALE_FACTOR_NONE
            ldp  x21, x30, [sp], 16
            ldp  x23, x22, [sp], 16
            ldp  x25, x24, [sp], 16
            ret

restore wbsq
restore bbsq
restore ksq
restore psq1
restore psq2
restore blockSq1
restore blockSq2
restore wbsq_
restore bbsq_
restore ksq_
restore psq1_
restore psq2_
restore blockSq1_
restore blockSq2_


EndgameScale_KBPKN:
Display 2, "KBPKN%n"
pawnSq	        equ w8
strongBishopSq  equ w9
weakKingSq      equ w10
pawnSq_ 	equ x8
strongBishopSq_ equ x9
weakKingSq_	equ x10
            stp  x21, x29, [sp, -16]!
            add  x6, x20, Pos.typeBB
            ldr  x8, [x6, x1, lsl 3]
            ldr  x9, [x20, Pos.typeBB + 8*Bishop]
            and  x9, x9, x8
            ldr  x4, [x20, Pos.typeBB + 8*Pawn]
            and  x8, x8, x4
            eor  w1, w1, 1
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x10, x10, x4
           rbit  x8, x8
            clz  x8, x8
           rbit  x9, x9
            clz  x9, x9
           rbit  x10, x10
            clz  x10, x10
            sub  w21, w1, 1
            and  x21, x21, 7
            and  w0, weakKingSq, 7
            and  w2, pawnSq, 7
            cmp  w0, w2
            bne  .ReturnNone
            lsr  w0, pawnSq, 3
            lsr  w2, weakKingSq, 3
            eor  w0, w0, w21
            eor  w2, w2, w21
            cmp  w0, w2
            bhs  .ReturnNone
            lsr  w2, weakKingSq, 3
            eor  w2, w2, w21
            cmp  w2, RANK_6
            bls  @1f
            eor  w0, weakKingSq, strongBishopSq
            mov  w4, 9
           ands  w0, w0, w4
            beq  .ReturnNone
            mov  w4, 9
            cmp  w0, w4
            beq  .ReturnNone
    @1:
            mov  w0, 0
            ldp  x21, x29, [sp], 16
            ret
.ReturnNone:
            mov  w0, SCALE_FACTOR_NONE
            ldp  x21, x29, [sp], 16
            ret
restore pawnSq
restore strongBishopSq
restore weakKingSq
restore pawnSq_
restore strongBishopSq_
restore weakKingSq_

EndgameScale_KNPK:
Display 2, "KNPK%n"
            ldr  x8, [x20, Pos.typeBB + 8*Pawn]
            add  x6, x20, Pos.typeBB
            ldr  x4, [x6, x1, lsl 3]
            and  x8, x8, x4
           rbit  x8, x8
            clz  x8, x8
            eor  w1, w1, 1
            ldr  x9, [x20, Pos.typeBB + 8*King]
            add  x6, x20, Pos.typeBB
            ldr  x4, [x6, x1, lsl 3]
            and  x9, x9, x4
           rbit  x9, x9
            clz  x9, x9
            sub  w2, w1, 1
            and  w2, w2, 56
            tst  w8, 4
          csetm  w0, ne
            and  w0, w0, 7
            eor  w0, w0, w2
            eor  w8, w8, w0
            eor  w9, w9, w0
            mov  w0, SCALE_FACTOR_NONE
            cmp  w8, SQ_A7
            bne  .Return
           _lea  x6, SquareDistance + 64*SQ_A8
           ldrb  w2, [x6, x9]
            cmp  w2, 1
            bhi  .Return
            mov  w0, 0
.Return:
            ret

EndgameScale_KNPKB:
Display 2, "KNPKB%n"
pawnSq	    equ w8
bishopSq    equ w9
weakKingSq  equ w10
pawnSq_     equ x8
bishopSq_   equ x9
weakKingSq_ equ x10
            lsl  w7, w1, 9
            add  x6, x20, Pos.typeBB
            ldr  x8, [x6, x1, lsl 3]
            mov  x11, x8
            eor  w1, w1, 1
            ldr  x4, [x20, Pos.typeBB + 8*Pawn]
            and  x8, x8, x4
            add  x6, x20, Pos.typeBB
            ldr  x9, [x6, x1, lsl 3]
            orr  x11, x11, x9
            ldr  x10, [x20, Pos.typeBB + 8*King]
            and  x10, x10, x9
            ldr  x4, [x20, Pos.typeBB + 8*Bishop]
            and  x9, x9, x4
           rbit  x8, x8
            clz  x8, x8
           rbit  x9, x9
            clz  x9, x9
           rbit  x10, x10
            clz  x10, x10
  BishopAttacks  x0, x9, x11, x2, x4
           _lea  x6, ForwardBB
            add  x6, x6, x7
            ldr  x4, [x6, pawnSq_, lsl 3]
            tst  x0, x4
            bne  @1f
            mov  w0, SCALE_FACTOR_NONE
            ret
    @1:
            lsl  w0, weakKingSq, 6
           _lea  x6, SquareDistance
            add  x6, x6, x0
           ldrb  w0, [x6, pawnSq_]
            ret

restore pawnSq
restore bishopSq
restore weakKingSq
restore pawnSq_
restore bishopSq_
restore weakKingSq_


EndgameScale_KPKP:
Display 2, "KPKP%n"
            add  x6, x20, Pos.typeBB
            ldr  x2, [x6, x1, lsl 3]
            ldr  x9, [x20, Pos.typeBB + 8*King]
            ldr  x8, [x20, Pos.typeBB + 8*Pawn]
    ; rdx = strong pieces
            eor  w1, w1, 1
    ; ecx = weak side
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x1, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x10, x10, x4
    ; r10 = weak pieces  should be the long king
            and  x8, x8, x2
           rbit  x8, x8
            clz  x8, x8
    ; r8d = strong pawn
            and  x9, x9, x2
           rbit  x9, x9
            clz  x9, x9
    ; r9d = strong king
           rbit  x10, x10
            clz  x10, x10
    ; r10d = weak king
    ; if black is the strong side, flip pieces along horizontal axis
            sub  w0, w1, 1
            and  w0, w0, 56
    ; if weak king is on right side of board, flip pieces along vertical axis
            tst  w10, 4
          csetm  w2, ne
            and  w2, w2, 7
    ; do the flip
            eor  w0, w0, w2
            eor  w8, w8, w0
            eor  w9, w9, w0
            eor  w10, w10, w0
            add  w0, w8, 1
            and  w0, w0, 7
            cmp  w8, SQ_A5
            blo  .try_KPK
            cmp  w0, 2
            blo  .try_KPK
            mov  w0, SCALE_FACTOR_NONE
            ret
.try_KPK:
    ; look up entry
            mov  w0, w8
            add  x11, x9, x8, lsl 6
           _lea  x6, KPKEndgameTable + 8*(-8*64)
            ldr  x11, [x6, x11, lsl 3]
    ; figure out which bit to test
    ; bit 2 of weak king should now be 0, so fill it with the correct side
            ldr  w4, [x20, Pos.sideToMove]
            eor  w1, w1, w4
            add  w2, w10, w1, lsl 2
            sub  w1, w1, 1
            lsr  w0, w0, 3
            mov  w4, VALUE_KNOWN_WIN + PawnValueEg
            add  w0, w0, w4
            eor  w0, w0, w1
            sub  w0, w0, w1
    ; eax = score if win
            lsr  x4, x11, x2
            tst  x4, 1
          csetm  w0, ne
            and  w0, w0, SCALE_FACTOR_NONE
            ret
