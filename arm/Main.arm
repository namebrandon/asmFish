

             bl  Os_SetStdHandles
             bl  Os_InitializeTimer
             bl  Os_CheckCPU

    ; initialize the engine
             bl  Options_Init
             bl  Gen_Init
             bl  BitBoard_Init
             bl  Position_Init
             bl  BitTable_Init
             bl  Search_Init
             bl  Evaluate_Init
             bl  Pawn_Init
             bl  Endgame_Init

    ; setup logger
if LOG_FILE = '<empty>'
            mov  x1, 0
else
        lstring  x1, @1f, LOG_FILE
    @1:
end if
             bl  Log_Init


    ; write engine name
if VERBOSE = 0
           _lea  x27, szGreetingEnd
           _lea  x1, szGreeting
             bl  WriteLine
end if

    ; set up threads and hash
             bl  MainHash_Create
             bl  ThreadPool_Create
if USE_SYZYGY
            mov  x0, 0
             bl  Tablebase_Init
end if
if USE_WEAKNESS
             bl  Weakness_Create
end if
    ; command line could contain commands
    ; this function also initializes InputBuffer
    ; which contains the commands we should process first
             bl  Os_ParseCommandLine

    ; enter the main loop
             bl  UciLoop

if USE_SYZYGY
            mov  x0, 0
             bl  Tablebase_Init
end if
    ; clean up threads and hash
             bl  ThreadPool_Destroy
             bl  MainHash_Destroy

    ; release logger file if in use
            mov  x1, 0
             bl  Log_Init

    ; options may also require cleaning
             bl  Options_Destroy

    ; clean up input buffer
           _lea  x2, ioBuffer
            ldr  x1, [x2, IOBuffer.inputBuffer]
            ldr  x2, [x2, IOBuffer.inputBufferSizeB]
             bl  Os_VirtualFree

            mov  w0, 0
             bl  Os_ExitProcess

