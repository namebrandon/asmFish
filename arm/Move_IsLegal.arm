
Move_IsLegal:
    ; in: x20  address of Pos
    ;     x21  address of State - pinned member must be filled in
    ;     x1   move - assumed to pass IsMovePseudoLegal test
    ; out: w0 =  0 if move is not legal
    ;      w0 = -1 if move is legal

            lsr  w2, w1, 12
            ldr  x15, [x21, State.pinned]
            and  w0, w1, 64*64 - 1
           ubfx  w1, w1, 6, 6
    ; w0 = movement squares
    ; w2 = move type

            add  x6, x20, Pos.typeBB
            ldr  w13, [x20, Pos.sideToMove]
            ldr  x11, [x20, Pos.typeBB + 8*King]
            ldr  x4, [x6, x13, lsl 3]
            and  x11, x11, x4
           rbit  x14, x11
            clz  x14, x14
    ; x14 = our king square
    ; x11 = our king bitboard
    ; w1 = source square

    ; pseudo legal castling moves are always legal
    ; ep captures require special attention
            cmp  w2, MOVE_TYPE_EPCAP
            bhs  .Special
    ; if we are moving king, have to check destination square
            lsr  x4, x11, x1
           tbnz  x4, 0, .KingMove
    ; if piece is not pinned, then move is legal
            lsr  x5, x15, x1
           tbnz  x5, 0, .CheckPinned
            mov  w0, -1
            ret

.CheckPinned:
    ; if something is pinned, its movement should be aligned with our king
           _lea  x6, LineBB
            ldr  x4, [x6, x0, lsl 3]
            tst  x4, x11
           cset  w0, ne
            neg  w0, w0
            ret

.KingMove:
    ; if they have an attacker to king's destination square, then move is illegal
            and  x0, x0, 63
           _lea  x7, PawnAttacks
            add  x7, x7, x13, lsl 9
            ldr  x1, [x7, x0, lsl 3]

            add  x3, x20, Pos.typeBB
            ldr  x9, [x3, x13, lsl 3]
            eor  x4, x13, 1
            ldr  x10, [x3, x4, lsl 3]
            orr  x9, x9, x10
    ; pawn
            ldr  x4, [x20, Pos.typeBB + 8*Pawn]
            and  x1, x1, x4
            tst  x1, x10
            bne  .Illegal
    ; king
           _lea  x7, KingAttacks
            ldr  x2, [x7, x0, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*King]
            and  x2, x2, x4
            tst  x2, x10
            bne  .Illegal
    ; knight
           _lea  x7, KnightAttacks
            ldr  x2, [x7, x0, lsl 3]
            ldr  x4, [x20, Pos.typeBB + 8*Knight]
            and  x2, x2, x4
            tst  x2, x10
            bne  .Illegal
    ; bishop + queen
  BishopAttacks  x2, x0, x9, x8, x4
            ldr  x8, [x20, Pos.typeBB + 8*Bishop]
            ldr  x4, [x20, Pos.typeBB + 8*Queen]
            orr  x8, x8, x4
            and  x8, x8, x10
            tst  x2, x8
            bne  .Illegal
    ; rook + queen
    RookAttacks  x2, x0, x9, x8, x4
            ldr  x8, [x20, Pos.typeBB + 8*Rook]
            ldr  x4, [x20, Pos.typeBB + 8*Queen]
            orr  x8, x8, x4
            and  x8, x8, x10
            tst  x2, x8
            bne  .Illegal

.Legal:
            mov  w0, -1
            ret

.Illegal:
            mov  w0, 0
            ret

.Special:
    ; pseudo legal castling moves are always legal
            cmp  w2, MOVE_TYPE_CASTLE
            bhs  .Legal

.EpCapture:
    ; for ep captures, just make the move and test if our king is attacked
            eor  x4, x13, 1
            add  x6, x20, Pos.typeBB
            ldr  x10, [x6, x4, lsl 3]
    ; all pieces
            ldr  x2, [x20, Pos.typeBB + 8*White]
            ldr  x4, [x20, Pos.typeBB + 8*Black]
            orr  x2, x2, x4
    ; remove source square
            mov  x4, 1
            lsl  x4, x4, x1
            bic  x2, x2, x4
    ; add destination square (ep square)
            and  x0, x0, 63
            mov  x4, 1
            lsl  x4, x4, x0
            orr  x2, x2, x4
    ; get queens
            ldr  x9, [x20, Pos.typeBB + 8*Queen]
    ; remove captured pawn
            lsl  x1, x13, 1
            sub  x1, x1, 1
            add  x1, x0, x1, lsl 3
            mov  x4, 1
            lsl  x4, x4, x1
            bic  x2, x2, x4
    ; check for rook attacks
            ldr  x1, [x20, Pos.typeBB + 8*Rook]
    RookAttacks  x0, x14, x2, x8, x4
            orr  x1, x1, x9
            and  x1, x1, x10
            tst  x0, x1
            bne  .Illegal
    ; check for bishop attacks
            ldr  x1, [x20, Pos.typeBB + 8*Bishop]
  BishopAttacks  x0, x14, x2, x8, x4
            orr  x1, x1, x9
            and  x1, x1, x10
            tst  x0, x1
            bne  .Illegal

            mov  w0, -1
            ret
