Move_Undo:
    ; x20  address of Pos
    ; x21  address of State
    ; x1   move

Display 2, "Move_Undo(move=%m1)\n"


if DEBUG
        PushAll
           _lea  x27, debug.position
             bl  Position_Print
            str  wzr, [x27]
         PopAll
end if

            and  x9, x1, 63
           ubfx  x8, x1, 6, 6
            lsr  x1, x1, 12

            ldr  w15, [x20, Pos.sideToMove]
            eor  w16, w15, 1

           ldrb  w11, [x21, State.capturedPiece]
           ldrb  w10, [x20, x9]     ; Pos.board = 0

            mov  x17, 1
            lsl  x2, x17, x8
            lsl  x17, x17, x9
            orr  x2, x2, x17

            and  x0, x10, 7

            sub  x21, x21, sizeof.State

            str  w16, [x20, Pos.sideToMove]
           strb  w10, [x20, x8]     ; Pos.board = 0
           strb  w11, [x20, x9]     ; Pos.board = 0
            add  x12, x20, Pos.typeBB
            ldr  x3, [x12, x0, lsl 3]
            ldr  x4, [x12, x16, lsl 3]
            eor  x3, x3, x2
            eor  x4, x4, x2
            str  x3, [x12, x0, lsl 3]
            str  x4, [x12, x16, lsl 3]

            cmp  x1, MOVE_TYPE_PROM
            bhs  Move_Undo.Special

            add  x7, x20, Pos.pieceIdx
            add  x6, x20, Pos.pieceList
           ldrb  w0, [x7, x9]
           strb  w8, [x6, x0]
           strb  w0, [x7, x8]
            and  x0, x11, 7
           cbnz  x0, Move_Undo.Captured
if DEBUG
              b  Move_Undo_Check
end if
            ret

Move_Undo.Captured:

            add  x5, x20, Pos.pieceEnd
           ldrb  w1, [x5, x11]

            ldr  x3, [x12, x0, lsl 3]
            ldr  x4, [x12, x15, lsl 3]
            orr  x3, x3, x17
            orr  x4, x4, x17
            str  x3, [x12, x0, lsl 3]
            str  x4, [x12, x15, lsl 3]

           strb  w1, [x7, x9]
           strb  w9, [x6, x1]
            add  x1, x1, 1
           strb  w1, [x5, x11]
if DEBUG
              b  Move_Undo_Check
end if
            ret


Move_Undo.Special:

            mov  x2, 0
            cmp  x1, MOVE_TYPE_EPCAP
            bhi  Move_Undo.Castle
            add  x7, x20, Pos.pieceIdx
           ldrb  w0, [x7, x9]
            add  x7, x20, Pos.pieceList
           strb  w8, [x7, x0]
            add  x7, x20, Pos.pieceIdx
           strb  w0, [x7, x8]
            mov  x0, x11
            beq  Move_Undo.EpCapture

Move_Undo.Prom:

	; change promoted piece back to pawn on r8d

            mov  x0, Pawn
            add  x0, x0, x16, lsl 3
            add  x1, x1, -MOVE_TYPE_PROM + Knight
            mov  x4, 1
            lsl  x4, x4, x8
            orr  x2, x2, x4
            add  x6, x20, Pos.typeBB
            ldr  x4, [x6, 8*Pawn]
            orr  x4, x4, x2
            str  x4, [x6, 8*Pawn]
            ldr  x4, [x6, x1, lsl 3]
            eor  x4, x4, x2
            str  x4, [x6, x1, lsl 3]
            add  x7, x20, Pos.board
           strb  w0, [x7, x8]
           strb  w11, [x7, x9]

            add  x1, x1, x16, lsl 3
            add  x7, x20, Pos.pieceEnd
           ldrb  w17, [x7, x1]
            sub  x17, x17, 1
            add  x7, x20, Pos.pieceList
           ldrb  w2, [x7, x17]
            add  x7, x20, Pos.pieceIdx
           ldrb  w0, [x7, x8]

            add  x7, x20, Pos.pieceEnd
           strb  w17, [x7, x1]
            add  x7, x20, Pos.pieceIdx
           strb  w0, [x7, x2]
            add  x7, x20, Pos.pieceList
           strb  w2, [x7, x0]
            mov  w4, 64
           strb  w4, [x7, x17]

            add  x7, x20, x16, lsl 3
           ldrb  w2, [x7, Pos.pieceEnd + Pawn]
            add  x7, x20, Pos.pieceIdx
           strb  w2, [x7, x8]
            add  x7, x20, Pos.pieceList
           strb  w8, [x7, x2]
            add  x2, x2, 1
            add  x7, x20, x16, lsl 3
           strb  w2, [x7, Pos.pieceEnd + Pawn]
            mov  x0, x11

            mov  x2, 0
            and  x11, x11, 7
           cbnz  x11, Move_Undo.PromCapture
if DEBUG
              b  Move_Undo_Check
end if
            ret

Move_Undo.PromCapture:

            eor  x16, x16, 1
            mov  x4, 1
            lsl  x4, x4, x9
            orr  x2, x2, x4
            add  x3, x20, Pos.typeBB
            ldr  x4, [x3, x11, lsl 3]
            orr  x4, x4, x2
            str  x4, [x3, x11, lsl 3]
            ldr  x4, [x3, x16, lsl 3]
            orr  x4, x4, x2
            str  x4, [x3, x16, lsl 3]

            add  x7, x20, Pos.pieceEnd
           ldrb  w1, [x7, x0]
            add  x7, x20, Pos.pieceIdx
           strb  w1, [x7, x9]
            add  x7, x20, Pos.pieceList
           strb  w9, [x7, x1]
            add  x1, x1, 1
            add  x7, x20, Pos.pieceEnd
           strb  w1, [x7, x0]
if DEBUG
              b  Move_Undo_Check
end if
            ret

Move_Undo.EpCapture:
	; place 8*rsi+Pawn on square rcx

            lsl  x1, x16, 1
            sub  x1, x1, 1
            add  x1, x9, x1, lsl 3
            eor  x16, x16, 1
            mov  x4, 1
            lsl  x4, x4, x1
            orr  x2, x2, x4
            ldr  x4, [x20, Pos.typeBB + 8*Pawn]
            orr  x4, x4, x2
            str  x4, [x20, Pos.typeBB + 8*Pawn]
            add  x3, x20, Pos.typeBB
            ldr  x4, [x3, x16, lsl 3]
            orr  x4, x4, x2
            str  x4, [x3, x16, lsl 3]
            add  x7, x20, Pos.board
           strb  wzr, [x7, x9]
           strb  w11, [x7, x1]
            add  x7, x20, Pos.pieceEnd
           ldrb  w0, [x7, x11]
            add  x7, x20, Pos.pieceIdx
           strb  w0, [x7, x1]
            add  x7, x20, Pos.pieceList
           strb  w1, [x7, x0]
            add  x0, x0, 1
            add  x7, x20, Pos.pieceEnd
           strb  w0, [x7, x11]
if DEBUG
              b  Move_Undo_Check
end if
            ret

Move_Undo.Castle:
	; r8 = kfrom
	; r9 = rfrom
	; ecx = kto
	; edx = rto
	; r10 = ourking
	; r11 = our rook

            mov  x4, 1
            lsl  x4, x4, x8
            orr  x2, x2, x4
            mov  x4, 1
            lsl  x4, x4, x9
            orr  x2, x2, x4
            add  x6, x20, Pos.typeBB
            ldr  x4, [x6, x0, lsl 3]
            eor  x4, x4, x2
            str  x4, [x6, x0, lsl 3]
            ldr  x4, [x6, x16, lsl 3]
            eor  x4, x4, x2
            str  x4, [x6, x16, lsl 3]

            mov  x10, King
            add  x10, x10, x16, lsl 3
            mov  x11, Rook
            add  x11, x11, x16, lsl 3
            and  x2, x8, 56
            cmp  x9, x8
          csetm  x0, lo
            add  x1, x2, x0, lsl 2
            add  x2, x2, x0, lsl 1
            add  x1, x1, FILE_G
            add  x2, x2, FILE_F
            add  x6, x20, Pos.board
           strb  wzr, [x6, x1]
           strb  wzr, [x6, x2]
           strb  w10, [x6, x8]
           strb  w11, [x6, x9]

            add  x7, x20, Pos.pieceIdx
           ldrb  w0, [x7, x1]
           ldrb  w17, [x7, x2]
            add  x7, x20, Pos.pieceList
           strb  w8, [x7, x0]
           strb  w9, [x7, x17]
            add  x7, x20, Pos.pieceIdx
           strb  w0, [x7, x8]
           strb  w17, [x7, x9]
	; now move rook to the back of the list

            add  x7, x20, Pos.pieceEnd
           ldrb  w0, [x7, x11]
            sub  w0, w0, 1
            add  x7, x20, Pos.pieceList
           ldrb  w10, [x7, x0]

           ldrb  w9, [x7, x17]
           ldrb  w11, [x7, x0]
           strb  w11, [x7, x17]
           strb  w9, [x7, x0]
	           ;;xchg   byte[rbp+Pos.pieceIdx+rdx], byte[rbp+Pos.pieceIdx+r12]
            add  x7, x20, Pos.pieceIdx
           ldrb  w17, [x7, x9]
           ldrb  w11, [x7, x10]
           strb  w11, [x7, x9]
           strb  w17, [x7, x10]

            add  x6, x20, Pos.typeBB
            ldr  x0, [x6, x16, lsl 3]
            ldr  x10, [x20, Pos.typeBB + 8*King]
            ldr  x11, [x20, Pos.typeBB + 8*Rook]        
            mov  x4, 1
            lsl  x4, x4, x1
            bic  x0, x0, x4
            mov  x4, 1
            lsl  x4, x4, x2
            bic  x0, x0, x4
            mov  x4, 1
            lsl  x4, x4, x8
            orr  x0, x0, x4
            mov  x4, 1
            lsl  x4, x4, x9
            orr  x0, x0, x4
            mov  x4, 1
            lsl  x4, x4, x1
            bic  x10, x10, x4
            mov  x4, 1
            lsl  x4, x4, x8
            orr  x10, x10, x4
            mov  x4, 1
            lsl  x4, x4, x2
            bic  x11, x11, x4

            mov  x4, 1
            lsl  x4, x4, x9
            orr  x11, x11, x4

            add  x6, x20, Pos.typeBB
            str  x0, [x6, x16, lsl 3]
            str  x10, [x20, Pos.typeBB + 8*King]
            str  x11, [x20, Pos.typeBB + 8*Rook]
if DEBUG
              b  Move_Undo_Check
end if
            ret


if DEBUG
Move_Undo_Check:
        PushAll
             bl  Position_IsLegal
           cbnz  w0, Move_Undo_Check.bad
         PopAll
            ret
Move_Undo_Check.bad:
           _lea  x27, debug.output
          Print "bad %i0 after Move_Undo%n"
           _lea  x1, debug.position
             bl  PrintString
           _lea  x1, debug.output
             bl  Os_WriteOut
            brk  0
end if

