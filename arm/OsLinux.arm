Os_MutexCreate:
Os_MutexDestroy:
    ; in: x1 address of mutex
            str  xzr, [x1]
            ret


Os_MutexLock:
    ; in: x1 address of mutex
            stp  x29, x30, [sp, -16]!
            mov  x29, x1
            mov  x1, 100
.L1:
            mov  w2, 0x01
         ldaxrb  w3, [x29]
         stlxrb  w4, w2, [x29]
           cbnz  w4, .L1
            cbz  w3, .L4
            sub  x1, x1, 1
           cbnz  x1, .L1
.L3:
            mov  w0, 0x0101
    @1:
          ldaxr  w3, [x29]
          stlxr  w4, w0, [x29]
           cbnz  w4, @1b
           tbnz  w3, 0, .L2
.L4:
            ldp  x29, x30, [sp], 16
            ret
.L2:
            mov  x0, x29
            mov  x1, FUTEX_WAIT_PRIVATE
            mov  x2, 0x0101
            mov  x3, 0
            mov  x4, 0
            mov  x5, 0
            mov  x8, sys_futex
            svc  0
              b  .L3


Os_MutexUnlock:
    ; in: x1 address of mutex
            stp  x29, x30, [sp, -16]!
            mov  x29, x1
           ldar  w0, [x29]
            cmp  w0, 1      ; expected = 1
            bne  .L1
            mov  w1, 0      ; desired = 0
    @1:
          ldaxr  w2, [x29]  ; w2 = obj
            cmp  w2, w0     ; cmp obj, expected
            bne  .L1
          stlxr  w4, w1, [x29]      ; obj = desired
           cbnz  w4, @1b
              b  .L3
.L1:
          stlrb  wzr, [x29]
            mov  x1, 200
.L2:
          ldarb  w0, [x29]
           tbnz  w0, 0, .L3
            sub  x1, x1, 1
           cbnz  x1, .L2
            add  x6, x29, 1
          stlrb  wzr, [x6]
            mov  x0, x29
            mov  x1, FUTEX_WAKE_PRIVATE
            mov  x2, 0x01
            mov  x3, 0
            mov  x4, 0
            mov  x5, 0
            mov  x8, sys_futex
            svc  0
            tst  w0, w0
            bmi  Failed_sys_futex_MutexUnlock
.L3:
            ldp  x29, x30, [sp], 16
            ret


Os_EventCreate:
Os_EventDestroy:
    ; in: x1 address of conditional variable
            stp  xzr, xzr, [x1]
            ret


Os_EventSignal:
    ; in: x1 address of conditional variable
            stp  x29, x30, [sp, -16]!
            mov  x29, x1
    @1:
          ldaxr  w0, [x29]
            add  w0, w0, 1
          stlxr  w4, w0, [x29]
           cbnz  w4, @1b
            mov  x0, x29
            mov  x1, FUTEX_WAKE_PRIVATE
            mov  x2, 0x01
            mov  x3, 0
            mov  x4, 0
            mov  x5, 0
            mov  x8, sys_futex
            svc  0
            tst  w0, w0
            bmi  Failed_sys_futex_EventSignal
            ldp  x29, x30, [sp], 16
            ret


Os_EventWait:
    ; in: x1  address of conditional variable
    ;     x29 address of mutex
            stp  x24, x30, [sp, -16]!
            stp  x28, x29, [sp, -16]!
            mov  x28, x1    ; x28 = cv
            mov  x29, x2    ; x29 = mutex
            add  x5, x28, 8
           ldar  w24, [x28]
           ldar  x4, [x5]
            cmp  x29, x4
            bne  .L4
.L1:
            mov  x1, x29
             bl  Os_MutexUnlock
            mov  x0, x28
            mov  x1, FUTEX_WAIT_PRIVATE
            mov  x2, x24
            mov  x3, 0
            mov  x4, 0
            mov  x5, 0
            mov  x8, sys_futex
            svc  0
.L3:
            mov  w0, 0x0101
          ldaxr  w3, [x29]
          stlxr  w4, w0, [x29]
           cbnz  w4, .L3
           tbnz  w3, 0, .L2
            ldp  x28, x29, [sp], 16
            ldp  x24, x30, [sp], 16
            ret
.L2:
            mov  x0, x29
            mov  x1, FUTEX_WAIT_PRIVATE
            mov  x2, 0x0101
            mov  x3, 0
            mov  x4, 0
            mov  x5, 0
            mov  x8, sys_futex
            svc  0
              b  .L3
.L4:
          ldaxr  x2, [x5]
           cbnz  x2, .L4_nexp
          stlxr  w4, x29, [x5]
           cbnz  w4, .L4
.L4_nexp:
           ldar  x2, [x5]
            cmp  x2, x29    ; we should have mutex x29 saved at x5
            beq  .L1
              b  Failed_EventWait


;;;;;;;;
; File ;
;;;;;;;;

Os_FileOpenWrite:
    ; in:  x1 path string
    ; out: x0 handle from CreateFile (win), fd (linux)
    ;         -1 on error
            stp  x29, x30, [sp, -16]!
            mov  x0, AT_FDCWD
            mov  x2, O_WRONLY or O_CREAT or O_TRUNC
            mov  x3, 0664o      ; set mode to 664 octal
            mov  x8, sys_openat
            svc  0
            tst  w0, w0
            bpl  @1f
            mov  x0, -1
    @1:
            ldp  x29, x30, [sp], 16
            ret


Os_FileOpenRead:
    ; in:  x1 path string
    ; out: x0 handle from CreateFile (win), fd (linux)
    ;         -1 on error
            stp  x29, x30, [sp, -16]!
            mov  x0, AT_FDCWD
            mov  x2, O_RDONLY
            mov  x3, 0          ; mode ignored
            mov  x8, sys_openat
            svc  0
            tst  w0, w0
            bpl  @1f
            mov  x0, -1
    @1:
            ldp  x29, x30, [sp], 16
            ret


Os_FileClose:
    ; in: x1 handle from CreateFile (win), fd (linux)
            stp  x29, x30, [sp, -16]!
            mov  x0, x1
            mov  x8, sys_close
            svc  0
            ldp  x29, x30, [sp], 16
            ret

Os_FileWrite:
	; in: x1 handle from CreateFile (win), fd (linux)
	;     x2 buffer
    ;     x8 size (32bits)
    ; out: x0 !=0 success
            stp  x29, x30, [sp, -16]!
            mov  x0, x1
            mov  x1, x2
            mov  x2, x8
            mov  x8, 64
            svc  0
            ldp  x29, x30, [sp], 16
            ret


Os_FileMap:
    ; in: x1 handle (win), fd (linux)
    ; out: x0 base address
    ;      x2 handle from CreateFileMapping (win), size (linux)
            stp  x20, x21, [sp, -16]!
            stp  x26, x27, [sp, -16]!
            stp  x25, x30, [sp, -16]!
    ; get file size
            sub  sp, sp, (sizeof.stat + 15) and -16
            mov  x20, x1
            mov  x0, x1
            add  x1 ,sp, 0
            mov  x8, sys_fstat
            svc  0
           cbnz  w0, Failed_sys_fstat
            ldr  x21, [sp, stat.st_size]
    ; map file
            mov  x0, 0
            mov  x1, x21
            mov  x2, PROT_READ
            mov  x3, MAP_PRIVATE
            mov  x4, x20
            mov  x5, 0
            mov  x8, sys_mmap
            svc  0
            tst  x0, x0
            bmi  Failed_sys_mmap
    ; return size in rdx, base address in rax
            mov  x2, x21
            add  sp, sp, (sizeof.stat + 15) and -16
            ldp  x25, x30, [sp], 16
            ldp  x26, x27, [sp], 16
            ldp  x20, x21, [sp], 16
            ret


Os_FileUnmap:
	; in: x1 base address
	;     x2 handle from CreateFileMapping (win), size (linux)
            stp  x29, x30, [sp, -16]!
            cbz  x1, @1f
            mov  x0, x1
            mov  x1, x2
            mov  x8, sys_munmap
            svc  0
            cmp  w0, 0
            bne  Failed_sys_unmap_VirtualFree
    @1:
            ldp  x29, x30, [sp], 16
            ret


;;;;;;;;;;
; thread ;
;;;;;;;;;;

Os_ThreadCreate:
    ; in: x1  address of start
    ;     x2  address of parameter to pass
    ;     x8  address of NumaNode struct
    ;     x9  address of address of ThreadHandle struct
            stp  x21, x30, [sp, -16]!
            stp  x28, x29, [sp, -16]!
            stp  x22, x23, [sp, -16]!
            stp  x24, x25, [sp, -16]!
            stp  x26, x27, [sp, -16]!
            mov  x22, x8    ; address of NumaNode struct
            mov  x23, x9    ; address of ThreadHandle struct
            mov  x24, x1    ; start address
            mov  x25, x2    ; parameter to pass
            mov  x1, THREAD_STACK_SIZE
            ldr  w2, [x22, NumaNode.nodeNumber]
             bl  Os_VirtualAllocNuma
            str  x0, [x23, ThreadHandle.stackAddress]
            mov  x28, x0
            mov  x0, CLONE_VM or CLONE_FS or CLONE_FILES or CLONE_SIGHAND
            orr  x0, x0, CLONE_THREAD
            add  x1, x28, THREAD_STACK_SIZE
            mov  x2, 0
            mov  x3, 0
            mov  x4, 0
            mov  x8, sys_clone
            svc  0
            tst  w0, w0
            bmi  Failed_sys_clone
            beq  .WeAreChild
            ldp  x26, x27, [sp], 16
            ldp  x24, x25, [sp], 16
            ldp  x22, x23, [sp], 16
            ldp  x28, x29, [sp], 16
            ldp  x21, x30, [sp], 16
            ret
.WeAreChild:
            mov  x0, 0
            mov  x1, MAX_LINUXCPUS/8
            add  x2, x22, NumaNode.cpuMask
            mov  x3, 0
            ldr  x4, [x2, 8*0]
            orr  x3, x3, x4
            ldr  x4, [x2, 8*1]
            orr  x3, x3, x4
            cbz  x3, .DontSetAffinity
            mov  x8, sys_sched_setaffinity
            svc  0
           cbnz  w0, Failed_sys_sched_setaffinity
.DontSetAffinity:
            mov  x1, x25
            blr  x24
            add  x0, x23, ThreadHandle.mutex
            mov  x1, FUTEX_WAKE_PRIVATE
            mov  x2, 1
            str  w2, [x0]
            mov  x8, sys_futex
            svc  0
            mov  x0, 0
            mov  x8, sys_exit
            svc  0

        
Os_ThreadJoin:
    ; in: x1 address of ThreadHandle
            stp  x29, x30, [sp, -16]!
            mov  x29, x1
            add  x0, x1, ThreadHandle.mutex
            mov  x1, FUTEX_WAIT_PRIVATE
            mov  x2, 0
            mov  x3, 0
            mov  x4, 0
            mov  x5, 0
            mov  x8, sys_futex
            svc  0
            ldr  x1, [x29, ThreadHandle.stackAddress]
            mov  x2, THREAD_STACK_SIZE
             bl  Os_VirtualFree
            ldp  x29, x30, [sp], 16
            ret


Os_SetThreadPoolInfo:
           _lea  x6, threadPool
            mov  x1, 1
            str  w1, [x6, ThreadPool.nodeCnt]
            str  w1, [x6, ThreadPool.coreCnt]
            mov  w0, -1
            add  x6, x6, ThreadPool.nodeTable
            str  w0, [x6, NumaNode.nodeNumber]
            str  w1, [x6, NumaNode.coreCnt]
            str  xzr, [x6, NumaNode.cmhTable]
            str  x6, [x6, NumaNode.parent]
            str  xzr, [x6, NumaNode.cpuMask + 8*0]
            str  xzr, [x6, NumaNode.cpuMask + 8*1]
            ret


Os_DisplayThreadPoolInfo:
Os_SetPriority_Realtime:
Os_SetPriority_Normal:
Os_SetPriority_Low:
Os_SetPriority_Idle:
Os_SetStdHandles:
Os_InitializeTimer:
            ret


Os_ExitProcess:
    ; in: x1 exit code
            mov  x0, x1
            mov  x8, sys_exit_group
            svc  0


Os_GetTime:
    ; out: x0, x2 such that x0+x2/2^64 = time in ms
            stp  x29, x30, [sp, -16]!
            sub  sp, sp, 64
            mov  x0, 1
            add  x1, sp, 16
            mov  x8, 113
            svc  0
            ldr  x1, [sp, 16]
            ldr  x3, [sp, 24]
          mov48  x4, 18446744073709
            mov  x5, 1000
            mul  x2, x3, x4
          umulh  x0, x3, x4
           madd  x0, x1, x5, x0
            add  sp, sp, 64
            ldp  x29, x30, [sp], 16
            ret


Os_Sleep:
    ; in: x1 ms to sleep
            stp  x29, x30, [sp, -16]!
            sub  sp, sp, 64
            mov  x0, 1000
           udiv  x2, x1, x0
           msub  x3, x2, x0, x1
            mul  x0, x0, x0
            mul  x3, x3, x0
            str  x2, [sp, 16]
            str  x3, [sp, 24]
            add  x0, sp, 16
            mov  x1, 0            
            mov  x8, 101
            svc  0
            add  sp, sp, 64
            ldp  x29, x30, [sp], 16
            ret


Os_VirtualAlloc_LargePages:
    ; in: x1 size
            mov  x0, 0
            mov  x2, 0
            ret


Os_VirtualAllocNuma:
Os_VirtualAlloc:
    ; in: x1 size
            stp  x29, x30, [sp, -16]!
            mov  x5, 0
            mov  x4, -1
            mov  x3, MAP_PRIVATE or MAP_ANONYMOUS
            mov  x2, 0x03
            mov  x0, 0
            mov  x8, sys_mmap
            svc  0
            tst  x0, x0
            bmi  Failed_sys_mmap_VirtualAlloc
            ldp  x29, x30, [sp], 16
            ret


Os_VirtualFree:
    ; in: x1 address
    ;     x2 size
            stp  x29, x30, [sp, -16]!
            cbz  x1, .Null
            mov  x0, x1
            mov  x1, x2
            mov  x8, sys_munmap
            svc  0
            cmp  w0, 0
            bne  Failed_sys_unmap_VirtualFree
.Null:
            ldp  x29, x30, [sp], 16
            ret


_Os_WriteOut_Output:
           _lea  x1, Output
_Os_WriteOut:
    ; in: x1 address of string start
    ;     x27 address of string end
            stp  x29, x30, [sp, -16]!
            sub  x2, x27, x1
            mov  x0, 1
            mov  x8, 64
            svc  0
            ldp  x29, x30, [sp], 16
            ret

_Os_WriteError:
    ; in: x1 address of string start
    ;     x27 address of string end
            stp  x29, x30, [sp, -16]!
            sub  x2, x27, x1
            mov  x0, 2
            mov  x8, 64
            svc  0
            ldp  x29, x30, [sp], 16
            ret

Os_ReadStdIn:
    ; in: x1 address of buffer
    ;     x2 max bytes to read
            stp  x29, x30, [sp, -16]!
            mov  x0, 0
            mov  x8, 63
            svc  0
            ldp  x29, x30, [sp], 16
            ret


Os_ParseCommandLine:
    ; initializes ioBuffer struct  
            stp  x20, x21, [sp, -16]!
            stp  x22, x23, [sp, -16]!
            stp  x24, x25, [sp, -16]!
            stp  x26, x27, [sp, -16]!
            stp  x29, x30, [sp, -16]!
           _lea  x29, ioBuffer
           _lea  x6, spEntry
            ldr  x20, [x6]
            str  xzr, [x29, IOBuffer.cmdLineStart]
            mov  w21, 0
            mov  w27, 0
.NextArg1:
            add  w21, w21, 1
            ldr  w4, [x20]
            cmp  w21, w4
            bhs  .ArgDone1
            add  x4, x21, 1
            ldr  x1, [x20, x4, lsl 3]
             bl  StringLength
            add  w27, w27, w0
              b  .NextArg1
.ArgDone1:
            add  w1, w27, 4096
            add  w1, w1, 1
            and  w1, w1, -4096
            str  x1, [x29, IOBuffer.inputBufferSizeB]
             bl  Os_VirtualAlloc
            str  x0, [x29, IOBuffer.inputBuffer]
            cbz  w27, .Done
            ldr  x27, [x29, IOBuffer.inputBuffer]
            str  x27, [x29, IOBuffer.cmdLineStart]
            mov  w21, 0
.NextArg2:
            add  w21, w21, 1
            ldr  w4, [x20]
            cmp  w21, w4
            bhs  .ArgDone2
            add  x1, x21, 1
            ldr  x26, [x20, x1, lsl 3]
            mov  w2, 10
.CopyString:
           ldrb  w0, [x26], 1
            cbz  w0, .CopyDone
            cmp  w0, SEP_CHAR
           csel  w0, w2, w0, eq
           strb  w0, [x27], 1
              b  .CopyString
.CopyDone:
            mov  w0, ' '
           strb  w0, [x27], 1
              b  .NextArg2
.ArgDone2:
           strb  wzr, [x27]
.Done:
            ldp  x29, x30, [sp], 16
            ldp  x26, x27, [sp], 16
            ldp  x24, x25, [sp], 16
            ldp  x22, x23, [sp], 16
            ldp  x20, x21, [sp], 16
            ret


Failed_sys_mmap:
        lstring  x27, Failed, "sys_mmap failed"
Failed_sys_fstat:
        lstring  x27, Failed, "sys_fstat failed"
Failed_sys_futex_EventSignal:
           _lea  x27, sz_error_sys_futex_EventSignal
              b  Failed
Failed_EventWait:
           _lea  x27, sz_error_EventWait
              b  Failed
Failed_sys_futex_MutexUnlock:
           _lea  x27, sz_error_sys_futex_MutexUnlock
              b  Failed
Failed_sys_clone:
           _lea  x27, sz_error_sys_clone
              b  Failed
Failed_sys_sched_setaffinity:
           _lea  x27, sz_error_sys_sched_setaffinity
              b  Failed
Failed_sys_mmap_VirtualAlloc:
           _lea  x27, sz_error_sys_mmap_VirtualAlloc
              b  Failed
Failed_sys_unmap_VirtualFree:
           _lea  x27, sz_error_sys_unmap_VirtualFree
              b  Failed
Failed:
    ; x27 address of null terminated string
            mov  x29, x0
            mov  x1, x27
           _lea  x27, Output
             bl  PrintString

           _lea  x1, sz_failed_x0
             bl  PrintString
            mov  x0, x29
             bl  PrintHex
            mov  w0, ' '
           strb  w0, [x27], 1
            mov  w0, '('
           strb  w0, [x27], 1
            mov  x0, x29
             bl  PrintInt32
            mov  w0, ')'
           strb  w0, [x27], 1
        PrintNL
           _lea  x27, Output
             bl  Os_ErrorBox
            mov  x0, 1
             bl  Os_ExitProcess


Os_ErrorBox:
    ; x27 address of null terminated string
            stp  x29, x30, [sp, -16]!
            mov  x1, x27
             bl  StringLength
            mov  x2, x0
            mov  x1, x27
            mov  x0, 1
            mov  x8, 64
            svc  0
            ldp  x29, x30, [sp], 16
            ret     


Os_CheckCPU:
            stp  x27, x30, [sp, -16]!
            mov  x0, 0
    ; make sure that rook attacks are page aligned
           _lea  x27, sz_error_rook_page
            add  x0, x0, :lo12:RookAttacksPEXT
           cbnz  x0, Failed
    ; make sure that bishop attacks are page aligned        
           _lea  x27, sz_error_bishop_page
            add  x0, x0, :lo12:BishopAttacksPEXT
           cbnz  x0, Failed
            ldp  x27, x30, [sp], 16
            ret
