
PrintScore_Uci:
                mov  w2, + VALUE_MATE + 1
                mov  w4, + VALUE_MATE - MAX_PLY
                cmp  w1, w4
                bge  .pMate
                mov  w2, - VALUE_MATE
                mov  w4, - VALUE_MATE + MAX_PLY
                cmp  w1, w4
                ble  .nMate

                mov  w0, 'c'
               strb  w0, [x27], 1
                mov  w0, 'p'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1 

                mov  w0, w1
                mov  w1, 100
                mul  w0, w0, w1
                mov  w1, PawnValueEg

.divideNPrint:
               sdiv  w0, w0, w1
               sxtw  x0, w0
                  b  PrintSInt
.pMate:
.nMate:
                mov  w0, 'm'
               strb  w0, [x27], 1
                mov  w0, 'a'
               strb  w0, [x27], 1
                mov  w0, 't'
               strb  w0, [x27], 1
                mov  w0, 'e'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
                sub  w0, w2, w1
                mov  w1, 2
                  b  .divideNPrint


StringLength:
        ; in:  x1 address of null terminated string
        ; out: x0 length
                mov  x0, -1
.Next:
                add  x0, x0, 1
               ldrb  w2, [x1, x0]
               cbnz  w2, .Next
                ret


PrintString.Next:
               strb  w0, [x27], 1
PrintString:
        ; in: x1 address of source string
        ; io: x27 string
               ldrb  w0, [x1], 1
               cbnz  w0, PrintString.Next
                ret


PrintFancy:
        ; in: x1 address of source string
        ;     x2 address of dword array
        ;     x3 address of qword array, could be null
        ; io: x27 string with ie %x3 replaced by x1[3] ect
                stp  x29, x30, [sp, -16]!
                stp  x28, x26, [sp, -16]!
                stp  x24, x25, [sp, -16]!
                stp  x22, x23, [sp, -16]!
                mov  x26, x1
                mov  x28, x2
                mov  x29, x3
                mov  x23, x27
PrintFancy.Loop:
               ldrb  w0, [x26], 1
                cmp  w0, '%'
                beq  PrintFancy.GotOne
                cbz  w0, PrintFancy.Done
               strb  w0, [x27], 1
                cmp  w0, 10
               csel  x23, x27, x23, eq
                  b  PrintFancy.Loop
PrintFancy.Done:
                ldp  x22, x23, [sp], 16
                ldp  x24, x25, [sp], 16
                ldp  x28, x26, [sp], 16
                ldp  x29, x30, [sp], 16
                ret
PrintFancy.GotOne:
               ldrb  w24, [x26], 1
                cmp  w24, 'a'
                beq  PrintFancy.Alignment
                cmp  w24, 'p'
                beq  PrintFancy.Position
                cmp  w24, 'n'
                beq  PrintFancy.NewLine

                 bl  ParseInteger
                and  x0, x0, 31
                cbz  x29, @1f
                add  x1, x29, x0, lsl 4
                ld1  {v0.16b}, [x1]
        @1:
                ldr  x0, [x28, x0, lsl 3]
                mov  x1, x0
                mov  x2, 0
                mov  x3, 0

                cmp  w24, 'x'   ; 32 bit signed integer
                adr  x4, PrintHex32
               csel  x3, x4, x3, eq
                cmp  w24, 'X'   ; 32 bit signed integer
                adr  x4, PrintHex
               csel  x3, x4, x3, eq

                cmp  w24, 's' ; 16|16 score
                adr  x4, PrintFancy.PrintScore
               csel  x3, x4, x3, eq

                cmp  w24, 'i'   ; 32 bit signed integer
                adr  x4, PrintInt32
               csel  x3, x4, x3, eq
                cmp  w24, 'I'   ; 64 bit signed integer
                adr  x4, PrintInt
               csel  x3, x4, x3, eq

                cmp  w24, 'u'   ; 32 bit unsigned integer
                adr  x4, PrintUInt32
               csel  x3, x4, x3, eq
                cmp  w24, 'U'   ; 64 bit unsigned integer
                adr  x4, PrintUInt
               csel  x3, x4, x3, eq

                cmp  w24, 'm'   ; move
                adr  x4, PrintUciMove
               csel  x3, x4, x3, eq


                cmp  w24, 'd'
                adr  x4, PrintDouble
               csel  x3, x4, x3, eq
                cmp  w24, 'D'
                adr  x4, PrintDoubleVec
               csel  x3, x4, x3, eq

                cmp  w24, 'V'
                adr  x4, PrintHexVec
               csel  x3, x4, x3, eq

                cbz  x3, PrintFancy.Loop
                blr  x3
                  b  PrintFancy.Loop

PrintFancy.NewLine:
       PrintNewLine
                mov  x23, x27
                  b  PrintFancy.Loop

PrintFancy.Position:
                str  x21, [x20, Pos.state]
                 bl  Position_PrintFen
                  b  PrintFancy.Loop

PrintFancy.Alignment:
                 bl  ParseInteger
                add  x0, x0, x23
        @1:
                cmp  x27, x0
                bhs  PrintFancy.Loop
                mov  w4, ' '
               strb  w4, [x27], 1
                  b  @1b

PrintFancy.PrintScore:
                stp  x0, x30, [sp, -16]!
                add  x0, x0, 0x08000
               sbfx  x0, x0, 16, 16
                 bl  PrintInt
                mov  w0, ','
               strb  w0, [x27], 1
                ldp  x0, x30, [sp], 16
               sbfx  x0, x0, 0, 16
                  b  PrintInt

CmpString:
        ; if beginning of string at x26 matches null terminated string at x1
        ; then advance x26 to end of match and return x0 = -1
        ; else return x0 = 0 and do nothing
                mov  x3, x26
CmpString.Next:
               ldrb  w0, [x1], 1
                cbz  w0, CmpString.Found
               ldrb  w2, [x3], 1
                cmp  w0, w2
                beq  CmpString.Next
CmpString.NoMatch:
                mov  x0, 0
                ret
CmpString.Found:
                mov  x26, x3
                mov  x0, -1
                ret


CmpStringCaseless:
        ; if beginning of string at x26 matches null terminated string at x1
        ; then advance x26 to end of match and return x0 = -1
        ; else return x0 = 0 and do nothing
                mov  x3, x26
CmpStringCaseless.Next:
               ldrb  w0, [x1], 1
                cbz  w0, CmpStringCaseless.Found
               ldrb  w2, [x3], 1
                ToLower w2
                cmp  w0, w2
                beq  CmpStringCaseless.Next
CmpStringCaseless.NoMatch:
                mov  x0, 0
                ret
CmpStringCaseless.Found:
                mov  x26, x3
                mov  x0, -1
                ret


SkipSpaces.Next:
                add  x26, x26, 1
SkipSpaces:
        ; io: x26
               ldrb  w0, [x26]
                cmp  w0, ' '
                beq  SkipSpaces.Next
                ret


ParseToken.Next:
                add  x26, x26, 1
               strb  w0, [x27], 1
ParseToken:
        ; write at most x1 characters of string at x26 to x27
               ldrb  w0, [x26]
               subs  x1, x1, 1
                blo  ParseToken.Done
                cmp  w0, '/'
                blo  ParseToken.Done
                cmp  w0, ':'
                blo  ParseToken.Next
                cmp  w0, 'A'
                blo  ParseToken.Done
                cmp  w0, '['
                blo  ParseToken.Next
                cmp  w0, '\'
                beq  ParseToken.Next
                cmp  w0, 'a'
                blo  ParseToken.Done
                cmp  w0, 128
                blo  ParseToken.Next
ParseToken.Done:
                ret
        


PrintUciMove:
                stp   x29, x30, [sp, -16]!
                 bl  _PrintUciMove
                str  x0, [x27]
                add  x27, x27, x2
                ldp  x29, x30, [sp], 16
                ret

_PrintUciMove:
               ubfx  w8, w1, 6, 6
                and  w9, w1, 63
                mov  w0, 'N' + ('O' shl 8)
               movk  w0, 'N' + ('E' shl 8), lsl 16
                cbz  w1, _PrintUciMove.Return
                mov  w0, 'N' + ('U' shl 8)
               movk  w0, 'L' + ('L' shl 8), lsl 16
                tst  w1, w1
                bmi  _PrintUciMove.Return
                cmp  w9, w8
               cset  w0, hi
                and  w10, w9, 56
                add  w10, w10, w0, lsl 2
                add  w10, w10, FILE_C
                lsr  w1, w1, 12
                ldr  w2, [x20, Pos.chess960]
                cmp  w1, MOVE_TYPE_CASTLE
               ccmp  w2, 0, 0, eq
               csel  w9, w10, w9, eq
                
                mov  w0, 'a' + ('1'shl 8)
                and  w2, w9, 56
                add  w0, w0, w2, lsl 5
                and  w9, w9, 7
                add  w0, w0, w9
                
                mov  w3, 'a' + ('1' shl 8)
                and  w2, w8, 56
                add  w3, w3, w2, lsl 5
                and  w8, w8, 7
                add  w3, w3, w8

                add  w0, w3, w0, lsl 16
                sub  w1, w1, MOVE_TYPE_PROM
                cmp  w1, 4
                blo  _PrintUciMove.Promotion

_PrintUciMove.Return:
                mov  w2, 4
                ret
_PrintUciMove.Promotion:
                adr  x3, _PrintUciMove.lookup
               ldrb  w3, [x3, x1]
                add  x0, x0, x3, lsl 32
                mov  w2, 5
                ret

_PrintUciMove.lookup:
        db 'nbrq'


ParseUciMove:

ParseUciMove.moveList = 0
ParseUciMove.localsize = sizeof.ExtMove*MAX_MOVES
ParseUciMove.localsize = (ParseUciMove.localsize+15) and -16

                stp  x21, x30, [sp, -16]!
                stp  x26, x27, [sp, -16]!
                sub  sp, sp, ParseUciMove.localsize

                add  x27, sp, ParseUciMove.moveList
                ldr  x21, [x20, Pos.state]
                 bl  SetCheckInfo
                 bl  Gen_Legal

                str  xzr, [x27]
                ldr  w21, [x26], 4
               ldrb  w0, [x26]
            ToLower  w0
                cmp  w0, ' '
               cinc  x26, x26, hi
               csel  w0, w0, wzr, hi
                add  x21, x21, x0, lsl 32

                add  x27, sp, ParseUciMove.moveList - sizeof.ExtMove
ParseUciMove.CheckNext:

                add  x27, x27, sizeof.ExtMove
                ldr  w1, [x27, ExtMove.move]
                cbz  w1, ParseUciMove.Failed
                 bl  _PrintUciMove
                cmp  x0, x21
                bne  ParseUciMove.CheckNext
                ldr  w0, [x27, ExtMove.move]
                add  sp, sp, ParseUciMove.localsize
                ldp  x2, x27, [sp], 16
                ldp  x21, x30, [sp], 16
                ret
ParseUciMove.Failed:
                mov  w0, 0
                add  sp, sp, ParseUciMove.localsize
                ldp  x26, x27, [sp], 16
                ldp  x21, x30, [sp], 16
                ret


PrintSquare:
                mov  w0, '-'
                cmp  x1, 64
                bhs  PrintSquare.none
                and  x0, x1, 7
                add  x0, x0, 'a'
               strb  w0, [x27], 1
                lsr  x0, x1, 3
                add  x0, x0, '1'
PrintSquare.none:
               strb  w0, [x27], 1
                ret        

ParseSquare:
                mov  x2, x26
               ldrb  w0, [x26], 1
                cmp  x0, '-'
                beq  ParseSquare.none
               subs  x1, x0, 'a'
                bmi  ParseSquare.error
                cmp  x1, 8
                bhs  ParseSquare.error
               ldrb  w0, [x26], 1
               subs  x0, x0, '1'
                bmi  ParseSquare.error
                cmp  x0, 8
                bhs  ParseSquare.error
                add  x0, x1, x0, lsl 3
                ret
ParseSquare.none:
                mov  x0, 64
                ret
ParseSquare.error:
                mov  x26, x2
                mov  x0, 65
                ret

PrintHex32:
                lsl  x0, x0, 32
                mov  w4, 8
                  b  PrintHex.Next
PrintHex:
        ; in: x0
        ; io: x27 string
                mov  w4, 16                
PrintHex.Next:
                ror  x0, x0, 64-4
                and  x1, x0, 15
                cmp  w1, 10
                add  w2, w1, '0'
                add  w3, w1, 'a'-10
               csel  w1, w2, w3, lo
               strb  w1, [x27], 1                
                sub  w4, w4, 1
               cbnz  w4, PrintHex.Next
                ret


PrintHexVec:
        ; in: v0 double
        ; io: x27 string
                stp  x29, x30, [sp, -16]!
                sub  sp, sp, 16
                st1  {v0.16b}, [sp]
                ldr  x0, [sp, 0]
                 bl  PrintHex
                mov  w0, '_'
               strb  w0, [x27], 1
                ldr  x0, [sp, 8]
                 bl  PrintHex
                add  sp, sp, 16       
                ldp  x29, x30, [sp], 16
                ret


PrintDoubleVec:
        ; in: v0 double
        ; io: x27 string
                stp  x29, x30, [sp, -16]!
                sub  sp, sp, 16
                st1  {v0.16b}, [sp]
                mov  w0, '('
               strb  w0, [x27], 1
                ldr  d0, [sp, 0]
                 bl  PrintDouble
                mov  w0, ','
               strb  w0, [x27], 1
                ldr  d0, [sp, 8]
                 bl  PrintDouble
                mov  w0, ')'
               strb  w0, [x27], 1
                add  sp, sp, 16       
                ldp  x29, x30, [sp], 16
                ret


PrintDouble:
        ; in: d0 double
        ; io: x27 string
                stp  x29, x30, [sp, -16]!
                mov  x1, 1000
              scvtf  d1, x1
               fmul  d0, d0, d1
             fcvtzs  x2, d0
                tst  x2, x2
                mov  w4, '-'
               strb  w4, [x27]
               cinc  x27, x27, lt
               cneg  x2, x2, lt
               sdiv  x0, x2, x1
               msub  x29, x0, x1, x2
                 bl  PrintUInt
                mov  w4, '.'
               strb  w4, [x27], 1
                mov  x2, 100
               udiv  x4, x29, x2
               msub  x3, x4, x2, x29
                mov  x0, 10
                add  w4, w4, '0'
               strb  w4, [x27], 1
               udiv  x2, x3, x0
                add  w4, w2, '0'
               strb  w4, [x27], 1
               msub  x2, x2, x0, x3
                add  w2, w2, '0'
               strb  w2, [x27], 1
                ldp  x29, x30, [sp], 16
                ret

PrintUInt32:
           uxtw  x0, w0
              b  PrintUInt
PrintInt32:
           sxtw  x0, w0
PrintInt:
PrintSInt:
    ; in: x0 signed integer
    ; io: x27 string
            tst  x0, x0
            mov  w1, '-'
           strb  w1, [x27]
           cinc  x27, x27, lt
           cneg  x0, x0, lt

PrintUInt:
    ; in: x0 unsigned integer
    ; io: x27 string
            sub  sp, sp, 64
            mov  x3, 0
            mov  x2, 10
.PushLoop:
           udiv  x1, x0, x2
           msub  x0, x1, x2, x0
           strb  w0, [sp, x3]
            add  x3, x3, 1
            mov  x0, x1
           cbnz  x1, .PushLoop
.PopLoop:
           subs  x3, x3, 1
           ldrb  w0, [sp, x3]
            add  w0, w0, '0'
           strb  w0, [x27], 1
            bhi  .PopLoop
            add  sp, sp, 64
            ret


ParseInteger:
    ; io: x26 string
    ; out: x0
           ldrb  w1, [x26]
            mov  x2, 0
            mov  x0, 0
            cmp  w1, '-'
            beq  .Neg
            cmp  w1, '+'
            beq  .Pos
              b  .Loop
.Neg:
            mvn  x2, x2
.Pos:
            add  x26, x26, 1
.Loop:     
           ldrb  w1, [x26]
           subs  x1, x1, '0'
            blo  .Done
            cmp  x1, 9
            bhi  .Done
            add  x26, x26, 1
            add  x0, x0, x0, lsl 2
            add  x0, x1, x0, lsl 1
              b  .Loop
.Done:      
            eor  x0, x0, x2
            sub  x0, x0, x2
            ret


ParseBoole:
            stp  x29, x30, [sp, -16]!
           _lea  x1, sz_true
             bl  CmpString
            cmp  w0, 0
            mov  x0, -1
            bne  .Done
           _lea  x1, sz_false
             bl  CmpString
            mov  x0, 0
.Done:
            ldp  x29, x30, [sp], 16
            ret


ReadLine:
    ; out: x0 = 0 if success, = -1 if failed
    ;      x1  address of string end (including new line char(s))
    ;      x26 address of string
            stp  x29, x30, [sp,-16]!
            stp  x25, x28, [sp,-16]!
            stp  x23, x24, [sp,-16]!
            stp  x21, x22, [sp,-16]!
           _lea  x29, ioBuffer
            ldr  w22, [x29, IOBuffer.tmp_i]
            ldr  w23, [x29, IOBuffer.tmp_j]
            ldr  x24, [x29, IOBuffer.inputBufferSizeB]
            ldr  x25, [x29, IOBuffer.inputBuffer]
            mov  x28, 0
.NextChar:
            cmp  x28, x24
            bhs  .Realloc
.ReallocRet:
            cmp  x22, x23
            bhs  .GetMore
.GetMoreRet:
            add  x0, x29, IOBuffer.tmpBuffer
           ldrb  w0, [x0, x22]
            add  x22, x22, 1
           strb  w0, [x25, x28]
            add  x28, x28, 1
            cmp  w0, ' '
            bhs  .NextChar
            mov  w0, 10
            sub  x4, x28, 1
           strb  w0, [x25, x4]  ; make sure NL char is stored at end
            mov  x0, 0
.Done:
            str  w22, [x29, IOBuffer.tmp_i]
            str  w23, [x29, IOBuffer.tmp_j]
            str  x24, [x29, IOBuffer.inputBufferSizeB]
            str  x25, [x29, IOBuffer.inputBuffer]
            
            ldr  x2, [x29, IOBuffer.log]
            tbz  x2, 63, .logger
.loggerRet:
            mov  x26, x25
            add  x1, x25, x28
            ldp  x21, x22, [sp], 16
            ldp  x23, x24, [sp], 16
            ldp  x25, x28, [sp], 16
            ldp  x29, x30, [sp], 16
            ret
.GetMore:
            mov  x22, 0
            add  x1, x29, IOBuffer.tmpBuffer
            mov  x2, sizeof.IOBuffer.tmpBuffer
             bl  Os_ReadStdIn
            mov  x23, x0
            cmp  x0, 1
            bge  .GetMoreRet
.Failed:
            mov  x0, -1
            mov  x23, 0
              b  .Done
.Realloc:           
            add  x0, x24, 4096
             bl  Os_VirtualAlloc
            mov  x23, x0
            mov  x1, x25
            mov  x2, x24
             bl  MemoryCopy
            mov  x0, x25
            mov  x1, x24
             bl  Os_VirtualFree
            mov  x25, x23
            add  x24, x24, 4096
              b  .ReallocRet
.logger:
            stp  x0, x27, [sp, -16]!
            sub  sp, sp, 64            
             bl  Os_GetTime
            mov  x27, sp
            mov  w4, '<<'
           strh  w4, [x27], 2
             bl  PrintUInt
            mov  w4, ': '
           strh  w4, [x27], 2
            ldr  x1, [x29, IOBuffer.log]
            mov  x2, sp
            sub  x8, x27, x2
             bl  Os_FileWrite
            add  sp, sp, 64
            ldr  x1, [x29, IOBuffer.log]
            mov  x2, x25
            mov  x8, x28
             bl  Os_FileWrite
            ldp  x0, x27, [sp], 16
              b  .loggerRet
            

WriteLine_Output:
           _lea  x1, Output
WriteLine:
    ; in: x1  address of string start
    ;     x27 address of string end (supposed to include new line char(s))
           _lea  x6, ioBuffer
            ldr  x2, [x6, IOBuffer.log]
            tbz  x2, 63, .logger
              b  _Os_WriteOut
.logger:
            stp  x29, x30, [sp, -16]!
            stp  x1, x27, [sp, -16]!
            sub  sp, sp, 64
            mov  x29, x2
             bl  Os_GetTime
            mov  x27, sp
            mov  w4, '>>'
           strh  w4, [x27], 2
             bl  PrintUInt
            mov  w4, ': '
           strh  w4, [x27], 2
            mov  x1, x29
            mov  x2, sp
            sub  x8, x27, x2
             bl  Os_FileWrite
            add  sp, sp, 64
            ldp  x2, x8, [sp]
            mov  x1, x29
            sub  x8, x8, x2
             bl  Os_FileWrite
            ldp  x1, x27, [sp], 16
            ldp  x29, x30, [sp], 16
              b  _Os_WriteOut
            
Log_Init:
    ; in: x1 address of file string
    ;        0 for no string
            stp  x29, x30, [sp, -16]!
            stp  x26, x28, [sp, -16]!
           _lea  x28, ioBuffer
            mov  x26, x1
            ldr  x1, [x28, IOBuffer.log]
           tbnz  x1, 63, .no_close
             bl  Os_FileClose
.no_close:
            mov  x0, -1
            mov  x1, x26
            cbz  x26, .no_new
             bl  Os_FileOpenWrite
.no_new:
            str  x0, [x28, IOBuffer.log]
            ldp  x26, x28, [sp], 16
            ldp  x29, x30, [sp], 16
            ret


MemoryCopy.Next:
           ldrb  w3, [x1], 1
           strb  w3, [x0], 1
MemoryCopy:
    ; copy x2 bytes from x1 to x0
    ; advance x0 to the end of the block
    ; preserve every reg except x0, x1, x2, x3
           subs  x2, x2, 1        
            bpl  MemoryCopy.Next
            ret


MemoryFill.Next:
           strb  w1, [x0], 1
MemoryFill:
    ; fill x2 bytes from the lower byte in x1 to x0
    ; advance x0 to the end of the block
    ; preserve every reg except x0, x1, x2
           subs  x2, x2, 1        
            bpl  MemoryFill.Next
            ret



RepMovsb.Next:
           ldrb  w4, [x16], 1
           strb  w4, [x17], 1
RepMovsb:
    ; in: x16 source
    ;     x17 destination
    ;     x1 number of 1 byte chunks to move
           subs  x1, x1, 1
            bpl  RepMovsb.Next
            ret

RepMovsd.Next:
            ldr  w4, [x16], 4
            str  w4, [x17], 4
RepMovsd:
    ; in: x16 source
    ;     x17 destination
    ;     x1 number of 4 byte chunks to move
           subs  x1, x1, 1
            bpl  RepMovsd.Next
            ret

RepMovsq.Next:
            ldr  x4, [x16], 8
            str  x4, [x17], 8
RepMovsq:
    ; in: x16 source
    ;     x17 destination
    ;     x1 number of 8 byte chunks to move
           subs  x1, x1, 1
            bpl  RepMovsq.Next
            ret


RepStosb.Next:
           strb  w0, [x17], 1
RepStosb:
    ; in: w0 1 byte to store
    ;     x17 destination
    ;     x1 number of 1 byte chunks to move
           subs  x1, x1, 1
            bpl  RepStosb.Next
            ret


RepStosd.Next:
            str  w0, [x17], 4
RepStosd:
    ; in: w0 4 bytes to store
    ;     x17 destination
    ;     x1 number of 4 byte chunks to move
           subs  x1, x1, 1
            bpl  RepStosd.Next
            ret

RepStosq.Next:
            str  x0, [x17], 8
RepStosq:
    ; in: x0 8 bytes to store
    ;     x17 destination
    ;     x1 number of 8 byte chunks to move
           subs  x1, x1, 1
            bpl  RepStosq.Next
            ret
