
RootMovesVec_Create:
	; in: rcx address of RootMovesVec struct
	;     edx numa node
            stp  x21, x30, [sp, -16]!
            mov  x21, x1
          mov32  w1, sizeof.RootMove*MAX_MOVES
             bl  Os_VirtualAllocNuma
            str  x0, [x21, RootMovesVec.table]
            str  x0, [x21, RootMovesVec.ender]  
            ldp  x21, x30, [sp], 16
            ret

RootMovesVec_Destroy:
            stp  x29, x30, [sp, -16]!
            mov  x29, x1
            ldr  x1, [x21, RootMovesVec.table]
          mov32  w2, sizeof.RootMove*MAX_MOVES
             bl  Os_VirtualFree
            str  xzr, [x21, RootMovesVec.table]
            str  xzr, [x21, RootMovesVec.ender]  
            ldp  x29, x30, [sp], 16
            ret




RootMovesVec_Clear:
	; in: rcx address of RootMovesVec struct
            ldr  x0, [x1, RootMovesVec.table]
            str  x0, [x1, RootMovesVec.ender]
            ret

RootMovesVec_Empty:
	; in: rcx address of RootMovesVec struct
	; out: eax=0 if empty
	;      eax=-1 if not
            ldr  x0, [x1, RootMovesVec.table]
            ldr  x1, [x1, RootMovesVec.ender]
            sub  x0, x0, x1
            ret

RootMovesVec_Size:
	; in: rcx address of RootMovesVec struct
	; out: eax size
            ldr  x0, [x1, RootMovesVec.ender]
            ldr  x1, [x1, RootMovesVec.table]
            sub  x0, x0, x1
            mov  x1, sizeof.RootMove
           udiv  x0, x0, x1
            ret

RootMovesVec_PushBackMove:
            ldr  x0, [x1, RootMovesVec.ender]
            mov  w4, -VALUE_INFINITE
            str  w4, [x0, RootMove.score]
            str  w4, [x0, RootMove.prevScore]
            mov  x4, 1
            str  w4, [x0, RootMove.pvSize]
            str  wzr, [x0, RootMove.selDepth]
            str  w2, [x0, RootMove.pv]
            add  x0, x0, sizeof.RootMove
            str  x0, [x1, RootMovesVec.ender]
            ret

RootMovesVec_Copy:
	; in: rcx address of destination RootMovesVec struct
	;     rdx address of source      RootMovesVec struct
            mov  x8, x1
            ldr  x0, [x1, RootMovesVec.table]
            mov  x1, x2
            ldr  x3, [x2, RootMovesVec.table]
            ldr  x4, [x2, RootMovesVec.ender]
            sub  x2, x4, x3
             bl  MemoryCopy
            str  x0, [x8, RootMovesVec.ender]
            ret

RootMovesVec_StableSort:
    ; in: x1 start RootMove
    ;     x2 end RootMove
            stp  x29, x30, [sp, -16]!
            sub  sp, sp, (sizeof.RootMove + 15) and -16
            mov  x14, x1
            mov  x15, x2
            mov  x13, x14
.l1:
            add  x13, x13, sizeof.RootMove
            cmp  x13, x15
            bhs  .l1d
            mov  x17, sp
            mov  x16, x13
            mov  w1, sizeof.RootMove/4
             bl  RepMovsd
            mov  x12, x13
.l2:
            cmp  x12, x14
            bls  .l2d
            add  x6, x12, -1*sizeof.RootMove
            ldr  w0, [x6, RootMove.score]
            ldr  w4, [sp, RootMove.score]
            cmp  w0, w4
            bgt  .l2d
            blt  .less
            add  x6, x12, -1*sizeof.RootMove
            ldr  w0, [x6, RootMove.prevScore]
            ldr  w4, [sp, RootMove.prevScore]
            cmp  w0, w4
            bge  .l2d
.less:
            mov  x17, x12
            sub  x12, x12, sizeof.RootMove
            mov  x16, x12
            mov  w1, sizeof.RootMove/4
             bl  RepMovsd
              b  .l2
.l2d:
            mov  x17, x12
            mov  x16, sp
            mov  w1, sizeof.RootMove/4
             bl  RepMovsd
              b  .l1
.l1d:
            add  sp, sp, (sizeof.RootMove + 15) and -16
            ldp  x29, x30, [sp], 16
            ret


