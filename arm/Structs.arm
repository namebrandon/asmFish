; hacky structs defs

sizeof.rb = 1
sizeof.rw = 2
sizeof.rd = 4
sizeof.rq = 8

MainHash.___ = 0
MainHash.table = 0 + MainHash.___
MainHash.mask = 1*sizeof.rq + MainHash.table
MainHash.lpSize = 1*sizeof.rq + MainHash.mask
MainHash.sizeMB = 1*sizeof.rq + MainHash.lpSize
MainHash.date = 1*sizeof.rd + MainHash.sizeMB
sizeof.MainHash = 1*sizeof.rb + 3*sizeof.rb + MainHash.date

MainHashEntry.___ = 0
MainHashEntry.genBound = 0 + MainHashEntry.___
MainHashEntry.depth = 1*sizeof.rb + MainHashEntry.genBound
MainHashEntry.move = 1*sizeof.rb + MainHashEntry.depth
MainHashEntry.eval_ = 1*sizeof.rw + MainHashEntry.move
MainHashEntry.value_ = 1*sizeof.rw + MainHashEntry.eval_
sizeof.MainHashEntry = 1*sizeof.rw + MainHashEntry.value_

MaterialEntry.___ = 0
MaterialEntry.key = 0 + MaterialEntry.___
MaterialEntry.scalingFunction = 1*sizeof.rq + MaterialEntry.key
MaterialEntry.evaluationFunction = 2*sizeof.rb + MaterialEntry.scalingFunction
MaterialEntry.gamePhase = 1*sizeof.rb + MaterialEntry.evaluationFunction
MaterialEntry.factor = 1*sizeof.rb + MaterialEntry.gamePhase
MaterialEntry.value = 2*sizeof.rb + MaterialEntry.factor
sizeof.MaterialEntry = 1*sizeof.rw + MaterialEntry.value

PawnEntry.___ = 0
PawnEntry.passedPawns = 0 + PawnEntry.___
PawnEntry.pawnAttacks = 2*sizeof.rq + PawnEntry.passedPawns
PawnEntry.pawnAttacksSpan = 2*sizeof.rq + PawnEntry.pawnAttacks
PawnEntry.key = 2*sizeof.rq + PawnEntry.pawnAttacksSpan
PawnEntry.kingSafety = 1*sizeof.rq + PawnEntry.key
PawnEntry.score = 2*sizeof.rd + PawnEntry.kingSafety
PawnEntry.kingSquares = 1*sizeof.rd + PawnEntry.score
PawnEntry.semiopenFiles = 2*sizeof.rb + PawnEntry.kingSquares
PawnEntry.pawnsOnSquares = 2*sizeof.rb + PawnEntry.semiopenFiles
PawnEntry.asymmetry = 4*sizeof.rb + PawnEntry.pawnsOnSquares
PawnEntry.openFiles = 1*sizeof.rb + PawnEntry.asymmetry
PawnEntry.castlingRights = 1*sizeof.rb + PawnEntry.openFiles
PawnEntry.weakUnopposed  = 1*sizeof.rb + PawnEntry.castlingRights
sizeof.PawnEntry = 1*sizeof.rb + PawnEntry.weakUnopposed

HistoryStats.___ = 0
sizeof.HistoryStats = 0 + 2*64*64*sizeof.rd + HistoryStats.___

MoveStats.___ = 0
sizeof.MoveStats = 0 + 16*64*sizeof.rd + MoveStats.___

CounterMoveHistoryStats.___ = 0
sizeof.CounterMoveHistoryStats = 0 + 16*64*16*64*sizeof.rd + CounterMoveHistoryStats.___

EvalInfo.___ = 0
EvalInfo.attackedBy = 0 + EvalInfo.___
EvalInfo.attackedBy2 = 16*sizeof.rq + EvalInfo.attackedBy
EvalInfo.pinnedPieces = 2*sizeof.rq + EvalInfo.attackedBy2
EvalInfo.mobilityArea = 2*sizeof.rq + EvalInfo.pinnedPieces
EvalInfo.kingRing = 2*sizeof.rq + EvalInfo.mobilityArea
EvalInfo.kingAttackersCount = 2*sizeof.rq + EvalInfo.kingRing
EvalInfo.kingAttackersWeight = 2*sizeof.rd + EvalInfo.kingAttackersCount
EvalInfo.kingAdjacentZoneAttacksCount = 2*sizeof.rd + EvalInfo.kingAttackersWeight
EvalInfo.ksq = 2*sizeof.rd + EvalInfo.kingAdjacentZoneAttacksCount
EvalInfo.me = 2*sizeof.rd + EvalInfo.ksq
EvalInfo.pi = 1*sizeof.rq + EvalInfo.me
EvalInfo.score = 1*sizeof.rq + EvalInfo.pi
sizeof.EvalInfo = 1*sizeof.rd + 1*sizeof.rd + 2*sizeof.rd + EvalInfo.score

EndgameMapEntry.___ = 0
EndgameMapEntry.key = 0 + EndgameMapEntry.___
EndgameMapEntry.entri = 1*sizeof.rq + EndgameMapEntry.key
sizeof.EndgameMapEntry = 1*sizeof.rb + 7*sizeof.rb + EndgameMapEntry.entri

ExtMove.___ = 0
ExtMove.move = 0 + ExtMove.___
ExtMove.value = 1*sizeof.rd + ExtMove.move
sizeof.ExtMove = 1*sizeof.rd + ExtMove.value

RootMovesVec.___ = 0
RootMovesVec.table = 0 + RootMovesVec.___
RootMovesVec.ender = 1*sizeof.rq + RootMovesVec.table
sizeof.RootMovesVec = 1*sizeof.rq + RootMovesVec.ender

RootMove.___ = 0
RootMove.prevScore = 0 + RootMove.___
RootMove.score     = 1*sizeof.rd + RootMove.prevScore
RootMove.pvSize    = 1*sizeof.rd + RootMove.score
RootMove.selDepth  = 1*sizeof.rd + RootMove.pvSize
RootMove.pv        = 1*sizeof.rd + RootMove.selDepth
sizeof.RootMove    = MAX_PLY*sizeof.rd + RootMove.pv

Pos.___ = 0
Pos.board = 0 + Pos.___
Pos.typeBB = 64*sizeof.rb + Pos.board
Pos.pieceIdx = 8*sizeof.rq + Pos.typeBB
Pos.pieceEnd = 64*sizeof.rb + Pos.pieceIdx
Pos.pieceList = 16*sizeof.rb + Pos.pieceEnd
Pos.sideToMove = 16*16*sizeof.rb + Pos.pieceList
Pos.gamePly = 1*sizeof.rd + 1*sizeof.rd + Pos.sideToMove
Pos.chess960 = 1*sizeof.rd + Pos.gamePly
Pos._copy_size = 1*sizeof.rd + Pos.chess960
Pos.state = 0*sizeof.rb + Pos._copy_size
Pos.stateTable = 1*sizeof.rq + Pos.state
Pos.stateEnd = 1*sizeof.rq + Pos.stateTable
Pos.counterMoveHistory = 1*sizeof.rq + Pos.stateEnd
Pos.history = 1*sizeof.rq + Pos.counterMoveHistory
Pos.counterMoves = 1*sizeof.rq + Pos.history
Pos.materialTable = 1*sizeof.rq + Pos.counterMoves
Pos.pawnTable = 1*sizeof.rq + Pos.materialTable
Pos.rootMovesVec = 1*sizeof.rq + Pos.pawnTable
Pos.moveList = 1*sizeof.RootMovesVec + Pos.rootMovesVec
sizeof.Pos = 1*sizeof.rq + Pos.moveList

State.___ = 0
State.key               = 0           + State.___
State.pawnKey           = 1*sizeof.rq + State.key
State.materialKey       = 1*sizeof.rq + State.pawnKey
State.psq               = 1*sizeof.rq + State.materialKey
State.npMaterial        = 2*sizeof.rw + State.psq
State.rule50            = 2*sizeof.rw + State.npMaterial
State.pliesFromNull     = 1*sizeof.rw + State.rule50
State.epSquare          = 1*sizeof.rw + State.pliesFromNull
State.castlingRights    = 1*sizeof.rb + State.epSquare
State.capturedPiece     = 1*sizeof.rb + State.castlingRights
State.ksq               = 1*sizeof.rb + State.capturedPiece
State.checkersBB        = 1*sizeof.rb + State.ksq
State.dcCandidates      = 1*sizeof.rq + State.checkersBB
State.pinned            = 1*sizeof.rq + State.dcCandidates
State.checkSq           = 1*sizeof.rq + State.pinned
State.blockersForKing   = 8*sizeof.rq + State.checkSq
State.pinnersForKing    = 2*sizeof.rq + State.blockersForKing
State._stack_start      = 2*sizeof.rq + State.pinnersForKing
State.pv                = 0           + State._stack_start
State.counterMoves      = 1*sizeof.rq + State.pv
State.currentMove       = 1*sizeof.rq + State.counterMoves
State.excludedMove      = 1*sizeof.rd + State.currentMove
State.killers           = 1*sizeof.rd + State.excludedMove
State.moveCount         = 2*sizeof.rd + State.killers
State.staticEval        = 1*sizeof.rd + State.moveCount
State.history           = 1*sizeof.rd + State.staticEval
State.ply               = 1*sizeof.rd + State.history
State.skipEarlyPruning  = 1*sizeof.rb + State.ply
State._stack_end        = 1*sizeof.rb + 2*sizeof.rb + State.skipEarlyPruning
State._movepick_start   = 0           + State._stack_end
State.cur               = 0           + State._movepick_start
State.endMoves          = 1*sizeof.rq + State.cur
State.endBadCaptures    = 1*sizeof.rq + State.endMoves
State.stage             = 1*sizeof.rq + State.endBadCaptures
State.countermove       = 1*sizeof.rq + State.stage
State.givesCheck        = 1*sizeof.rd + State.countermove
State.ttMove            = 1*sizeof.rb + 3*sizeof.rb + State.givesCheck
State.depth             = 1*sizeof.rd + State.ttMove
State.threshold         = 1*sizeof.rd + State.depth
State.recaptureSquare   = 1*sizeof.rd + State.threshold
State.mpKillers         = 1*sizeof.rd + State.recaptureSquare
State._movepick_end     = 2*sizeof.rd + State.mpKillers
sizeof.State            = 0           + State._movepick_end

if sizeof.State and 15
 err "sizeof.State is not divisible by 16"
end if

Limits.___ = 0
Limits.nodes = 0 + Limits.___
Limits.startTime = 1*sizeof.rq + Limits.nodes
Limits.time = 1*sizeof.rq + Limits.startTime
Limits.incr = 2*sizeof.rd + Limits.time
Limits.movestogo = 2*sizeof.rd + Limits.incr
Limits.depth = 1*sizeof.rd + Limits.movestogo
Limits.movetime = 1*sizeof.rd + Limits.depth
Limits.mate = 1*sizeof.rd + Limits.movetime
Limits.multiPV = 1*sizeof.rd + Limits.mate
Limits.infinite = 1*sizeof.rd + 1*sizeof.rd + Limits.multiPV
Limits.ponder = 1*sizeof.rb + Limits.infinite
Limits.useTimeMgmt = 1*sizeof.rb + Limits.ponder
Limits.moveVecSize = 1*sizeof.rb + 1*sizeof.rb + Limits.useTimeMgmt
Limits.moveVec = 1*sizeof.rd + Limits.moveVecSize
sizeof.Limits = MAX_MOVES*sizeof.rw + Limits.moveVec

struct Options
 hash	    rd 1
 threads    rd 1
 largePages rb 1     ; bool 0 or -1
 changed    rb 1     ; have hash or threads changed?
	    rb 2
 multiPV    rd 1
 chess960	rd 1
                rd 1
                rd 1
 moveOverhead	rd 1
 contempt	  rd 1
 ponder 	  rb 1
 displayInfoMove  rb 1	    ; should we display pv info and best move?
		  rb 1
 syzygy50MoveRule rb 1	    ; bool 0 or -1
 syzygyProbeDepth rd 1
 syzygyProbeLimit rd 1
if USE_VARIETY = 1
 varietyMod   rd 1
 varietyBound rd 1
              rq 1
end if
; hashPath	rq 1
; hashPathSizeB	rq 1
; hashPathBuffer rq 14
ends



struct Weakness
 targetLoss rq 1
 prng       rq 1
            rq 1
 multiPV    rd 1
 enabled    rb 1
            rb 3
ends

EasyMoveMng.___ = 0
EasyMoveMng.expectedPosKey = 0 + EasyMoveMng.___
EasyMoveMng.pv = 1*sizeof.rq + EasyMoveMng.expectedPosKey
EasyMoveMng.stableCnt = 4*sizeof.rd + EasyMoveMng.pv
sizeof.EasyMoveMng = 1*sizeof.rd + 3*sizeof.rd + EasyMoveMng.stableCnt

Signals.___ = 0
Signals.stop = 0 + Signals.___
Signals.stopOnPonderhit = 1*sizeof.rb + Signals.stop
sizeof.Signals = 1*sizeof.rb + 14*sizeof.rb + Signals.stopOnPonderhit

Time.___ = 0
Time.startTime = 0 + Time.___
Time.optimumTime = 1*sizeof.rq + Time.startTime
Time.maximumTime = 1*sizeof.rq + Time.optimumTime
sizeof.Time = 1*sizeof.rq + 1*sizeof.rq + Time.maximumTime

ThreadHandle.___ = 0
ThreadHandle.stackAddress = 0 + ThreadHandle.___
ThreadHandle.mutex = 1*sizeof.rq + ThreadHandle.stackAddress
sizeof.ThreadHandle = 1*sizeof.rd + 1*sizeof.rd + ThreadHandle.mutex

Mutex.___ = 0
sizeof.Mutex = 0 + 1*sizeof.rd + 1*sizeof.rd + 1*sizeof.rq + Mutex.___

ConditionalVariable.___ = 0
sizeof.ConditionalVariable = 0 + 1*sizeof.rd + 1*sizeof.rd + 1*sizeof.rq + ConditionalVariable.___


struct Thread
 mutex		 rb sizeof.Mutex
 sleep1 	 rb sizeof.ConditionalVariable
 sleep2 	 rb sizeof.ConditionalVariable
 threadHandle	 rb sizeof.ThreadHandle
if USE_VARIETY = 1
 randSeed     rq 1
              rq 1
end if
 numaNode	 rq 1
 bestMoveChanges rq 1
 PVIdx		 rd 1
 previousScore	 rd 1
 completedDepth  rd 1
 callsCnt	 rd 1
 resetCnt	 rd 1
		 rd 1
 searching	  rb 1
 exit		  rb 1
 failedLow	  rb 1
 easyMovePlayed   rb 1
		  rb 1
		  rb 1
 selDepth         rb 1
		  rb 1
 nodes		rq 1
 tbHits 	rq 1
 idx		rd 1
 rootDepth	rd 1

 castling_start rb 0
 castling_rfrom      rb 4
 castling_rto	     rb 4
 castling_path	     rq 4
 castling_ksqpath    rb 4*8
 castling_knights    rq 4
 castling_kingpawns  rq 4
 castling_movgen     rd 4       ; these are the four castling moves
 castling_rightsMask rb 64
 castling_end rb 0

 rootPos	 rb sizeof.Pos
ends

if Thread.rootPos and 15
 err "Thread.rootPos is not divisible by 16"
end if





NumaNode.___ = 0
NumaNode.nodeNumber = 0 + NumaNode.___
NumaNode.coreCnt = 1*sizeof.rd + NumaNode.nodeNumber
NumaNode.cmhTable = 1*sizeof.rd + NumaNode.coreCnt
NumaNode.parent = 1*sizeof.rq + NumaNode.cmhTable
NumaNode.cpuMask = 1*sizeof.rq + 1*sizeof.rq + NumaNode.parent
sizeof.NumaNode = MAX_LINUXCPUS/64*sizeof.rq + NumaNode.cpuMask

ThreadPool.___ = 0
ThreadPool.threadCnt = 0 + ThreadPool.___
ThreadPool.nodeCnt = 1*sizeof.rd + ThreadPool.threadCnt
ThreadPool.coreCnt = 1*sizeof.rd + ThreadPool.nodeCnt
ThreadPool.threadTable = 1*sizeof.rd + 1*sizeof.rd + ThreadPool.coreCnt
ThreadPool.nodeTable = MAX_THREADS*sizeof.rq + ThreadPool.threadTable
sizeof.ThreadPool = MAX_NUMANODES*sizeof.NumaNode + ThreadPool.nodeTable

;IOBuffer.inputBuffer       = 0
;IOBuffer.inputBufferSizeB  = 8 + IOBuffer.inputBuffer
;IOBuffer.cmdLineStart      = 8 + IOBuffer.inputBufferSizeB
;IOBuffer.tmp_i             = 8 + IOBuffer.cmdLineStart
;IOBuffer.tmp_j             = 4 + IOBuffer.tmp_i
;IOBuffer.tmpBuffer         = 4 + IOBuffer.tmp_j
;sizeof.IOBuffer.tmpBuffer  = 512
;sizeof.IOBuffer            = 512+IOBuffer.tmpBuffer


; structure for buffer input and output (input only for now)
struct IOBuffer
 cmdLineStart	  rq 1	; address of string from cmd line to parse
 inputBuffer	  rq 1	; address of string from stdin to parse
 inputBufferSizeB rq 1	; byte capacity of inputBuffer
 log              rq 1
 tmp_i		rd 1
 tmp_j		rd 1
            rq 1
 tmpBuffer	    rb 512
 tmpBufferEnd	rb 0
ends
sizeof.IOBuffer.tmpBuffer = 512


