
pos_material_key:
    ; in: x0 position
            add  x1, x0, Pos.board
            mov  x0, 0
            stp  xzr, xzr, [sp, -16]!
            mov  w6, 0
.NextSquare:
           ldrb  w7, [x1, x6]
            lsl  w8, w7, 9
           ldrb  w2, [sp, x7]
           _lea  x4, Zobrist_Pieces
            add  x4, x4, x8
            ldr  x4, [x4, x2, lsl 3]
            eor  x0, x0, x4
            add  w2, w2, 1
           strb  w2, [sp, x7]
            add  w6, w6, 1
            tbz  w6, 6, .NextSquare
            add  sp, sp, 16
            ret

pos_KvK_key:
	; in: x0 address of position  (not used)
	; out: x0 material key of KvK configuration
           _lea   x1, Zobrist_Pieces
            ldr   x0, [x1, 8*(64*(8*White+King)+0)]
            ldr   x1, [x1, 8*(64*(8*Black+King)+0)]
            eor   x0, x0, x1
            ret

pos_pieces:
	; in: x0 address of position
	;     x1 color
	;     x2 piece type (1=pawn, 2=knight, ..., 6=king)
	; out: x0 bitboard of pieces
            add   x3, x0, Pos.typeBB
            add   x4, x0, Pos.typeBB + 8*1
            ldr   x1, [x3, x1, lsl 3]
            ldr   x2, [x4, x2, lsl 3]
            and   x0, x1, x2
            ret

side_to_move:
	; in: x0 address of position
	; out: w0 side to move
            ldr  w0, [x0, Pos.sideToMove]
            ret

calc_key:
            mov  x2, x1
            mov  x1, x0
    ; in: x1 address of pcs[16]
    ;     w2 mirror
    ; out: x0 material key

            mov  x0, 0
            tst  w2, w2
          csetm  w2, ne
            and  w2, w2, 8
            mov  w6, 0
._1:
            mov  w7, Pawn
._2:
           _lea  x8, Zobrist_Pieces
            add  x4, x7, x6, lsl 3
            add  x8, x8, x4, lsl 9
            add  x9, x1, Pos.typeBB
            ldr  x9, [x9, x7, lsl 3]
            add  x4, x1, Pos.typeBB
            ldr  x4, [x4, x2]
            and  x9, x9, x4
         Popcnt  x9, x9, x4
           subs  x9, x9, 1
            bmi  .Done
.Next:
            ldr  x4, [x8, x9, lsl 3]
            eor  x0, x0, x4
           subs  x9, x9, 1
            bpl  .Next
.Done:
            add  w7, w7, 1
            cmp  w7, King
            bls  ._2
            eor  w2, w2, 8
            add  w6, w6, 1
            cmp  w6, 2
            blo  ._1
            ret

calc_key_from_pcs:
            mov  x2, x1
            mov  x1, x0
    ; in: x1 address of pcs[16]
    ;     w2 mirror
    ; out: x0 material key
            mov  x0, 0
            tst  w2, w2
          csetm  w2, ne
            and  w2, w2, 8
            mov  w6, 0
._1:
            mov  w7, Pawn
._2:
           _lea  x8, Zobrist_Pieces
            add  x4, x7, x6, lsl 3
            add  x8, x8, x4, lsl 9
            add  w9, w2, w7
            sub  w9, w9, 1
            ldr  w9, [x1, x9, lsl 2]
           subs  w9, w9, 1
            bmi  .Done
.Next:
            ldr  x4, [x8, x9, lsl 3]
            eor  x0, x0, x4
           subs  w9, w9, 1
            bpl  .Next
.Done:
            add  w7, w7, 1
            cmp  w7, King
            bls  ._2
            eor  w2, w2, 8
            add  w6, w6, 1
            cmp  w6, 2
            blo  ._1
            ret


prt_str:
            mov  x8, x2
            mov  x2, x1
            mov  x1, x0
            stp  x2, x29, [sp, -16]!
    ; in: x1 address of position
    ;     w8 mirror
    ; out: x2 address to write string

            add  x3, x1, Pos.typeBB
            mov  x7, x2
            tst  w8, w8
          csetm  w2, ne
            and  w2, w2, 8
            mov  w5, 0
._1:
            mov  w6, King
._2:
            ldr  x9, [x3, x6, lsl 3]
            ldr  x4, [x3, x2]
            and  x9, x9, x4
            cbz  x9, .Done
.Again:
           _lea  x0, pchr
            add  x0, x0, King
            sub  x0, x0, x6
           ldrb  w0, [x0]
           strb  w0, [x7], 1
            sub  x1, x9, 1
            and  x9, x9, x1
           cbnz  x9, .Again
.Done:
            sub  w6, w6, 1
            cmp  w6, Pawn
            bhs  ._2
            mov  w0, 'v'
           strb  w0, [x7], 1
            eor  w2, w2, 8
            add  w5, w5, 1
            cmp  w5, 2
            blo  ._1
           strb  wzr, [x7, -1]
            ldp  x2, x29, [sp], 16
            ret



puts:
printf:
    ; in: x0 string
            stp  x27, x30, [sp, -16]!
           _lea  x27, Output
            mov  x1, x0
             bl  PrintString
        PrintNL
             bl  WriteLine_Output
            ldp  x27, x30, [sp], 16
            ret
        
exit:
              b  Os_ExitProcess

my_strcat:
strcat:
    ; in: x0 address of destination
    ;     x1 address of source
           ldrb  w4, [x0], 1
           cbnz  w4, strcat
            sub  x0, x0, 1
my_strcpy:
strcpy:
    ; in: x0 address of destination
    ;     x1 address of source
           ldrb  w4, [x1], 1
           strb  w4, [x0], 1
           cbnz  w4, my_strcpy
            ret

my_malloc:
malloc:
            add  x1, x0, 16
            stp  x1, x30, [sp, -16]!
             bl  Os_VirtualAlloc
            ldp  x1, x30, [sp], 16
            str  x1, [x0]
            add  x0, x0, 16
            ret

my_free:
free:
           subs  x1, x0, 16
            bmi  @1f
            ldr  x2, [x1]
              b  Os_VirtualFree
    @1:
            ret



open_tb:
    ; in: x0 address of file string
    ;     x1 addresss of suffix string
    ; out: x0 fd (-1 for error)
            stp  x29, x30, [sp, -320]!
            add  x29, sp, 0
            stp  x19, x20, [sp, 16]
           adrp  x20, _LC0
            stp  x21, x22, [sp, 32]
           _lea  x21, num_paths
            stp  x23, x24, [sp, 48]
            mov  x22, x1
            mov  x23, x0
            add  x20, x20, :lo12:_LC0
            mov  x19, -1
           _lea  x6, tb_total_cnt
            ldr  w4, [x6]
            add  w4, w4, 1
            str  w4, [x6]
           _lea  x24, paths
.L3:
            add  x19, x19, 1
            ldr  w0, [x21]
            cmp  w0, w19
            ble  .L4
            ldr  x0, [x24]
            ldr  x1, [x0, x19, lsl 3]
            add  x0, x29, 64
             bl  strcpy
            mov  x1, x20
            add  x0, x29, 64
             bl  strcat
            mov  x1, x23
            add  x0, x29, 64
             bl  strcat
            mov  x1, x22
            add  x0, x29, 64
             bl  strcat
            add  x1, x29, 64
             bl  Os_FileOpenRead
            cmn  x0, 1
            beq  .L3

            ldr  x1, [x24]
            ldr  w2, [x21]
            add  w2, w2, w19
            add  x1, x1, x2, lsl 3
            ldr  w4, [x1]
            add  w4, w4, 1
            str  w4, [x1]
.L1:
            ldp  x19, x20, [sp, 16]
            ldp  x21, x22, [sp, 32]
            ldp  x23, x24, [sp, 48]
            ldp  x29, x30, [sp], 320
            ret
.L4:
            mov  x0, -1
              b  .L1


map_file:
            stp  x29, x30, [sp, -32]!
            add  x29, sp, 0
            stp  x19, x20, [sp, 16]
            mov  x19, x2
             bl  open_tb
            cmn  x0, 1
            beq  .L11
            mov  x20, x0
            mov  x1, x0
             bl  Os_FileMap
            str  x2, [x19]
            mov  x19, x0
            mov  x1, x20
             bl  Os_FileClose
.L9:
            mov  x0, x19
            ldp  x19, x20, [sp, 16]
            ldp  x29, x30, [sp], 32
            ret
.L11:
            mov  x19, 0
              b  .L9

add_to_hash:
        lsr     x5, x1, 54
        mov     x3, 80
        adrp    x4, TB_hash
        mul     x3, x5, x3
        add     x2, x4, :lo12:TB_hash
        add     x3, x3, 8
        add     x3, x3, x2
        mov     w2, 0
.L15:
        ldr     x6, [x3]
        cbz     x6, .L14
        add     w2, w2, 1
        add     x3, x3, 16
        cmp     w2, 5
        bne     .L15
        stp     x29, x30, [sp, -16]!
        adrp    x0, _LC1
        add     x0, x0, :lo12:_LC1
        add     x29, sp, 0
        bl      puts
        mov     w0, 1
        bl      exit
.L14:
        add     x5, x5, x5, lsl 2
        add     x3, x4, :lo12:TB_hash
        add     x2, x5, x2, sxtw
        lsl     x2, x2, 4
        add     x4, x3, x2
        str     x1, [x3, x2]
        str     x0, [x4, 8]
        ret


init_tb:
        stp     x29, x30, [sp, -112]!
        adrp    x1, _LC2
        add     x1, x1, :lo12:_LC2
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        mov     x19, x0
        stp     x21, x22, [sp, 32]

        bl      open_tb
        cmn     w0, 1
        beq     .L20
        mov     x1, x0
        bl      Os_FileClose
        add     x20, x29, 48
        mov     x0, 0
.L22:
        str     wzr, [x0, x20]
        add     x0, x0, 4
        cmp     x0, 64
        bne     .L22
        mov     w0, 0
        mov     w3, 5
        mov     w4, 8
.L33:
        ldrb    w1, [x19]
        cbz     w1, .L23
        cmp     w1, 80
        beq     .L25
        bhi     .L26
        cmp     w1, 75
        beq     .L27
        cmp     w1, 78
        beq     .L28
        cmp     w1, 66
        bne     .L24
        orr     w1, w0, 3
        b       .L63
.L26:
        cmp     w1, 82
        beq     .L30
        bcc     .L31
        cmp     w1, 118
        csel    w0, w0, w4, ne
.L24:
        add     x19, x19, 1
        b       .L33
.L25:
        orr     w1, w0, 1
.L63:
        sbfiz   x1, x1, 2, 32
        ldr     w2, [x20, x1]
        add     w2, w2, 1
        str     w2, [x20, x1]
        b       .L24
.L28:
        orr     w1, w0, 2
        b       .L63
.L30:
        orr     w1, w0, 4
        b       .L63
.L31:
        orr     w1, w0, w3
        b       .L63
.L27:
        orr     w1, w0, 6
        b       .L63
.L23:
        mov     x0, x20
        mov     w1, 0
        bl      calc_key_from_pcs
        mov     x21, x0
        mov     x0, x20
        mov     w1, 1
        bl      calc_key_from_pcs
        mov     x22, x0
        ldr     w2, [x29, 52]
        ldr     w1, [x29, 84]
        adds    w4, w2, w1
        bne     .L34
        adrp    x0, TBnum_piece
        ldr     w19, [x0, :lo12:TBnum_piece]
        cmp     w19, 254
        bne     .L35
        adrp    x0, _LC3
        add     x0, x0, :lo12:_LC3
.L65:
        bl      puts
        mov     w0, 1
        bl      exit
.L35:
        add     w3, w19, 1
        str     w3, [x0, :lo12:TBnum_piece]
        adrp    x0, TB_piece
        add     x0, x0, :lo12:TB_piece
        mov     w3, 120
.L64:
        smaddl  x19, w19, w3, x0
        mov     x3, 0
        mov     w0, 0
        strb    wzr, [x19, 24]
        str     x21, [x19, 8]
.L38:
        ldr     w5, [x20, x3]
        add     x3, x3, 4
        cmp     x3, 64
        add     w0, w0, w5
        uxtb    w0, w0
        bne     .L38
        cmp     x21, x22
        strb    w0, [x19, 25]
        cset    w3, eq
        cmp     w4, 0
        strb    w3, [x19, 26]
        cset    w3, gt
        strb    w3, [x19, 27]
        adrp    x3, Tablebases__MaxCardinality
        ldr     w5, [x3, :lo12:Tablebases__MaxCardinality]
        cmp     w0, w5
        ble     .L39
        str     w0, [x3, :lo12:Tablebases__MaxCardinality]
.L39:
        cmp     w4, 0
        ble     .L40
        uxtb    w0, w2
        uxtb    w3, w1
        cmp     w1, 0
        strb    w0, [x19, 28]
        strb    w3, [x19, 29]
        ble     .L42
        cmp     w2, 0
        ccmp    w2, w1, 0, ne
        ble     .L42
        strb    w3, [x19, 28]
        strb    w0, [x19, 29]
.L42:
        mov     x1, x21
        mov     x0, x19
        bl      add_to_hash
        cmp     x21, x22
        beq     .L20
        mov     x1, x22
        mov     x0, x19
        bl      add_to_hash
.L20:
        ldp     x19, x20, [sp, 16]
        ldp     x21, x22, [sp, 32]
        ldp     x29, x30, [sp], 112
        ret
.L34:
        adrp    x0, TBnum_pawn
        ldr     w19, [x0, :lo12:TBnum_pawn]
        cmp     w19, 256
        bne     .L37
        adrp    x0, _LC4
        add     x0, x0, :lo12:_LC4
        b       .L65
.L37:
        add     w3, w19, 1
        str     w3, [x0, :lo12:TBnum_pawn]
        adrp    x0, TB_pawn
        add     x0, x0, :lo12:TB_pawn
        mov     w3, 384
        b       .L64
.L40:
        mov     x1, 0
        mov     w0, 0
.L45:
        ldr     w2, [x20, x1]
        add     x1, x1, 4
        cmp     w2, 1
        cinc    w0, w0, eq
        cmp     x1, 64
        bne     .L45
        cmp     w0, 2
        ble     .L46
        strb    wzr, [x19, 28]
        b       .L42
.L46:
        bne     .L47
        strb    w0, [x19, 28]
        b       .L42
.L47:
        mov     x0, 0
        mov     w1, 16
.L49:
        ldr     w2, [x20, x0]
        add     x0, x0, 4
        cmp     w2, 1
        ccmp    w2, w1, 0, gt
        csel    w1, w1, w2, ge
        cmp     x0, 64
        add     w2, w1, 1
        uxtb    w2, w2
        bne     .L49
        strb    w2, [x19, 28]
        b       .L42


init_indices:
        adrp    x1, binomial
        mov     x2, 0
        add     x6, x1, :lo12:binomial
.L70:
        mov     w8, w2
        add     x7, x6, x2, lsl 8
        mov     x0, 0
.L69:
        mov     w5, 1
        mov     w3, w0
        mov     w4, w5
.L68:
        cmp     w4, w8
        bgt     .L67
        sub     w9, w0, w4
        add     w4, w4, 1
        mul     w3, w3, w9
        mul     w5, w5, w4
        b       .L68
.L67:
        sdiv    w3, w3, w5
        str     w3, [x7, x0, lsl 2]
        add     x0, x0, 1
        cmp     x0, 64
        bne     .L69
        add     x2, x2, 1
        cmp     x2, 5
        bne     .L70
        adrp    x6, pfactor
        adrp    x5, pawnidx
        adrp    x2, ptwist
        adrp    x3, invflap
        add     x6, x6, :lo12:pfactor
        add     x5, x5, :lo12:pawnidx
        add     x1, x1, :lo12:binomial
        add     x2, x2, :lo12:ptwist
        add     x3, x3, :lo12:invflap
        mov     w8, -1
        mov     w7, 0
.L79:
        sbfiz   x10, x8, 6, 32
        mov     x0, 0
        mov     w4, 0
.L72:
        str     w4, [x5, x0, lsl 2]
        mov     w9, 1
        cbz     w7, .L71
        ldrb    w9, [x3, x0]
        ldrb    w9, [x2, x9]
        add     x9, x10, x9
        ldr     w9, [x1, x9, lsl 2]
.L71:
        add     x0, x0, 1
        add     w4, w4, w9
        cmp     x0, 6
        bne     .L72
        sbfiz   x10, x8, 6, 32
        str     w4, [x6]
        mov     w4, 0
.L74:
        str     w4, [x5, x0, lsl 2]
        mov     w9, 1
        cbz     w7, .L73
        ldrb    w9, [x3, x0]
        ldrb    w9, [x2, x9]
        add     x9, x10, x9
        ldr     w9, [x1, x9, lsl 2]
.L73:
        add     x0, x0, 1
        add     w4, w4, w9
        cmp     x0, 12
        bne     .L74
        sbfiz   x10, x8, 6, 32
        str     w4, [x6, 4]
        mov     w4, 0
.L76:
        str     w4, [x5, x0, lsl 2]
        mov     w9, 1
        cbz     w7, .L75
        ldrb    w9, [x3, x0]
        ldrb    w9, [x2, x9]
        add     x9, x10, x9
        ldr     w9, [x1, x9, lsl 2]
.L75:
        add     x0, x0, 1
        add     w4, w4, w9
        cmp     x0, 18
        bne     .L76
        sbfiz   x10, x8, 6, 32
        str     w4, [x6, 8]
        mov     w4, 0
.L78:
        str     w4, [x5, x0, lsl 2]
        mov     w9, 1
        cbz     w7, .L77
        ldrb    w9, [x3, x0]
        ldrb    w9, [x2, x9]
        add     x9, x10, x9
        ldr     w9, [x1, x9, lsl 2]
.L77:
        add     x0, x0, 1
        add     w4, w4, w9
        cmp     x0, 24
        bne     .L78
        add     w7, w7, 1
        str     w4, [x6, 12]
        cmp     w7, 5
        add     w8, w8, 1
        add     x5, x5, 96
        add     x6, x6, 16
        bne     .L79
        ret
encode_piece:
        ldr     w4, [x2]
        ldrb    w6, [x0, 25]
        tbz     x4, 2, .L92
        mov     x4, 0
.L93:
        cmp     w6, w4
        ble     .L92
        ldr     w5, [x2, x4, lsl 2]
        eor     w5, w5, 7
        str     w5, [x2, x4, lsl 2]
        add     x4, x4, 1
        b       .L93
.L92:
        ldr     w4, [x2]
        tbz     x4, 5, .L94
        mov     x4, 0
.L95:
        cmp     w6, w4
        ble     .L94
        ldr     w5, [x2, x4, lsl 2]
        eor     w5, w5, 56
        str     w5, [x2, x4, lsl 2]
        add     x4, x4, 1
        b       .L95
.L94:
        adrp    x7, offdiag
        mov     x4, 0
        add     x7, x7, :lo12:offdiag
.L97:
        cmp     w4, w6
        mov     w5, w4
        bge     .L96
        ldrsw   x8, [x2, x4, lsl 2]
        add     x4, x4, 1
        ldrsb   w8, [x7, x8]
        cbz     w8, .L97
.L96:
        ldrb    w4, [x0, 28]
        cbz     w4, .L98
        cmp     w5, 1
        bgt     .L99
.L118:
        ldrsw   x5, [x2, w5, sxtw 2]
        adrp    x4, offdiag
        add     x4, x4, :lo12:offdiag
        ldrsb   w4, [x4, x5]
        cmp     w4, 0
        ble     .L99
        adrp    x5, flipdiag
        mov     x4, 0
        add     x5, x5, :lo12:flipdiag
.L100:
        cmp     w6, w4
        ble     .L99
        ldrsw   x7, [x2, x4, lsl 2]
        ldrb    w7, [x5, x7]
        str     w7, [x2, x4, lsl 2]
        add     x4, x4, 1
        b       .L100
.L99:
        ldrb    w0, [x0, 28]
        cbz     w0, .L102
        cmp     w0, 1
        adrp    x7, triangle
        adrp    x0, KK_idx
        beq     .L103
        ldpsw   x4, x5, [x2]
        add     x7, x7, :lo12:triangle
        add     x0, x0, :lo12:KK_idx
        ldrb    w4, [x7, x4]
        mov     w7, 2
        add     x4, x5, x4, lsl 6
        ldrsh   x0, [x0, x4, lsl 1]
        b       .L105
.L104:
        sxtw    x4, w5
        adrp    x5, diag
        ldrsb   w0, [x10, x4]
        cbz     w0, .L106
        add     x5, x5, :lo12:diag
        ldrb    w0, [x5, x7]
        mov     w5, 23436
        mov     w7, 1736
        madd    w5, w0, w7, w5
        adrp    x0, lower
        add     x0, x0, :lo12:lower
        ldrb    w0, [x0, x4]
        mov     w4, 62
        madd    w0, w0, w4, w5
        add     w0, w0, w8
        sub     w0, w0, w9
.L134:
        sxtw    x0, w0
.L135:
        mov     w7, 3
.L105:
        ldrsw   x4, [x3]
        adrp    x12, binomial
        add     x12, x12, :lo12:binomial
        mul     x0, x4, x0
.L117:
        cmp     w7, w6
        bge     .L91
        sxtw    x4, w7
        mov     x9, x4
        ldrb    w5, [x1, x4]
        add     w5, w7, w5
.L111:
        cmp     w5, w4
        ble     .L110
        add     x10, x4, 1
        mov     x8, x10
.L113:
        cmp     w5, w8
        ble     .L120
        ldr     w11, [x2, x4, lsl 2]
        ldr     w13, [x2, x8, lsl 2]
        cmp     w11, w13
        ble     .L112
        str     w13, [x2, x4, lsl 2]
        str     w11, [x2, x8, lsl 2]
.L112:
        add     x8, x8, 1
        b       .L113
.L106:
        sxtw    x8, w8
        add     x5, x5, :lo12:diag
        ldrsb   w0, [x10, x8]
        cbz     w0, .L107
        ldrb    w0, [x5, x7]
        mov     w9, 196
        mov     w7, 30380
        madd    w7, w0, w9, w7
        ldrb    w0, [x5, x4]
        mov     w4, 28
        sub     w0, w0, w11
        madd    w0, w0, w4, w7
        adrp    x4, lower
        add     x4, x4, :lo12:lower
        ldrb    w4, [x4, x8]
        b       .L136
.L107:
        ldrb    w7, [x5, x7]
        mov     w0, 31164
        mov     w10, 42
        ldrb    w8, [x5, x8]
        sub     w9, w8, w9
        madd    w7, w7, w10, w0
        ldrb    w0, [x5, x4]
        mov     w4, 6
        sub     w0, w0, w11
        madd    w0, w0, w4, w7
        add     w0, w0, w9
        b       .L134
.L103:
        ldp     w9, w8, [x2]
        add     x7, x7, :lo12:triangle
        ldr     w4, [x2, 8]
        add     x0, x0, :lo12:KK_idx
        ldrb    w7, [x7, w9, sxtw]
        cmp     w4, w9
        cset    w5, gt
        cmp     w4, w8
        cinc    w5, w5, gt
        lsl     x7, x7, 6
        add     x8, x7, x8, sxtw
        ldrsh   x7, [x0, x8, lsl 1]
        cmp     x7, 440
        bhi     .L108
        sub     w4, w4, w5
        mov     w0, 441
        mul     w0, w4, w0
        add     x0, x7, x0, sxtw
        b       .L135
.L108:
        adrp    x0, lower
        sxtw    x4, w4
        add     x0, x0, :lo12:lower
        mov     w8, 21
        ldrb    w0, [x0, x4]
        umaddl  x0, w0, w8, x7
        mov     x7, 26901
        add     x0, x0, x7
        adrp    x7, offdiag
        add     x7, x7, :lo12:offdiag
        ldrsb   w4, [x7, x4]
        mov     w7, 3
        cbnz    w4, .L105
        mul     w4, w5, w8
        sxtw    x4, w4
        sub     x0, x0, x4
        b       .L105
.L120:
        mov     x4, x10
        b       .L111
.L110:
        lsl     x9, x9, 2
        mov     x8, 0
        add     x14, x2, x9
        mov     w11, 0
.L116:
        add     w4, w7, w8
        cmp     w5, w4
        ble     .L114
        ldr     w4, [x14, x8, lsl 2]
        mov     x10, 0
        mov     w13, 0
.L115:
        ldr     w15, [x2, x10, lsl 2]
        add     x10, x10, 1
        cmp     w4, w15
        cinc    w13, w13, gt
        cmp     w7, w10
        bgt     .L115
        sbfiz   x10, x8, 6, 32
        sub     w4, w4, w13
        add     x8, x8, 1
        add     x4, x10, x4, sxtw
        ldr     w4, [x12, x4, lsl 2]
        add     w11, w11, w4
        b       .L116
.L114:
        ldr     w4, [x3, x9]
        mov     w7, w5
        smaddl  x0, w11, w4, x0
        b       .L117
.L98:
        cmp     w5, 2
        ble     .L118
.L102:
        ldp     w7, w5, [x2]
        adrp    x10, offdiag
        ldr     w8, [x2, 8]
        add     x10, x10, :lo12:offdiag
        cmp     w5, w7
        cset    w11, gt
        cmp     w7, w8
        sxtw    x7, w7
        cset    w0, lt
        cmp     w5, w8
        cinc    w9, w0, lt
        ldrsb   w0, [x10, x7]
        cbz     w0, .L104
        adrp    x0, triangle
        sub     w5, w5, w11
        add     x0, x0, :lo12:triangle
        ldrb    w4, [x0, x7]
        mov     w0, 62
        mul     w5, w5, w0
        mov     w0, 3906
        madd    w4, w4, w0, w5
        sub     w0, w8, w9
.L136:
        add     w0, w0, w4
        b       .L134
.L91:
        ret
pawn_file:
        adrp    x4, flap
        mov     x3, 1
        add     x4, x4, :lo12:flap
.L140:
        ldrb    w2, [x0, 28]
        cmp     w2, w3
        ldr     w2, [x1]
        ble     .L138
        ldr     w5, [x1, x3, lsl 2]
        ldrb    w7, [x4, w2, sxtw]
        ldrb    w6, [x4, w5, sxtw]
        cmp     w7, w6
        ble     .L139
        str     w5, [x1]
        str     w2, [x1, x3, lsl 2]
.L139:
        add     x3, x3, 1
        b       .L140
.L138:
        adrp    x0, file_to_file
        and     x2, x2, 7
        add     x0, x0, :lo12:file_to_file
        ldrb    w0, [x0, x2]
        ret
encode_pawn:
        mov     x6, x0
        ldrb    w9, [x0, 25]
        ldr     w0, [x2]
        tbz     x0, 2, .L142
        mov     x4, 0
.L143:
        cmp     w9, w4
        ble     .L142
        ldr     w0, [x2, x4, lsl 2]
        eor     w0, w0, 7
        str     w0, [x2, x4, lsl 2]
        add     x4, x4, 1
        b       .L143
.L142:
        adrp    x0, ptwist
        mov     x5, 1
        add     x0, x0, :lo12:ptwist
.L145:
        ldrb    w4, [x6, 28]
        cmp     w4, w5
        mov     w7, w4
        ble     .L144
        add     x7, x5, 1
        mov     x4, x7
.L147:
        ldrb    w8, [x6, 28]
        cmp     w8, w4
        ble     .L169
        ldr     w8, [x2, x5, lsl 2]
        ldr     w10, [x2, x4, lsl 2]
        ldrb    w12, [x0, w8, sxtw]
        ldrb    w11, [x0, w10, sxtw]
        cmp     w12, w11
        bge     .L146
        str     w10, [x2, x5, lsl 2]
        str     w8, [x2, x4, lsl 2]
.L146:
        add     x4, x4, 1
        b       .L147
.L169:
        mov     x5, x7
        b       .L145
.L144:
        ldrsw   x8, [x2]
        adrp    x0, flap
        sub     w5, w4, 1
        add     x0, x0, :lo12:flap
        adrp    x10, binomial
        adrp    x12, ptwist
        sxtw    x5, w5
        add     x10, x10, :lo12:binomial
        ldrb    w0, [x0, x8]
        mov     x8, 24
        add     x12, x12, :lo12:ptwist
        madd    x8, x5, x8, x0
        adrp    x0, pawnidx
        add     x0, x0, :lo12:pawnidx
        ldrsw   x0, [x0, x8, lsl 2]
        mov     w8, 0
.L149:
        cmp     w5, 0
        ble     .L148
        ldrsw   x11, [x2, x5, lsl 2]
        sub     x5, x5, 1
        ldrb    w13, [x12, x11]
        sbfiz   x11, x8, 6, 32
        add     w8, w8, 1
        add     x11, x11, x13
        ldrsw   x11, [x10, x11, lsl 2]
        add     x0, x0, x11
        b       .L149
.L148:
        ldrb    w6, [x6, 29]
        ldrsw   x5, [x3]
        add     w6, w6, w4
        cmp     w4, w6
        mul     x0, x5, x0
        bge     .L150
        uxtb    x5, w4
        mov     x15, x5
.L151:
        add     x8, x5, 1
        mov     x7, x8
.L155:
        cmp     w6, w7
        ble     .L153
        ldr     w10, [x2, x5, lsl 2]
        ldr     w11, [x2, x7, lsl 2]
        cmp     w10, w11
        ble     .L154
        str     w11, [x2, x5, lsl 2]
        str     w10, [x2, x7, lsl 2]
.L154:
        add     x7, x7, 1
        b       .L155
.L153:
        cmp     w6, w8
        mov     x5, x8
        bgt     .L151
        sub     w8, w6, w4
        adrp    x12, binomial
        sub     w8, w8, 1
        add     x14, x2, x4, uxtb 2
        add     x8, x8, 1
        add     x12, x12, :lo12:binomial
        mov     x7, 0
        mov     w11, 0
.L158:
        ldr     w5, [x14, x7, lsl 2]
        mov     x10, 0
        mov     w13, 0
.L157:
        cmp     x15, x10
        beq     .L156
        ldr     w16, [x2, x10, lsl 2]
        add     x10, x10, 1
        cmp     w5, w16
        cinc    w13, w13, gt
        b       .L157
.L156:
        sub     w5, w5, w13
        sbfiz   x10, x7, 6, 32
        sub     w5, w5, 8
        add     x7, x7, 1
        cmp     x8, x7
        add     x5, x10, x5, sxtw
        ldr     w5, [x12, x5, lsl 2]
        add     w11, w11, w5
        bne     .L158
        ubfiz   x4, x4, 2, 8
        mov     w7, w6
        ldr     w4, [x3, x4]
        smaddl  x0, w11, w4, x0
.L150:
        adrp    x11, binomial
        add     x11, x11, :lo12:binomial
.L168:
        cmp     w7, w9
        bge     .L141
        sxtw    x4, w7
        mov     x14, x4
        ldrb    w5, [x1, x4]
        add     w5, w7, w5
.L161:
        cmp     w5, w4
        ble     .L160
        add     x8, x4, 1
        mov     x6, x8
.L163:
        cmp     w5, w6
        ble     .L170
        ldr     w10, [x2, x4, lsl 2]
        ldr     w12, [x2, x6, lsl 2]
        cmp     w10, w12
        ble     .L162
        str     w12, [x2, x4, lsl 2]
        str     w10, [x2, x6, lsl 2]
.L162:
        add     x6, x6, 1
        b       .L163
.L170:
        mov     x4, x8
        b       .L161
.L160:
        lsl     x13, x14, 2
        mov     x6, 0
        add     x15, x2, x13
        mov     w10, 0
.L167:
        add     w4, w7, w6
        cmp     w5, w4
        ble     .L164
        ldr     w4, [x15, x6, lsl 2]
        mov     x8, 0
        mov     w12, 0
.L166:
        cmp     x14, x8
        beq     .L165
        ldr     w16, [x2, x8, lsl 2]
        add     x8, x8, 1
        cmp     w4, w16
        cinc    w12, w12, gt
        b       .L166
.L165:
        sbfiz   x8, x6, 6, 32
        sub     w4, w4, w12
        add     x6, x6, 1
        add     x4, x8, x4, sxtw
        ldr     w4, [x11, x4, lsl 2]
        add     w10, w10, w4
        b       .L167
.L164:
        ldr     w4, [x3, x13]
        mov     w7, w5
        smaddl  x0, w10, w4, x0
        b       .L168
.L141:
        ret
subfactor:
        mov     w3, 1
        mov     w4, w1
        mov     w2, w3
.L177:
        cmp     w2, w0
        bge     .L176
        sub     w5, w1, w2
        add     w2, w2, 1
        mul     w4, w4, w5
        mul     w3, w3, w2
        b       .L177
.L176:
        sdiv    w0, w4, w3
        ret
calc_factors_piece:
        ldrb    w7, [x3]
        mov     w8, 64
        adrp    x10, pivfac
        mov     x12, x0
        mov     w15, w1
        mov     w13, w2
        mov     x14, x3
        sub     w8, w8, w7
        add     x10, x10, :lo12:pivfac
        uxtb    x18, w4
        mov     x6, 1
        mov     w9, 0
.L184:
        cmp     w7, w15
        ccmp    w9, w13, 4, ge
        bne     .L185
        cmp     w9, w13
        bne     .L188
        str     w6, [x12]
        add     w9, w9, 1
        ldrsw   x0, [x10, x18, lsl 2]
        mul     x6, x6, x0
        b       .L184
.L189:
        cmp     w9, w13
        bne     .L180
        str     w6, [x12]
        ldrsw   x0, [x10, x18, lsl 2]
        mul     x6, x6, x0
.L181:
        add     w9, w9, 1
        cmp     w7, w15
        ccmp    w9, w13, 4, ge
        beq     .L189
        mov     x0, x6
        ldp     x29, x30, [sp], 16
        ret
.L185:
        mov     x0, x6
        ret
.L188:
        stp     x29, x30, [sp, -16]!
        add     x29, sp, 0
.L180:
        sxtw    x0, w7
        mov     w1, w8
        str     w6, [x12, x0, lsl 2]
        ldrb    w11, [x14, x0]
        mov     w0, w11
        bl      subfactor
        sxtw    x0, w0
        sub     w8, w8, w11
        add     w7, w7, w11
        mul     x6, x6, x0
        b       .L181
calc_factors_pawn:
        stp     x29, x30, [sp, -32]!
        cmp     w3, 14
        mov     x11, x0
        mov     w18, w2
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        mov     w12, w3
        mov     w19, w1
        mov     x8, x4
        ldrb    w7, [x4]
        bgt     .L191
        uxtb    x0, w7
        ldrb    w0, [x4, x0]
        add     w7, w7, w0
.L191:
        mov     w10, 64
        adrp    x13, pfactor
        sub     w10, w10, w7
        add     x13, x13, :lo12:pfactor
        sxtw    x14, w5
        mov     x6, 1
        mov     w9, 0
        mov     w20, 48
.L198:
        cmp     w7, w19
        ccmp    w9, w18, 4, ge
        beq     .L192
        cmp     w9, w12
        beq     .L194
        mov     x0, x6
        ldp     x19, x20, [sp, 16]
        ldp     x29, x30, [sp], 32
        ret
.L192:
        cmp     w9, w18
        bne     .L195
        str     w6, [x11]
        ldrb    w0, [x8]
        sub     w0, w0, 1
        add     x0, x14, x0, sxtw 2
        ldrsw   x0, [x13, x0, lsl 2]
.L200:
        mul     x6, x6, x0
.L196:
        add     w9, w9, 1
        b       .L198
.L195:
        cmp     w9, w12
        bne     .L197
.L194:
        ldrb    w0, [x8]
        str     w6, [x11, x0, lsl 2]
        ldrb    w1, [x8]
        uxtb    x0, w1
        sub     w1, w20, w1
        ldrb    w0, [x8, x0]
        bl      subfactor
        sxtw    x0, w0
        b       .L200
.L197:
        sxtw    x0, w7
        mov     w1, w10
        str     w6, [x11, x0, lsl 2]
        ldrb    w15, [x8, x0]
        mov     w0, w15
        bl      subfactor
        sxtw    x0, w0
        sub     w10, w10, w15
        add     w7, w7, w15
        mul     x6, x6, x0
        b       .L196
set_norm_piece:
        mov     x3, 0
.L203:
        ldrb    w4, [x0, 25]
        cmp     w4, w3
        ble     .L202
        strb    wzr, [x1, x3]
        add     x3, x3, 1
        b       .L203
.L202:
        ldrb    w3, [x0, 28]
        cbz     w3, .L205
        cmp     w3, 2
        beq     .L213
        sub     w3, w3, 1
        b       .L213
.L205:
        mov     w3, 3
.L213:
        strb    w3, [x1]
        ldrb    w4, [x1]
.L211:
        ldrb    w3, [x0, 25]
        cmp     w4, w3
        bge     .L201
        sxtw    x3, w4
        mov     x5, x3
.L210:
        ldrb    w6, [x0, 25]
        cmp     w6, w5
        ble     .L209
        ldrb    w6, [x2, x5]
        add     x5, x5, 1
        ldrb    w7, [x2, x3]
        cmp     w7, w6
        bne     .L209
        ldrb    w6, [x1, x3]
        add     w6, w6, 1
        strb    w6, [x1, x3]
        b       .L210
.L209:
        ldrb    w3, [x1, x3]
        add     w4, w4, w3
        b       .L211
.L201:
        ret
set_norm_pawn:
        mov     x3, 0
.L216:
        ldrb    w4, [x0, 25]
        cmp     w4, w3
        ble     .L215
        strb    wzr, [x1, x3]
        add     x3, x3, 1
        b       .L216
.L215:
        ldrb    w3, [x0, 28]
        strb    w3, [x1]
        ldrb    w3, [x0, 29]
        cbz     w3, .L217
        ldrb    w4, [x0, 28]
        strb    w3, [x1, x4]
.L217:
        ldrb    w3, [x0, 28]
        ldrb    w4, [x0, 29]
.L225:
        add     w3, w3, w4
        ldrb    w4, [x0, 25]
        cmp     w3, w4
        bge     .L214
        sxtw    x4, w3
        mov     x5, x4
.L220:
        ldrb    w6, [x0, 25]
        cmp     w6, w5
        ble     .L219
        ldrb    w6, [x2, x5]
        add     x5, x5, 1
        ldrb    w7, [x2, x4]
        cmp     w7, w6
        bne     .L219
        ldrb    w6, [x1, x4]
        add     w6, w6, 1
        strb    w6, [x1, x4]
        b       .L220
.L219:
        ldrb    w4, [x1, x4]
        b       .L225
.L214:
        ret
setup_pieces_piece:
        stp     x29, x30, [sp, -48]!
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        mov     x20, x1
        mov     x19, x0
        ldrb    w3, [x0, 25]
        mov     x0, 0
        str     x21, [sp, 32]
        mov     x21, x2
        add     x3, x3, 1
.L228:
        add     x0, x0, 1
        cmp     x0, x3
        beq     .L227
        ldrb    w2, [x20, x0]
        add     x1, x19, x0
        and     w2, w2, 15
        strb    w2, [x1, 95]
        b       .L228
.L227:
        ldrb    w9, [x20]
        add     x8, x19, 108
        mov     x1, x8
        add     x2, x19, 96
        and     w9, w9, 15
        mov     x0, x19
        bl      set_norm_piece
        mov     x3, x8
        ldrb    w4, [x19, 28]
        mov     w2, w9
        ldrb    w1, [x19, 25]
        add     x0, x19, 48
        bl      calc_factors_piece
        str     x0, [x21]
        mov     x0, 0
        ldrb    w3, [x19, 25]
        add     x3, x3, 1
.L230:
        add     x0, x0, 1
        cmp     x3, x0
        beq     .L229
        ldrb    w2, [x20, x0]
        add     x1, x19, x0
        asr     w2, w2, 4
        strb    w2, [x1, 101]
        b       .L230
.L229:
        ldrb    w8, [x20]
        add     x9, x19, 114
        mov     x1, x9
        add     x2, x19, 102
        mov     x0, x19
        asr     w8, w8, 4
        bl      set_norm_piece
        mov     x3, x9
        ldrb    w4, [x19, 28]
        mov     w2, w8
        ldrb    w1, [x19, 25]
        add     x0, x19, 72
        bl      calc_factors_piece
        ldp     x19, x20, [sp, 16]
        str     x0, [x21, 8]
        ldr     x21, [sp, 32]
        ldp     x29, x30, [sp], 48
        ret
setup_pieces_piece_dtz:
        stp     x29, x30, [sp, -32]!
        mov     x8, x0
        add     x29, sp, 0
        ldrb    w4, [x0, 25]
        mov     x0, 0
        str     x19, [sp, 16]
        mov     x19, x2
        add     x4, x4, 1
.L234:
        add     x0, x0, 1
        cmp     x4, x0
        beq     .L233
        ldrb    w3, [x1, x0]
        add     x2, x8, x0
        and     w3, w3, 15
        strb    w3, [x2, 63]
        b       .L234
.L233:
        ldrb    w9, [x1]
        add     x10, x8, 70
        add     x2, x8, 64
        mov     x1, x10
        and     w9, w9, 15
        mov     x0, x8
        bl      set_norm_piece
        ldrb    w4, [x8, 28]
        ldrb    w1, [x8, 25]
        mov     x3, x10
        mov     w2, w9
        add     x0, x8, 40
        bl      calc_factors_piece
        str     x0, [x19]
        ldr     x19, [sp, 16]
        ldp     x29, x30, [sp], 32
        ret
setup_pieces_pawn:
        stp     x29, x30, [sp, -80]!
        mov     w8, 15
        add     x29, sp, 0
        stp     x21, x22, [sp, 32]
        mov     x21, x1
        stp     x23, x24, [sp, 48]
        mov     x24, x2
        stp     x19, x20, [sp, 16]
        mov     x19, x0
        str     x25, [sp, 64]
        mov     w23, w3
        ldrb    w0, [x0, 29]
        ldrb    w10, [x1]
        cmp     w0, 0
        cset    w22, ne
        and     w10, w10, 15
        add     w22, w22, 1
        cbz     w0, .L238
        ldrb    w8, [x1, 1]
        and     w8, w8, 15
.L238:
        mov     w20, 88
        sxtw    x2, w22
        ldrb    w4, [x19, 25]
        add     x2, x21, x2
        smull   x20, w23, w20
        mov     x0, 0
        add     x25, x19, x20
.L240:
        cmp     w4, w0
        ble     .L239
        ldrb    w1, [x2, x0]
        add     x3, x25, x0
        add     x0, x0, 1
        and     w1, w1, 15
        strb    w1, [x3, 96]
        b       .L240
.L239:
        add     x9, x20, 108
        add     x2, x20, 96
        add     x9, x19, x9
        add     x2, x19, x2
        mov     x1, x9
        mov     x0, x19
        bl      set_norm_pawn
        mov     w3, w8
        add     x0, x20, 48
        ldrb    w1, [x19, 25]
        mov     w2, w10
        mov     w5, w23
        mov     x4, x9
        add     x0, x19, x0
        bl      calc_factors_pawn
        str     x0, [x24]
        mov     w8, 15
        ldrb    w10, [x21]
        ldrb    w0, [x19, 29]
        asr     w10, w10, 4
        cbz     w0, .L241
        ldrb    w8, [x21, 1]
        asr     w8, w8, 4
.L241:
        sxtw    x22, w22
        ldrb    w3, [x19, 25]
        add     x21, x21, x22
        mov     x0, 0
.L243:
        cmp     w3, w0
        ble     .L242
        ldrb    w1, [x21, x0]
        add     x2, x25, x0
        add     x0, x0, 1
        asr     w1, w1, 4
        strb    w1, [x2, 102]
        b       .L243
.L242:
        add     x9, x20, 114
        add     x2, x20, 102
        add     x9, x19, x9
        add     x2, x19, x2
        mov     x1, x9
        mov     x0, x19
        bl      set_norm_pawn
        mov     x4, x9
        ldrb    w1, [x19, 25]
        add     x0, x20, 72
        mov     w5, w23
        mov     w3, w8
        mov     w2, w10
        add     x0, x19, x0
        bl      calc_factors_pawn
        ldr     x25, [sp, 64]
        ldp     x19, x20, [sp, 16]
        ldp     x21, x22, [sp, 32]
        str     x0, [x24, 8]
        ldp     x23, x24, [sp, 48]
        ldp     x29, x30, [sp], 80
        ret
setup_pieces_pawn_dtz:
        stp     x29, x30, [sp, -32]!
        mov     x9, x0
        mov     w13, w3
        mov     w10, 15
        add     x29, sp, 0
        str     x19, [sp, 16]
        mov     x19, x2
        ldrb    w0, [x0, 29]
        ldrb    w12, [x1]
        cmp     w0, 0
        cset    w2, ne
        and     w12, w12, 15
        add     w2, w2, 1
        cbz     w0, .L253
        ldrb    w10, [x1, 1]
        and     w10, w10, 15
.L253:
        mov     w8, 48
        sxtw    x2, w2
        ldrb    w3, [x9, 25]
        add     x1, x1, x2
        smull   x8, w13, w8
        mov     x0, 0
.L255:
        cmp     w3, w0
        ble     .L254
        add     x2, x0, x8
        ldrb    w4, [x1, x0]
        add     x2, x9, x2
        add     x0, x0, 1
        and     w4, w4, 15
        strb    w4, [x2, 64]
        b       .L255
.L254:
        add     x11, x8, 70
        add     x2, x8, 64
        add     x11, x9, x11
        add     x2, x9, x2
        mov     x1, x11
        mov     x0, x9
        bl      set_norm_pawn
        add     x0, x8, 40
        ldrb    w1, [x9, 25]
        mov     w5, w13
        mov     x4, x11
        mov     w3, w10
        mov     w2, w12
        add     x0, x9, x0
        bl      calc_factors_pawn
        str     x0, [x19]
        ldr     x19, [sp, 16]
        ldp     x29, x30, [sp], 32
        ret
calc_symlen:
        stp     x29, x30, [sp, -64]!
        add     w4, w1, w1, lsl 1
        add     x29, sp, 0
        ldr     x5, [x0, 40]
        sxtw    x4, w4
        stp     x21, x22, [sp, 32]
        mov     x22, x0
        add     x6, x5, x4
        stp     x19, x20, [sp, 16]
        stp     x23, x24, [sp, 48]
        mov     x21, x2
        sxtw    x19, w1
        ldrb    w3, [x6, 1]
        ldrb    w20, [x6, 2]
        asr     w6, w3, 4
        orr     w20, w6, w20, lsl 4
        cmp     w20, 4095
        bne     .L262
        ldr     x0, [x0, 32]
        strb    wzr, [x0, x19]
.L263:
        mov     w0, 1
        strb    w0, [x21, x19]
        ldp     x19, x20, [sp, 16]
        ldp     x21, x22, [sp, 32]
        ldp     x23, x24, [sp, 48]
        ldp     x29, x30, [sp], 64
        ret
.L262:
        ubfiz   w1, w3, 8, 4
        ldrb    w3, [x5, x4]
        orr     w1, w1, w3
        sxtw    x23, w1
        ldrb    w3, [x2, x23]
        cbnz    w3, .L264
        bl      calc_symlen
.L264:
        sxtw    x24, w20
        ldrb    w0, [x21, x24]
        cbnz    w0, .L265
        mov     x2, x21
        mov     w1, w20
        mov     x0, x22
        bl      calc_symlen
.L265:
        ldr     x1, [x22, 32]
        ldrb    w0, [x1, x24]
        ldrb    w2, [x1, x23]
        add     w0, w0, 1
        add     w0, w0, w2
        strb    w0, [x1, x19]
        b       .L263
ReadUshort:
        ldrb    w1, [x0, 1]
        ldrb    w0, [x0]
        orr     w0, w0, w1, lsl 8
        ret
ReadUint32:
        ldr     w0, [x0]
        ret
setup_pairs:
        sub     sp, sp, 4096
        sub     sp, sp, 32
        stp     x29, x30, [sp, -96]!
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        mov     x19, x0
        stp     x23, x24, [sp, 48]
        mov     x23, x3
        stp     x25, x26, [sp, 64]
        mov     x26, x2
        stp     x21, x22, [sp, 32]
        stp     x27, x28, [sp, 80]
        ldrb    w0, [x0]
        strb    w0, [x4]
        ldrsb   w0, [x19]
        tbz     w0, 31, .L270
        mov     x0, 72
        mov     w20, w5
        bl      malloc
        str     wzr, [x0, 52]
        mov     x7, x0
        cbz     w20, .L271
        ldrb    w0, [x19, 1]
        str     w0, [x7, 56]
.L272:
        add     x19, x19, 2
        str     x19, [x23]
        stp     xzr, xzr, [x26]
        str     xzr, [x26, 16]
.L269:
        ldp     x19, x20, [sp, 16]
        mov     x0, x7
        ldp     x21, x22, [sp, 32]
        ldp     x23, x24, [sp, 48]
        ldp     x25, x26, [sp, 64]
        ldp     x27, x28, [sp, 80]
        ldp     x29, x30, [sp], 96
        add     sp, sp, 4096
        add     sp, sp, 32
        ret
.L271:
        str     wzr, [x0, 56]
        b       .L272
.L270:
        ldrb    w2, [x19, 1]
        add     x0, x19, 4
        ldrb    w5, [x19, 2]
        str     x1, [x29, 104]
        stp     w2, w5, [x29, 116]
        bl      ReadUint32
        ldrb    w24, [x19, 9]
        ldrb    w22, [x19, 8]
        sxtw    x27, w0
        ldrb    w4, [x19, 3]
        sub     w22, w22, w24
        add     w25, w22, 6
        add     w4, w4, w27
        sxtw    x20, w22
        str     w4, [x29, 124]
        add     x28, x20, 9
        lsl     w25, w25, 1
        sxtw    x0, w25
        lsl     x28, x28, 3
        add     x3, x19, x0
        add     w25, w25, 2
        ldrb    w0, [x19, x0]
        ldrb    w21, [x3, 1]
        orr     w21, w0, w21, lsl 8
        add     x0, x28, x21, uxth
        bl      malloc
        mov     x7, x0
        ldp     w2, w5, [x29, 116]
        add     x0, x19, 10
        add     x28, x7, x28
        sxtw    x8, w25
        add     w3, w21, w21, lsl 1
        stp     x0, x28, [x7, 24]
        add     x0, x19, x8
        add     w3, w3, w25
        ldr     x1, [x29, 104]
        lsl     x27, x27, x2
        str     x0, [x7, 40]
        and     w0, w21, 1
        add     w3, w3, w0
        mov     x0, 1
        sub     x1, x1, 1
        lsl     x0, x0, x5
        add     x0, x0, x1
        mov     x1, 6
        ldr     w4, [x29, 124]
        add     x19, x19, x3, sxtw
        str     x19, [x23]
        lsr     x0, x0, x5
        sbfiz   x4, x4, 1, 32
        stp     w2, w5, [x7, 48]
        mul     x0, x0, x1
        add     x1, x29, 128
        str     w24, [x7, 56]
        stp     x0, x4, [x26]
        mov     x0, 0
        str     x27, [x26, 16]
.L276:
        cmp     w21, w0
        bgt     .L274
        add     x10, x29, 128
        mov     x9, 0
.L275:
        cmp     w9, w21
        bge     .L277
        ldrb    w0, [x9, x10]
        cbnz    w0, .L278
        mov     x2, x10
        mov     w1, w9
        mov     x0, x7
        bl      calc_symlen
.L278:
        add     x9, x9, 1
        b       .L275
.L274:
        strb    wzr, [x0, x1]
        add     x0, x0, 1
        b       .L276
.L277:
        add     x0, x20, 8
        sub     w4, w22, 1
        sub     x2, x8, 16
        str     xzr, [x7, x0, lsl 3]
        add     x0, x7, x0, lsl 3
.L280:
        tbnz    w4, 31, .L279
        ldr     x3, [x7, 24]
        add     x6, x2, 2
        sub     w4, w4, 1
        add     x1, x3, x2
        add     x5, x3, x6
        ldrb    w8, [x3, x2]
        sub     x2, x2, 2
        ldrb    w1, [x1, 1]
        ldrb    w5, [x5, 1]
        ldrb    w3, [x3, x6]
        orr     w1, w8, w1, lsl 8
        ldr     x8, [x0]
        orr     w3, w3, w5, lsl 8
        add     x1, x8, x1, uxth
        sub     x1, x1, x3, uxth
        lsr     x1, x1, 1
        str     x1, [x0, -8]!
        b       .L280
.L279:
        mov     w2, 64
        add     x1, x7, 64
        sub     w24, w2, w24
        mov     w0, 0
.L282:
        cmp     w0, w22
        bgt     .L281
        ldr     x2, [x1]
        sub     w3, w24, w0
        add     w0, w0, 1
        lsl     x2, x2, x3
        str     x2, [x1], 8
        b       .L282
.L281:
        ldr     x1, [x7, 24]
        ldrsw   x0, [x7, 56]
        sub     x0, x1, x0, lsl 1
        str     x0, [x7, 24]
        b       .L269
init_table_wdl:
        stp     x29, x30, [sp, -352]!
        add     x2, x0, 16
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        mov     x19, x1
        adrp    x1, _LC2
        stp     x21, x22, [sp, 32]
        add     x1, x1, :lo12:_LC2
        mov     x21, x0
        mov     x0, x19
        stp     x23, x24, [sp, 48]
        stp     x25, x26, [sp, 64]
        bl      map_file
        str     x0, [x21]
        cbnz    x0, .L285
        adrp    x0, _LC5
        mov     x1, x19
        add     x0, x0, :lo12:_LC5
        bl      printf
.L331:
        mov     w0, 0
.L284:
        ldp     x19, x20, [sp, 16]
        ldp     x21, x22, [sp, 32]
        ldp     x23, x24, [sp, 48]
        ldp     x25, x26, [sp, 64]
        ldp     x29, x30, [sp], 352
        ret
.L285:
        adrp    x2, WDL_MAGIC
        ldrb    w3, [x0]
        add     x1, x2, :lo12:WDL_MAGIC
        ldrb    w2, [x2, :lo12:WDL_MAGIC]
        cmp     w3, w2
        bne     .L287
        ldrb    w3, [x0, 1]
        ldrb    w2, [x1, 1]
        cmp     w3, w2
        bne     .L287
        ldrb    w3, [x0, 2]
        ldrb    w2, [x1, 2]
        cmp     w3, w2
        bne     .L287
        ldrb    w2, [x0, 3]
        ldrb    w1, [x1, 3]
        cmp     w2, w1
        beq     .L288
.L287:
        adrp    x0, _LC6
        add     x0, x0, :lo12:_LC6
        bl      puts
;/*
;        ldr     x0, [x21]
;        ldr     x1, [x21, 16]
;        bl      unmap_file
;*/
        ldr     x1, [x21]
        ldr     x2, [x21, 16]
        bl      Os_FileUnmap
        
        str     xzr, [x21]
        b       .L331
.L288:
        ldrb    w1, [x0, 4]
        mov     w19, 4
        mov     w22, 1
        and     w20, w1, 1
        tst     x1, 2
        csel    w24, w19, w22, ne
        add     x19, x0, 5
        ldrb    w0, [x21, 27]
        cbnz    w0, .L290
        add     x2, x29, 96
        mov     x1, x19
        mov     x0, x21
        bl      setup_pieces_piece
        ldrb    w0, [x21, 25]
        mov     w5, w22
        ldr     x1, [x29, 96]
        add     x4, x29, 87
        add     x0, x0, 1
        add     x3, x29, 88
        add     x0, x19, x0
        add     x2, x29, 160
        and     x6, x0, 1
        add     x0, x0, x6
        bl      setup_pairs
        str     x0, [x21, 32]
        ldr     x0, [x29, 88]
        cbz     w20, .L291
        ldr     x1, [x29, 104]
        mov     w5, w22
        add     x4, x29, 87
        add     x3, x29, 88
        add     x2, x29, 184
        bl      setup_pairs
        str     x0, [x21, 40]
        ldr     x0, [x29, 88]
.L292:
        ldr     x1, [x21, 32]
        ldr     x2, [x29, 160]
        str     x0, [x1]
        add     x0, x0, x2
        cbz     w20, .L293
        ldr     x2, [x21, 40]
        str     x0, [x2]
        ldr     x2, [x29, 184]
        add     x0, x0, x2
.L293:
        ldr     x2, [x29, 168]
        str     x0, [x1, 8]
        add     x0, x0, x2
        cbz     w20, .L294
        ldr     x2, [x21, 40]
        str     x0, [x2, 8]
        ldr     x2, [x29, 192]
        add     x0, x0, x2
.L294:
        add     x0, x0, 63
        and     x0, x0, -64
        str     x0, [x1, 16]
        cbnz    w20, .L295
.L330:
        mov     w0, 1
        b       .L284
.L291:
        str     xzr, [x21, 40]
        b       .L292
.L295:
        ldr     x1, [x29, 176]
        add     x0, x0, x1
        ldr     x1, [x21, 40]
        add     x0, x0, 63
        and     x0, x0, -64
        str     x0, [x1, 16]
        b       .L330
.L290:
        ldrb    w0, [x21, 29]
        mov     x22, 0
        cmp     w0, 0
        cset    w23, ne
        add     w23, w23, 1
.L297:
        add     x0, x29, 96
        mov     w3, w22
        mov     x1, x19
        add     x2, x0, x22, lsl 4
        mov     x0, x21
        add     x22, x22, 1
        bl      setup_pieces_pawn
        ldrb    w0, [x21, 25]
        cmp     x22, 4
        add     w0, w0, w23
        sxtw    x0, w0
        add     x19, x19, x0
        bne     .L297
        and     x0, x19, 1
        mov     x1, 72
        add     x0, x19, x0
        sub     w19, w24, 1
        mov     w24, 48
        add     x23, x29, 184
        add     x22, x29, 104
        add     x26, x21, 40
        umaddl  x24, w19, w24, x1
        add     x1, x29, 160
        mov     x25, x23
        add     x24, x1, x24
.L300:
        ldr     x1, [x22, -8]
        add     x4, x29, 87
        add     x3, x29, 88
        sub     x2, x25, 24
        mov     w5, 1
        bl      setup_pairs
        str     x0, [x26, -8]
        ldr     x0, [x29, 88]
        cbz     w20, .L298
        ldr     x1, [x22]
        add     x4, x29, 87
        add     x3, x29, 88
        mov     x2, x25
        mov     w5, 1
        bl      setup_pairs
        str     x0, [x26]
        ldr     x0, [x29, 88]
.L299:
        add     x25, x25, 48
        add     x22, x22, 16
        cmp     x25, x24
        add     x26, x26, 88
        bne     .L300
        mov     x1, 120
        mov     w3, 88
        add     x2, x21, 32
        umaddl  x1, w19, w3, x1
        mov     x4, x2
        add     x1, x21, x1
.L302:
        ldr     x3, [x4]
        str     x0, [x3]
        ldr     x3, [x23, -24]
        add     x0, x0, x3
        cbz     w20, .L301
        ldr     x3, [x4, 8]
        str     x0, [x3]
        ldr     x3, [x23]
        add     x0, x0, x3
.L301:
        add     x4, x4, 88
        add     x23, x23, 48
        cmp     x4, x1
        bne     .L302
        add     x1, x29, 168
        mov     x3, x2
.L304:
        ldr     x5, [x3]
        str     x0, [x5, 8]
        ldr     x5, [x1]
        add     x0, x0, x5
        cbz     w20, .L303
        ldr     x5, [x3, 8]
        str     x0, [x5, 8]
        ldr     x5, [x1, 24]
        add     x0, x0, x5
.L303:
        add     x3, x3, 88
        add     x1, x1, 48
        cmp     x4, x3
        bne     .L304
        add     x1, x29, 176
.L307:
        ldr     x4, [x2]
        add     x0, x0, 63
        and     x0, x0, -64
        str     x0, [x4, 16]
        ldr     x4, [x1]
        add     x0, x0, x4
        cbz     w20, .L305
        ldr     x4, [x2, 8]
        add     x0, x0, 63
        and     x0, x0, -64
        str     x0, [x4, 16]
        ldr     x4, [x1, 24]
        add     x0, x0, x4
.L305:
        add     x2, x2, 88
        add     x1, x1, 48
        cmp     x3, x2
        bne     .L307
        b       .L330
.L298:
        str     xzr, [x26]
        b       .L299
init_table_dtz:
        stp     x29, x30, [sp, -224]!
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        stp     x21, x22, [sp, 32]
        stp     x23, x24, [sp, 48]
        stp     x25, x26, [sp, 64]
        ldr     x20, [x0]
        cbz     x20, .L349
        adrp    x2, DTZ_MAGIC
        ldrb    w3, [x20]
        add     x1, x2, :lo12:DTZ_MAGIC
        ldrb    w2, [x2, :lo12:DTZ_MAGIC]
        cmp     w3, w2
        bne     .L334
        ldrb    w3, [x20, 1]
        ldrb    w2, [x1, 1]
        cmp     w3, w2
        bne     .L334
        ldrb    w3, [x20, 2]
        ldrb    w2, [x1, 2]
        cmp     w3, w2
        bne     .L334
        ldrb    w2, [x20, 3]
        ldrb    w1, [x1, 3]
        cmp     w2, w1
        beq     .L335
.L334:
        adrp    x0, _LC6
        add     x0, x0, :lo12:_LC6
        bl      puts
.L349:
        mov     w0, 0
        b       .L332
.L335:
        ldrb    w1, [x20, 4]
        mov     w23, 4
        mov     x19, x0
        add     x20, x20, 5
        add     x24, x29, 96
        tst     x1, 2
        ldrb    w1, [x0, 27]
        csinc   w23, w23, wzr, ne
        cbnz    w1, .L337
        mov     x1, x20
        mov     x2, x24
        bl      setup_pieces_piece_dtz
        ldrb    w0, [x19, 25]
        add     x2, x29, 128
        ldr     x1, [x29, 96]
        add     x4, x19, 76
        add     x0, x0, 1
        add     x3, x29, 88
        add     x20, x20, x0
        mov     w5, 0
        and     x0, x20, 1
        add     x0, x20, x0
        bl      setup_pairs
        str     x0, [x19, 32]
        ldr     x1, [x29, 88]
        ldrb    w2, [x19, 76]
        str     x1, [x19, 88]
        tbz     x2, 1, .L338
        add     x3, x19, 78
        mov     x2, x1
        add     x19, x19, 86
.L339:
        add     x4, x2, 1
        sub     x4, x4, x1
        strh    w4, [x3], 2
        ldrb    w4, [x2]
        cmp     x19, x3
        add     x4, x4, 1
        add     x2, x2, x4
        bne     .L339
        and     x1, x2, 1
        add     x1, x2, x1
.L338:
        ldr     x2, [x29, 128]
        str     x1, [x0]
        add     x1, x1, x2
        ldr     x2, [x29, 136]
        str     x1, [x0, 8]
        add     x1, x1, x2
        add     x1, x1, 63
        and     x1, x1, -64
        str     x1, [x0, 16]
.L367:
        mov     w0, 1
.L332:
        ldp     x19, x20, [sp, 16]
        ldp     x21, x22, [sp, 32]
        ldp     x23, x24, [sp, 48]
        ldp     x25, x26, [sp, 64]
        ldp     x29, x30, [sp], 224
        ret
.L337:
        ldrb    w0, [x0, 29]
        mov     x21, 0
        cmp     w0, 0
        cset    w22, ne
        add     w22, w22, 1
.L341:
        mov     w3, w21
        add     x2, x24, x21, lsl 3
        mov     x1, x20
        mov     x0, x19
        add     x21, x21, 1
        bl      setup_pieces_pawn_dtz
        ldrb    w0, [x19, 25]
        cmp     x21, 4
        add     w0, w0, w22
        sxtw    x0, w0
        add     x20, x20, x0
        bne     .L341
        and     x0, x20, 1
        add     x21, x19, 32
        add     x0, x20, x0
        mov     x25, x21
        add     x20, x29, 128
        mov     x22, 0
        mov     x26, 24
.L342:
        add     x4, x22, 224
        ldr     x1, [x24, x22, lsl 3]
        madd    x2, x22, x26, x20
        add     x4, x19, x4
        add     x3, x29, 88
        mov     w5, 0
        add     x22, x22, 1
        bl      setup_pairs
        str     x0, [x25], 48
        cmp     w23, w22
        ldr     x0, [x29, 88]
        bgt     .L342
        sub     w4, w23, 1
        mov     x3, 236
        add     x5, x19, 224
        add     x2, x19, 228
        add     x3, x3, x4, uxtw 3
        mov     x1, x0
        add     x3, x19, x3
        str     x0, [x19, 264]
.L345:
        ldrb    w6, [x5]
        add     x7, x2, 8
        tbz     x6, 1, .L343
.L344:
        add     x6, x1, 1
        sub     x6, x6, x0
        strh    w6, [x2], 2
        ldrb    w6, [x1]
        cmp     x2, x7
        add     x6, x6, 1
        add     x1, x1, x6
        bne     .L344
.L343:
        cmp     x7, x3
        add     x5, x5, 1
        mov     x2, x7
        bne     .L345
        and     x0, x1, 1
        mov     x2, x21
        add     x0, x1, x0
        mov     x5, 24
        mov     x1, 0
.L346:
        ldr     x3, [x2], 48
        str     x0, [x3]
        mul     x3, x1, x5
        add     x1, x1, 1
        cmp     w23, w1
        ldr     x3, [x20, x3]
        add     x0, x0, x3
        bgt     .L346
        mov     x1, 80
        mov     w3, 48
        add     x2, x20, 8
        umaddl  x4, w4, w3, x1
        mov     x1, x21
        add     x19, x19, x4
.L347:
        ldr     x3, [x1], 48
        cmp     x19, x1
        str     x0, [x3, 8]
        ldr     x3, [x2], 24
        add     x0, x0, x3
        bne     .L347
        add     x20, x20, 16
.L348:
        ldr     x2, [x21], 48
        add     x0, x0, 63
        and     x0, x0, -64
        cmp     x1, x21
        str     x0, [x2, 16]
        ldr     x2, [x20], 24
        add     x0, x0, x2
        bne     .L348
        b       .L367
load_dtz_table:
        stp     x29, x30, [sp, -48]!
        adrp    x3, DTZ_table
        add     x4, x3, :lo12:DTZ_table
        mov     x5, 80
        add     x29, sp, 0
        stp     x21, x22, [sp, 32]
        mov     x22, x3
        stp     x19, x20, [sp, 16]
        stp     x2, xzr, [x4, 8]
        lsr     x2, x1, 54
        adrp    x4, TB_hash
        str     x1, [x3, :lo12:DTZ_table]
        add     x4, x4, :lo12:TB_hash
        madd    x2, x2, x5, x4
        add     x4, x2, x5
.L371:
        ldr     x3, [x2]
        cmp     x1, x3
        beq     .L369
        add     x2, x2, 16
        cmp     x4, x2
        bne     .L371
.L368:
        ldp     x19, x20, [sp, 16]
        ldp     x21, x22, [sp, 32]
        ldp     x29, x30, [sp], 48
        ret
.L372:
        ldrb    w0, [x20, 28]
        strb    w0, [x19, 28]
        b       .L373
.L374:
        add     x3, x22, :lo12:DTZ_table
        str     x19, [x3, 16]
        b       .L368
.L369:
        ldr     x20, [x2, 8]
        mov     x21, x0
        mov     x1, 272
        ldrb    w0, [x20, 27]
        cmp     w0, 0
        mov     x0, 96
        csel    x0, x1, x0, ne
        bl      malloc
        mov     x19, x0
        adrp    x1, _LC7
        add     x2, x0, 16
        add     x1, x1, :lo12:_LC7
        mov     x0, x21
        bl      map_file
        str     x0, [x19]
        ldr     x0, [x20, 8]
        str     x0, [x19, 8]
        ldrb    w0, [x20, 25]
        strb    w0, [x19, 25]
        ldrb    w0, [x20, 26]
        strb    w0, [x19, 26]
        ldrb    w0, [x20, 27]
        strb    w0, [x19, 27]
        cbz     w0, .L372
        ldrb    w0, [x20, 28]
        strb    w0, [x19, 28]
        ldrb    w0, [x20, 29]
        strb    w0, [x19, 29]
.L373:
        mov     x0, x19
        bl      init_table_dtz
        cbnz    w0, .L374
        mov     x0, x19
        ldp     x21, x22, [sp, 32]
        ldp     x19, x20, [sp, 16]
        ldp     x29, x30, [sp], 48
        b       free


free_wdl_entry:
        stp     x29, x30, [sp, -32]!
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        mov     x19, x0

        ldr     x1, [x19]
        ldr     x2, [x19, 16]
        bl      Os_FileUnmap
        
        ldrb    w0, [x19, 27]
        cbnz    w0, .L381
        ldr     x0, [x19, 32]
        bl      free
        ldr     x0, [x19, 40]
        cbz     x0, .L380
        ldp     x19, x20, [sp, 16]
        ldp     x29, x30, [sp], 32
        b       free
.L381:
        add     x20, x19, 32
        add     x19, x19, 384
.L386:
        ldr     x0, [x20]
        bl      free
        ldr     x0, [x20, 8]
        cbz     x0, .L384
        bl      free
.L384:
        add     x20, x20, 88
        cmp     x20, x19
        bne     .L386
.L380:

        ldp     x19, x20, [sp, 16]
        ldp     x29, x30, [sp], 32
        ret


free_dtz_entry:
        stp     x29, x30, [sp, -48]!
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        mov     x19, x0
        str     x21, [sp, 32]

        ldr     x1, [x19]
        ldr     x2, [x19, 16]
        bl      Os_FileUnmap
        

        ldrb    w0, [x19, 27]
        cbnz    w0, .L392
        ldr     x0, [x19, 32]
        bl      free
.L393:
        mov     x0, x19
        ldr     x21, [sp, 32]
        ldp     x19, x20, [sp, 16]
        ldp     x29, x30, [sp], 48
        b       free
.L392:
        add     x20, x19, 32
        add     x21, x19, 224
.L394:
        ldr     x0, [x20], 48
        bl      free
        cmp     x20, x21
        bne     .L394
        b       .L393



Tablebase_DisplayInfo:
;               push   rbx rsi rdi
                stp  x26, x27, [sp, -16]!
                stp  x21, x30, [sp, -16]!


;Display 0, "Tablebase_DisplayInfo called%n"
;		xor   esi, esi
                mov  w26, 0
;.PrintNext:
Tablebase_DisplayInfo.PrintNext:
;		lea   rdi, [Output]
               _lea  x27, Output
;		cmp   esi, dword[_ZL9num_paths]
;		jae   .PrintDone
               _lea  x6, num_paths
                ldr  w4, [x6]
                cmp  w26, w4
                bhs  Tablebase_DisplayInfo.PrintDone
;		mov   rax, 'info str'
;	      stosq
                mov  w0, 'i'
               strb  w0, [x27], 1
                mov  w0, 'n'
               strb  w0, [x27], 1
                mov  w0, 'f'
               strb  w0, [x27], 1
                mov  w0, 'o'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
                mov  w0, 's'
               strb  w0, [x27], 1
                mov  w0, 't'
               strb  w0, [x27], 1
                mov  w0, 'r'
               strb  w0, [x27], 1
;		mov   rax, 'ing foun'
;	      stosq
                mov  w0, 'i'
               strb  w0, [x27], 1
                mov  w0, 'n'
               strb  w0, [x27], 1
                mov  w0, 'g'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
                mov  w0, 'f'
               strb  w0, [x27], 1
                mov  w0, 'o'
               strb  w0, [x27], 1
                mov  w0, 'u'
               strb  w0, [x27], 1
                mov  w0, 'n'
               strb  w0, [x27], 1
;		mov   eax, 'd '
;	      stosw
                mov  w0, 'd'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
;		mov   eax, esi
;		add   eax, dword[_ZL9num_paths]
               _lea  x6, num_paths
                ldr  w0, [x6]
                add  w0, w0, w26
;		mov   rcx, qword[_ZL5paths]
               _lea  x6, paths
                ldr  x1, [x6]
;		mov   eax, dword[rcx+8*rax]
                ldr  x0, [x1, x0, lsl 3]
;	       call   PrintUnsignedInteger
                 bl  PrintUInt32
;		mov   rax, ' tableba'
;	      stosq
                mov  w0, ' '
               strb  w0, [x27], 1
                mov  w0, 't'
               strb  w0, [x27], 1
                mov  w0, 'a'
               strb  w0, [x27], 1
                mov  w0, 'b'
               strb  w0, [x27], 1
                mov  w0, 'l'
               strb  w0, [x27], 1
                mov  w0, 'e'
               strb  w0, [x27], 1
                mov  w0, 'b'
               strb  w0, [x27], 1
                mov  w0, 'a'
               strb  w0, [x27], 1                
;		mov   rax, 'ses in "'
;	      stosq
                mov  w0, 's'
               strb  w0, [x27], 1
                mov  w0, 'e'
               strb  w0, [x27], 1
                mov  w0, 's'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
                mov  w0, 'i'
               strb  w0, [x27], 1
                mov  w0, 'n'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
                mov  w0, '"'
               strb  w0, [x27], 1                
;		mov   rcx, qword[_ZL5paths]
               _lea  x6, paths
                ldr  x1, [x6]
;		mov   rcx, [rcx+8*rsi]
                ldr  x1, [x1, x26, lsl 3]
;	       call   PrintString
                 bl  PrintString
;               mov   al, '"'
;              stosb
                mov  w0, '"'
               strb  w0, [x27], 1                
;       PrintNewLine
            PrintNL             
;	       call   _WriteOut_Output
                 bl  WriteLine_Output
;		add   esi, 1
                add  w26, w26, 1
;		jmp   .PrintNext
                  b  Tablebase_DisplayInfo.PrintNext
;.PrintDone:
Tablebase_DisplayInfo.PrintDone:
;		lea   rdi, [Output]
               _lea  x27, Output
;		mov   rax, 'info str'
;	      stosq
                mov  w0, 'i'
               strb  w0, [x27], 1
                mov  w0, 'n'
               strb  w0, [x27], 1
                mov  w0, 'f'
               strb  w0, [x27], 1
                mov  w0, 'o'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
                mov  w0, 's'
               strb  w0, [x27], 1
                mov  w0, 't'
               strb  w0, [x27], 1
                mov  w0, 'r'
               strb  w0, [x27], 1
;		mov   rax, 'ing foun'
;	      stosq
                mov  w0, 'i'
               strb  w0, [x27], 1
                mov  w0, 'n'
               strb  w0, [x27], 1
                mov  w0, 'g'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
                mov  w0, 'f'
               strb  w0, [x27], 1
                mov  w0, 'o'
               strb  w0, [x27], 1
                mov  w0, 'u'
               strb  w0, [x27], 1
                mov  w0, 'n'
               strb  w0, [x27], 1
;		mov   eax, 'd '
;	      stosw
                mov  w0, 'd'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
;		mov   eax, dword[_ZL10TBnum_pawn]
               _lea  x6, TBnum_pawn
                ldr  w0, [x6]
;		add   eax, dword[_ZL11TBnum_piece]
               _lea  x6, TBnum_piece
                ldr  w4, [x6]
                add  w0, w0, w4
;	       call   PrintUnsignedInteger
                 bl  PrintUInt32
;		mov   eax, ' of '
;	      stosd
                mov  w0, ' '
               strb  w0, [x27], 1
                mov  w0, 'o'
               strb  w0, [x27], 1
                mov  w0, 'f'
               strb  w0, [x27], 1
                mov  w0, ' '
               strb  w0, [x27], 1
;		mov   eax, dword[tb_total_cnt]
               _lea  x6, tb_total_cnt
                ldr  w0, [x6]
;	       call   PrintUnsignedInteger
                 bl  PrintUInt32
;		mov   rax, ' tableba'
;	      stosq
                mov  w0, ' '
               strb  w0, [x27], 1
                mov  w0, 't'
               strb  w0, [x27], 1
                mov  w0, 'a'
               strb  w0, [x27], 1
                mov  w0, 'b'
               strb  w0, [x27], 1
                mov  w0, 'l'
               strb  w0, [x27], 1
                mov  w0, 'e'
               strb  w0, [x27], 1
                mov  w0, 'b'
               strb  w0, [x27], 1
                mov  w0, 'a'
               strb  w0, [x27], 1
;		mov   eax, 'ses'
;	      stosd
;		sub   rdi, 1
                mov  w0, 's'
               strb  w0, [x27], 1
                mov  w0, 'e'
               strb  w0, [x27], 1
                mov  w0, 's'
               strb  w0, [x27], 1
;       PrintNewLine
            PrintNL
;	       call   _WriteOut_Output
                 bl  WriteLine_Output
;                pop   rdi rsi rbx
;                ret

;Display 0, "Tablebase_DisplayInfo returning%n"

                ldp  x21, x30, [sp], 16
                ldp  x26, x27, [sp], 16
                ret


Tablebase_HandlePathStrings:
;	; rbx is the address of the string
        ; x20 is the address of the string
;	push	rsi rdi rbp
                stp  x26, x27, [sp, -16]!
                stp  x30, x27, [sp, -16]!    

;	mov	rcx, rbx
;	call	StringLength
                mov  x1, x20
                 bl  StringLength
;	lea	ecx, [rax+1]
                add  x0, x0, 1
;	call	my_malloc
                 bl  malloc
;	mov	qword[_ZL11path_string], rax
               _lea  x6, path_string
                str  x0, [x6]
;	mov	rdx, rbx
;	mov	rcx, rax
;	call	my_strcpy
                mov  x1, x20
                 bl  strcpy
;	mov	rbp, rsp
;	mov	rsi, qword[_ZL11path_string]
               _lea  x6, path_string
                ldr  x26, [x6]
;	xor	ebx, ebx	; ebx num_paths
                mov  w20, 0
;.GetNewPath:
Tablebase_HandlePathStrings.GetNewPath:
;	call	SkipSpaces
                 bl  SkipSpaces
;        push    0               ; tbs found
;	push	rsi		; start of path
                stp  x26, xzr, [sp, -16]!
;	add	ebx, 1
                add  w20, w20, 1
;.GetNextChar:
Tablebase_HandlePathStrings.GetNextChar:
;	lodsb
               ldrb  w0, [x26], 1
;	cmp	al, ' '
;	jb	.DoneGettingPaths
                cmp  w0, ' '
                blo  Tablebase_HandlePathStrings.DoneGettingPaths
;	cmp	al, SEP_CHAR
;	jne	.GetNextChar
                cmp  w0, SEP_CHAR
                bne  Tablebase_HandlePathStrings.GetNextChar
;.GotSep:
Tablebase_HandlePathStrings.GotSep:
;	mov	byte[rsi-1], 0
               strb  wzr, [x26, -1]
;	jmp	.GetNewPath
                  b  Tablebase_HandlePathStrings.GetNewPath
;.DoneGettingPaths:
Tablebase_HandlePathStrings.DoneGettingPaths:
;	mov	byte[rsi-1], 0
               strb  wzr, [x26, -1]
;	mov	dword[_ZL9num_paths], ebx
               _lea  x6, num_paths
                str  w20, [x6]
;	imul	ecx, ebx, 16
                lsl  w1, w20, 4
;	call	my_malloc                  ; 16 byte aligned
                 bl  malloc
;	mov	qword[_ZL5paths], rax
               _lea  x6, paths
                str  x0, [x6]
;	mov	edx, ebx
                mov  w2, w20
;.PopPath:
Tablebase_HandlePathStrings.PopPath:
;	sub	edx, 1
               subs  w2, w2, 1
;	lea	ecx, [rdx+rbx]
                add  w1, w2, w20
;	jl	.PopPathDone
                blt  Tablebase_HandlePathStrings.PopPathDone
;	pop	qword[rax+8*rdx]        ; pathstring
;	pop     qword[rax+8*rcx]        ; 0 (tbs found)
                ldp  x4, xzr, [sp], 16
                str  x4, [x0, x2, lsl 3]
                str  xzr, [x0, x1, lsl 3]
;	jmp	.PopPath
                  b  Tablebase_HandlePathStrings.PopPath
;.PopPathDone:
Tablebase_HandlePathStrings.PopPathDone:
;	pop	rbp rdi rsi
;	ret

                ldp  x30, x27, [sp], 16                
                ldp  x26, x27, [sp], 16
                ret

Tablebase_Init:
Tablebases__init:

        stp     x29, x30, [sp, -96]!
        adrp    x11, initialized
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        mov     x20, x0
        ldrb    w0, [x11, :lo12:initialized]
        stp     x21, x22, [sp, 32]
        stp     x23, x24, [sp, 48]
        stp     x25, x26, [sp, 64]
        cbnz    w0, Tablebase_Init.InitDone

Tablebase_Init.DoInit:
        bl      init_indices
        mov     w0, 1
        strb    w0, [x11, :lo12:initialized]
        b       Tablebase_Init.CheckPath

Tablebase_Init.InitDone:


       _lea      x0, path_string
        ldr     x0, [x0]
        cbz     x0, Tablebase_Init.NothingToFree
       _lea     x1, TB_mutex
        bl      Os_MutexDestroy
       _lea      x0, path_string
        ldr     x0, [x0]
        bl      my_free
       _lea      x0, paths
        ldr     x0, [x0]
        bl      my_free


Tablebase_Init.NothingToFree:


       _lea    x22, TBnum_piece
       _lea    x21, TB_piece
        mov     x19, 0
        mov     x23, 120
.L401:
        ldr     w0, [x22]
        cmp     w0, w19
        ble     .L399
        mov     x0, x21
        add     x19, x19, 1
        bl      free_wdl_entry
        mov     w1, 120
@@:
        strb    wzr, [x21], 1
        subs     w1, w1, 1
        bgt     @b
        b       .L401
.L399:


       _lea    x22, TBnum_pawn
       _lea    x21, TB_pawn
        mov     x19, 0
        mov     x23, 384
.L400:
        ldr     w0, [x22]
        cmp     w0, w19
        ble     .L402
        mov     x0, x21
        add     x19, x19, 1
        bl      free_wdl_entry
        mov     w1, 384
@@:
        strb    wzr, [x21], 1
        subs     w1, w1, 1
        bgt     @b
        b       .L400
.L402:

        adrp    x19, DTZ_table+16
        adrp    x21, DTZ_table+1552
        add     x19, x19, :lo12:DTZ_table+16
        add     x21, x21, :lo12:DTZ_table+1552
.L405:  ldr     x0, [x19]
        cbz     x0, .L403
        bl      free_dtz_entry
        str     xzr, [x19]
.L403:  add     x19, x19, 24
        cmp     x19, x21
        bne     .L405


       _lea  x6, path_string
        str  xzr, [x6]
       _lea  x6, paths
        str  xzr, [x6]
       _lea  x6, tb_total_cnt
        str  wzr, [x6]
       _lea  x6, num_paths
        str  wzr, [x6]
       _lea  x6, TBnum_pawn
        str  wzr, [x6]
       _lea  x6, TBnum_piece
        str  wzr, [x6]
       _lea  x6, Tablebase_MaxCardinality
        str  wzr, [x6]
        

Tablebase_Init.CheckPath:


        cbz     x20, Tablebase_Init.return
        ldrb    w0, [x20]
        cbz     w0, Tablebase_Init.return
        bl      Tablebase_HandlePathStrings


.L410:
        adrp    x1, TB_mutex
        add     x1, x1, :lo12:TB_mutex
        bl      Os_MutexCreate
        adrp    x0, TBnum_pawn
        adrp    x2, TB_hash+82000
        add     x2, x2, :lo12:TB_hash+82000
        ;str     wzr, [x0, :lo12:TBnum_pawn]
        adrp    x0, TBnum_piece
        ;str     wzr, [x0, :lo12:TBnum_piece]
        adrp    x0, Tablebases__MaxCardinality
        ;str     wzr, [x0, :lo12:Tablebases__MaxCardinality]
        adrp    x0, TB_hash+80
        add     x0, x0, :lo12:TB_hash+80
.L415:
        sub     x1, x0, 80
.L414:
        stp     xzr, xzr, [x1]
        add     x1, x1, 16
        cmp     x0, x1
        bne     .L414
        add     x0, x0, 80
        cmp     x0, x2
        bne     .L415
        adrp    x0, DTZ_table+16
        adrp    x1, DTZ_table+1552
        add     x0, x0, :lo12:DTZ_table+16
        add     x1, x1, :lo12:DTZ_table+1552
.L416:
        str     xzr, [x0], 24
        cmp     x1, x0
        bne     .L416
        adrp    x19, pchr
        adrp    x21, _LC9
        add     x22, x19, :lo12:pchr
        add     x21, x21, :lo12:_LC9
        mov     x20, 1
.L417:
        ; "K%cvK"
        ldrb    w2, [x22, x20]
        mov     x1, x21
        add     x0, x29, 80
        add     x20, x20, 1

        mov     w1, 'K'
        mov     w6, 'v'
        strb    w1, [x0, 0]
        strb    w2, [x0, 1]
        strb    w6, [x0, 2]
        strb    w1, [x0, 3]
        strb    wzr, [x0, 4]
        bl      init_tb

        cmp     x20, 6
        bne     .L417
        adrp    x22, _LC10
        add     x23, x19, :lo12:pchr
        add     x22, x22, :lo12:_LC10
        mov     x20, 1
.L419:
        mov     x21, x20
.L418:
        ; "K%cvK%c"
        add     x0, x29, 80
        mov     x1, x22
        ldrb    w2, [x23, x20]
        ldrb    w3, [x23, x21]

        mov     w1, 'K'
        mov     w6, 'v'
        strb    w1, [x0, 0]
        strb    w2, [x0, 1]
        strb    w6, [x0, 2]
        strb    w1, [x0, 3]
        strb    w3, [x0, 4]
        strb    wzr, [x0, 5]
        bl      init_tb

        add     x21, x21, 1
        cmp     w21, 5
        ble     .L418
        add     x20, x20, 1
        cmp     x20, 6
        bne     .L419
        adrp    x22, _LC11
        add     x23, x19, :lo12:pchr
        add     x22, x22, :lo12:_LC11
        mov     x20, 1
.L421:
        mov     x21, x20
.L420:
        ; "K%c%cvK"
        add     x0, x29, 80
        ldrb    w2, [x23, x20]
        ldrb    w3, [x23, x21]

        mov     w1, 'K'
        mov     w6, 'v'
        strb    w1, [x0, 0]
        strb    w2, [x0, 1]
        strb    w3, [x0, 2]
        strb    w6, [x0, 3]
        strb    w1, [x0, 4]
        strb    wzr, [x0, 5]
        bl      init_tb

        add     x21, x21, 1
        cmp     w21, 5
        ble     .L420
        add     x20, x20, 1
        cmp     x20, 6
        bne     .L421
        adrp    x24, _LC12
        add     x23, x19, :lo12:pchr
        add     x24, x24, :lo12:_LC12
        mov     x20, 1
.L424:
        mov     x21, x20
.L423:
        mov     x22, 1
.L422:
        ; "K%c%cvK%c"
        add     x0, x29, 80
        ldrb    w2, [x23, x20]
        ldrb    w3, [x23, x21]
        ldrb    w4, [x23, x22]

        mov     w1, 'K'
        mov     w6, 'v'
        strb    w1, [x0, 0]
        strb    w2, [x0, 1]
        strb    w3, [x0, 2]
        strb    w6, [x0, 3]
        strb    w1, [x0, 4]
        strb    w4, [x0, 5]
        strb    wzr, [x0, 6]
        bl      init_tb

        add     x22, x22, 1
        cmp     x22, 6
        bne     .L422
        add     x21, x21, 1
        cmp     w21, 5
        ble     .L423
        add     x20, x20, 1
        cmp     x20, 6
        bne     .L424
        adrp    x24, _LC13
        add     x23, x19, :lo12:pchr
        add     x24, x24, :lo12:_LC13
        mov     x20, 1
.L427:
        mov     x21, x20
.L426:
        mov     x22, x21
.L425:
        ; "K%c%c%cvK"
        add     x0, x29, 80
        ldrb    w2, [x23, x20]
        ldrb    w3, [x23, x21]
        ldrb    w4, [x23, x22]

        mov     w1, 'K'
        mov     w6, 'v'
        strb    w1, [x0, 0]
        strb    w2, [x0, 1]
        strb    w3, [x0, 2]
        strb    w4, [x0, 3]
        strb    w6, [x0, 4]
        strb    w1, [x0, 5]
        strb    wzr, [x0, 6]
        bl      init_tb

        add     x22, x22, 1
        cmp     w22, 5
        ble     .L425
        add     x21, x21, 1
        cmp     w21, 5
        ble     .L426
        add     x20, x20, 1
        cmp     x20, 6
        bne     .L427
        adrp    x24, _LC14
        add     x19, x19, :lo12:pchr
        add     x24, x24, :lo12:_LC14
        mov     x20, 1
.L433:
        mov     w25, w20
        mov     x23, x20
.L432:
        mov     w26, w23
        mov     x21, x20
.L431:
        cmp     w25, w21
        csel    w22, w26, w21, eq
        sxtw    x22, w22
.L430:
        cmp     w22, 5
        bgt     .L429

        ; "K%c%cvK%c%c"
        add     x0, x29, 80
        ldrb    w2, [x19, x20]
        ldrb    w3, [x19, x23]
        ldrb    w4, [x19, x21]
        ldrb    w5, [x19, x22]

        mov     w1, 'K'
        mov     w6, 'v'
        strb    w1, [x0, 0]
        strb    w2, [x0, 1]
        strb    w3, [x0, 2]
        strb    w6, [x0, 3]
        strb    w1, [x0, 4]
        strb    w4, [x0, 5]
        strb    w5, [x0, 6]
        strb    wzr, [x0, 7]
        bl      init_tb

        add     x22, x22, 1
        b       .L430
.L429:
        add     x21, x21, 1
        cmp     w21, 5
        ble     .L431
        add     x23, x23, 1
        cmp     w23, 5
        ble     .L432
        add     x20, x20, 1
        cmp     x20, 6
        bne     .L433
        adrp    x19, pchr
        adrp    x25, _LC15
        add     x22, x19, :lo12:pchr
        add     x25, x25, :lo12:_LC15
        mov     x20, 1
.L437:
        mov     x21, x20
.L436:
        mov     x23, x21
.L435:
        mov     x24, 1
.L434:
        ; "K%c%c%cvK%c"
        add     x0, x29, 80
        ldrb    w2, [x22, x20]
        ldrb    w3, [x22, x21]
        ldrb    w4, [x22, x23]
        ldrb    w5, [x22, x24]

        mov     w1, 'K'
        mov     w6, 'v'
        strb    w1, [x0, 0]
        strb    w2, [x0, 1]
        strb    w3, [x0, 2]
        strb    w4, [x0, 3]
        strb    w6, [x0, 4]
        strb    w1, [x0, 5]
        strb    w5, [x0, 6]
        strb    wzr, [x0, 7]
        bl      init_tb

        add     x24, x24, 1
        cmp     x24, 6
        bne     .L434
        add     x23, x23, 1
        cmp     w23, 5
        ble     .L435
        add     x21, x21, 1
        cmp     w21, 5
        ble     .L436
        add     x20, x20, 1
        cmp     x20, 6
        bne     .L437
        adrp    x24, _LC16
        add     x19, x19, :lo12:pchr
        add     x24, x24, :lo12:_LC16
        mov     x20, 1
.L441:
        mov     x21, x20
.L440:
        mov     x22, x21
.L439:
        mov     x23, x22
.L438:
        ; "K%c%c%c%cvK"
        add     x0, x29, 80
        ldrb    w2, [x19, x20]
        ldrb    w3, [x19, x21]
        ldrb    w4, [x19, x22]
        ldrb    w5, [x19, x23]
        mov     w1, 'K'
        mov     w6, 'v'
        strb    w1, [x0, 0]
        strb    w2, [x0, 1]
        strb    w3, [x0, 2]
        strb    w4, [x0, 3]
        strb    w5, [x0, 4]
        strb    w6, [x0, 5]
        strb    w1, [x0, 6]
        strb    wzr, [x0, 7]
        bl      init_tb

        add     x23, x23, 1
        cmp     w23, 5
        ble     .L438
        add     x22, x22, 1
        cmp     w22, 5
        ble     .L439
        add     x21, x21, 1
        cmp     w21, 5
        ble     .L440
        add     x20, x20, 1
        cmp     x20, 6
        bne     .L441
;/*
;        adrp    x0, TBnum_piece
;        ldr     w1, [x0, :lo12:TBnum_piece]
;        adrp    x0, TBnum_pawn
;        ldr     w0, [x0, :lo12:TBnum_pawn]
;        add     w1, w1, w0
;        adrp    x0, _LC17
;        add     x0, x0, :lo12:_LC17
;        bl      printf
;*/
Tablebase_Init.return:
.L397:
;Display 0,"Tablebase_Init returning%n"
        ldp     x19, x20, [sp, 16]
        ldp     x21, x22, [sp, 32]
        ldp     x23, x24, [sp, 48]
        ldp     x25, x26, [sp, 64]
        ldp     x29, x30, [sp], 96
        ret







decompress_pairs_true:
        ldr     w3, [x0, 52]
        cbnz    w3, .L489
        ldrb    w0, [x0, 56]
        ret
.L489:
        sub     w5, w3, 1
        mov     x2, 1
        lsl     x4, x2, x3
        lsr     x3, x1, x3
        sub     w4, w4, 1
        lsl     x2, x2, x5
        and     w4, w4, w1
        ldr     x5, [x0]
        mov     w1, 6
        sub     w4, w4, w2
        mul     w3, w3, w1
        ldr     w2, [x5, x3]
        add     x3, x5, x3
        ldrh    w1, [x3, 4]
        adds    w1, w1, w4
        ldr     x4, [x0, 8]
        bpl     .L504
.L493:
        sub     w2, w2, 1
        ldrh    w3, [x4, w2, uxtw 1]
        add     w3, w3, 1
        adds    w1, w1, w3
        bmi     .L493
.L492:
        ldr     w3, [x0, 48]
        add     x12, x0, 64
        ldrsw   x9, [x0, 56]
        mov     w4, 0
        ldr     x7, [x0, 32]
        mov     w14, 64
        lsl     w2, w2, w3
        ldp     x3, x11, [x0, 16]
        lsl     x13, x9, 3
        add     x6, x3, x2
        ldr     x3, [x3, x2]
        add     x6, x6, 8
        rev     x3, x3
.L495:
        mov     x2, x9
.L496:
        add     x10, x2, 1
        mov     w8, w2
        add     x5, x12, x10, lsl 3
        sub     x5, x5, x13
        ldr     x5, [x5, -8]
        cmp     x3, x5
        bcc     .L502
        sub     x5, x3, x5
        sub     w10, w14, w8
        ldrh    w2, [x11, x2, lsl 1]
        lsr     x5, x5, x10
        add     w2, w2, w5
        ldrb    w5, [x7, w2, sxtw]
        cmp     w1, w5
        ble     .L497
        add     w4, w4, w8
        add     w5, w5, 1
        cmp     w4, 31
        sub     w1, w1, w5
        lsl     x3, x3, x8
        ble     .L495
        ldr     w2, [x6]
        sub     w4, w4, 32
        add     x6, x6, 4
        rev     w2, w2
        lsl     x2, x2, x4
        orr     x3, x3, x2
        b       .L495
.L504:
        ldrh    w3, [x4, w2, uxtw 1]
        cmp     w1, w3
        ble     .L492
        add     w3, w3, 1
        add     w2, w2, 1
        sub     w1, w1, w3
        b       .L504
.L502:
        mov     x2, x10
        b       .L496
.L497:
        ldr     x4, [x0, 40]
.L500:
        ldrb    w3, [x7, w2, sxtw]
        lsl     w0, w2, 1
        cbz     w3, .L499
        add     w0, w0, w2
        sxtw    x0, w0
        add     x5, x4, x0
        ldrb    w0, [x4, x0]
        ldrb    w3, [x5, 1]
        ubfiz   w2, w3, 8, 4
        orr     w2, w2, w0
        sxtw    x0, w2
        ldrb    w0, [x7, x0]
        cmp     w1, w0
        ble     .L500
        ldrb    w2, [x5, 2]
        asr     w3, w3, 4
        add     w0, w0, 1
        sub     w1, w1, w0
        orr     w2, w3, w2, lsl 4
        b       .L500
.L499:
        add     w2, w0, w2
        ldrb    w0, [x4, w2, sxtw]
        ret
decompress_pairs:
        b       decompress_pairs_true



probe_wdl_table:
        stp     x29, x30, [sp, -160]!
        add     x29, sp, 0
        stp     x21, x22, [sp, 32]
        mov     x21, x0
        stp     x23, x24, [sp, 48]
        stp     x25, x26, [sp, 64]
        mov     x25, x1
        stp     x19, x20, [sp, 16]
        stp     x27, x28, [sp, 80]
        bl      pos_material_key
        mov     x24, x0
        mov     x0, x21
        bl      pos_KvK_key
        cmp     x24, x0
        beq     .L539
        mov     x1, 80
        lsr     x20, x24, 54
        adrp    x0, TB_hash
        add     x0, x0, :lo12:TB_hash
        madd    x20, x20, x1, x0
        add     x0, x20, x1
.L510:
        ldr     x1, [x20]
        cmp     x24, x1
        beq     .L508
        add     x20, x20, 16
        cmp     x20, x0
        bne     .L510
        str     wzr, [x25]
.L539:
        mov     w22, 0
        b       .L506
.L512:
        mov     w0, 1
        add     x19, x19, 24
        stlrb   w0, [x19]
        sub     x19, x19, 24
.L511:
        add     x1, x26, :lo12:TB_mutex
        bl      Os_MutexUnlock
.L527:
        ldrb    w0, [x19, 26]
        cbnz    w0, .L513
        ldr     x0, [x19, 8]
        cmp     x24, x0
        mov     x0, x21
        beq     .L514
        bl      side_to_move
        cmp     w0, 0
        cset    w20, eq
        mov     w22, 8
        mov     w27, 56
.L515:
        ldrb    w0, [x19, 27]
        cbnz    w0, .L517
        mov     w25, 6
        mov     w24, 0
        mov     x27, -4
        smull   x25, w20, w25
        add     x26, x25, 96
        add     x26, x19, x26
.L519:
        ldrb    w0, [x19, 25]
        cmp     w24, w0
        bge     .L518
        ldrb    w2, [x26, w24, sxtw]
        mov     x0, x21
        eor     w1, w2, w22
        and     w2, w2, 7
        asr     w1, w1, 3
        bl      pos_pieces
        add     w2, w24, 1
        sxtw    x2, w2
        mul     x1, x2, x27
        add     x24, x1, x24, sxtw 2
        add     x4, x23, x24
.L520:
        rbit    x1, x0
        sub     x3, x0, 1
        clz     x1, x1
        ands    x0, x0, x3
        str     w1, [x4, x2, lsl 2]
        mov     w24, w2
        add     x2, x2, 1
        bne     .L520
        b       .L519
.L514:
        bl      side_to_move
        cmp     w0, 0
        cset    w20, ne
        mov     w22, 0
.L537:
        mov     w27, 0
        b       .L515
.L513:
        mov     x0, x21
        bl      side_to_move
        cmp     w0, 0
        mov     w22, w0
        mov     w0, 8
        csel    w22, w22, w0, eq
        mov     x0, x21
        bl      side_to_move
        mov     w20, w0
        cbz     w0, .L537
        mov     w27, 56
        mov     w20, 0
        b       .L515
.L518:
        mov     x0, 48
        mov     w3, 24
        add     x1, x25, 108
        mov     x2, x23
        smaddl  x3, w20, w3, x0
        add     x1, x19, x1
        mov     x0, x19
        add     x3, x19, x3
        add     x19, x19, x20, sxtw 3
        bl      encode_piece
        mov     x1, x0
        ldr     x0, [x19, 32]
.L538:
        bl      decompress_pairs_true
        uxtb    w0, w0
        sub     w22, w0, 2
        b       .L506
.L517:
        ldrb    w1, [x19, 96]
        mov     x0, x21
        eor     w1, w1, w22
        and     w2, w1, 7
        asr     w1, w1, 3
        bl      pos_pieces
        mov     x2, 0
.L522:
        rbit    x1, x0
        sub     x3, x0, 1
        clz     x1, x1
        ands    x0, x0, x3
        eor     w1, w27, w1
        add     w28, w2, 1
        str     w1, [x23, x2, lsl 2]
        add     x2, x2, 1
        bne     .L522
        mov     x1, x23
        mov     x0, x19
        mov     w26, 6
        bl      pawn_file
        sxtw    x25, w0
        mov     w3, 88
        mov     x6, -4
        smull   x4, w25, w3
        smaddl  x26, w20, w26, x4
        add     x3, x26, 96
        add     x3, x19, x3
.L524:
        ldrb    w0, [x19, 25]
        str     x6, [x29, 104]
        cmp     w28, w0
        bge     .L523
        sxtw    x24, w28
        mov     x0, x21
        stp     x4, x3, [x29, 112]
        ldrb    w2, [x3, x24]
        lsl     x24, x24, 2
        eor     w1, w2, w22
        and     w2, w2, 7
        asr     w1, w1, 3
        bl      pos_pieces
        add     w2, w28, 1
        ldr     x3, [x29, 120]
        ldp     x6, x4, [x29, 104]
        sxtw    x2, w2
        madd    x24, x2, x6, x24
        add     x24, x23, x24
.L525:
        rbit    x1, x0
        sub     x5, x0, 1
        clz     x1, x1
        ands    x0, x0, x5
        eor     w1, w27, w1
        mov     w28, w2
        str     w1, [x24, x2, lsl 2]
        add     x2, x2, 1
        bne     .L525
        b       .L524
.L523:
        mov     x0, 48
        mov     w3, 24
        add     x1, x26, 108
        mov     x2, x23
        smaddl  x3, w20, w3, x0
        add     x1, x19, x1
        mov     x0, x19
        add     x3, x3, x4
        add     x3, x19, x3
        bl      encode_pawn
        mov     x1, 11
        mul     x25, x25, x1
        mov     x1, x0
        add     x20, x25, x20, sxtw
        add     x20, x20, 4
        ldr     x0, [x19, x20, lsl 3]
        b       .L538
.L508:
        ldr     x19, [x20, 8]
        add     x23, x29, 136
        add     x19, x19, 24
        ldarb   w0, [x19]
        sub     x19, x19, 24
        cbnz    w0, .L527
        adrp    x26, TB_mutex
        add     x27, x26, :lo12:TB_mutex
        mov     x1, x27
        bl      Os_MutexLock
        ldrb    w0, [x19, 24]
        cbnz    w0, .L511
        ldr     x0, [x19, 8]
        mov     x1, x23
        cmp     x0, x24
        mov     x0, x21
        cset    w2, ne
        bl      prt_str
        mov     x1, x23
        mov     x0, x19
        bl      init_table_wdl
        mov     w22, w0
        cbnz    w0, .L512
        str     xzr, [x20]
        str     wzr, [x25]
        mov     x1, x27
        bl      Os_MutexUnlock
.L506:
        mov     w0, w22
        ldp     x19, x20, [sp, 16]
        ldp     x21, x22, [sp, 32]
        ldp     x23, x24, [sp, 48]
        ldp     x25, x26, [sp, 64]
        ldp     x27, x28, [sp, 80]
        ldp     x29, x30, [sp], 160
        ret




probe_dtz_table:
        stp     x29, x30, [sp, -144]!
        add     x29, sp, 0
        stp     x19, x20, [sp, 16]
        adrp    x19, DTZ_table
        stp     x21, x22, [sp, 32]
        mov     x20, x0
        stp     x23, x24, [sp, 48]
        mov     w21, w1
        stp     x25, x26, [sp, 64]
        mov     x22, x2
        stp     x27, x28, [sp, 80]
        bl      pos_material_key
        mov     x23, x0
        ldr     x0, [x19, :lo12:DTZ_table]
        cmp     x23, x0
        beq     .L541
        add     x2, x19, :lo12:DTZ_table
        ldr     x0, [x2, 8]
        cmp     x23, x0
        beq     .L541
        mov     x0, 1
        mov     x6, 24
.L544:
        mul     x3, x0, x6
        ldr     x3, [x3, x2]
        cmp     x23, x3
        beq     .L542
        add     x0, x0, 1
        cmp     x0, 64
        bne     .L544
        mov     x2, 80
        lsr     x0, x23, 54
        adrp    x1, TB_hash
        add     x1, x1, :lo12:TB_hash
        madd    x0, x0, x2, x1
        add     x1, x0, x2
.L548:
        ldr     x2, [x0]
        cmp     x23, x2
        beq     .L546
        add     x0, x0, 16
        cmp     x0, x1
        bne     .L548
.L547:
        str     wzr, [x22]
        b       .L601
.L553:
        bl      side_to_move
        cmp     w0, 0
        cset    w25, ne
        mov     w24, 0
.L600:
        mov     w26, 0
        b       .L554
.L552:
        mov     x0, x20
        bl      side_to_move
        cmp     w0, 0
        mov     w24, w0
        mov     w0, 8
        csel    w24, w24, w0, eq
        mov     x0, x20
        bl      side_to_move
        mov     w25, w0
        cbz     w0, .L600
        mov     w26, 56
        mov     w25, 0
        b       .L554
.L557:
        add     x25, x19, 64
        mov     w23, 0
        mov     x26, -4
.L559:
        ldrb    w0, [x19, 25]
        cmp     w23, w0
        bge     .L558
        sxtw    x22, w23
        mov     x0, x20
        add     w23, w23, 1
        ldrb    w2, [x25, x22]
        lsl     x22, x22, 2
        eor     w1, w2, w24
        and     w2, w2, 7
        asr     w1, w1, 3
        bl      pos_pieces
        sxtw    x1, w23
        add     x2, x29, 120
        madd    x22, x1, x26, x22
        add     x22, x2, x22
.L560:
        rbit    x2, x0
        sub     x3, x0, 1
        clz     x2, x2
        ands    x0, x0, x3
        str     w2, [x22, x1, lsl 2]
        mov     w23, w1
        add     x1, x1, 1
        bne     .L560
        b       .L559
.L558:
        add     x3, x19, 40
        add     x2, x29, 120
        add     x1, x19, 70
        mov     x0, x19
        bl      encode_piece
        mov     x1, x0
        ldr     x0, [x19, 32]
        bl      decompress_pairs_true
        uxtb    w0, w0
        ldrb    w2, [x19, 76]
        add     w3, w21, 2
        tbz     x2, 1, .L568
        adrp    x1, wdl_to_map
        add     x1, x1, :lo12:wdl_to_map
        ldrsw   x1, [x1, w3, sxtw 2]
        add     x1, x19, x1, lsl 1
        ldrh    w1, [x1, 78]
        add     w0, w1, w0
        ldr     x1, [x19, 88]
        sxtw    x0, w0
.L604:
        ldrb    w0, [x1, x0]
.L568:
        adrp    x1, pa_flags
        add     x1, x1, :lo12:pa_flags
        ldrb    w1, [x1, w3, sxtw]
        tst     w2, w1
        beq     .L569
        tbz     x21, 0, .L540
.L569:
        lsl     w0, w0, 1
.L540:
        ldp     x19, x20, [sp, 16]
        ldp     x21, x22, [sp, 32]
        ldp     x23, x24, [sp, 48]
        ldp     x25, x26, [sp, 64]
        ldp     x27, x28, [sp, 80]
        ldp     x29, x30, [sp], 144
        ret
.L556:
        ldrb    w1, [x19, 64]
        mov     x0, x20
        add     x27, x29, 120
        eor     w1, w1, w24
        and     w2, w1, 7
        asr     w1, w1, 3
        bl      pos_pieces
        mov     x2, 0
.L563:
        rbit    x1, x0
        sub     x3, x0, 1
        clz     x1, x1
        ands    x0, x0, x3
        eor     w1, w26, w1
        add     w28, w2, 1
        str     w1, [x27, x2, lsl 2]
        add     x2, x2, 1
        bne     .L563
        mov     x1, x27
        mov     x0, x19
        bl      pawn_file
        sxtw    x23, w0
        add     x1, x19, x23
        ldrb    w2, [x1, 224]
        and     w2, w2, 1
        cmp     w25, w2
        bne     .L564
        mov     w22, 48
        mov     x5, -4
        smull   x22, w0, w22
        add     x3, x22, 64
        add     x3, x19, x3
.L566:
        ldrb    w0, [x19, 25]
        str     x5, [x29, 96]
        cmp     w28, w0
        bge     .L565
        sxtw    x25, w28
        mov     x0, x20
        str     x3, [x29, 104]
        ldrb    w2, [x3, x25]
        lsl     x25, x25, 2
        eor     w1, w2, w24
        and     w2, w2, 7
        asr     w1, w1, 3
        bl      pos_pieces
        add     w1, w28, 1
        ldp     x5, x3, [x29, 96]
        sxtw    x1, w1
        madd    x25, x1, x5, x25
        add     x25, x27, x25
.L567:
        rbit    x2, x0
        sub     x4, x0, 1
        clz     x2, x2
        ands    x0, x0, x4
        eor     w2, w26, w2
        mov     w28, w1
        str     w2, [x25, x1, lsl 2]
        add     x1, x1, 1
        bne     .L567
        b       .L566
.L565:
        add     x3, x22, 40
        add     x1, x22, 70
        add     x3, x19, x3
        mov     x2, x27
        add     x1, x19, x1
        mov     x0, x19
        bl      encode_pawn
        mov     x1, x0
        mov     x2, 48
        madd    x2, x23, x2, x19
        ldr     x0, [x2, 32]
        bl      decompress_pairs_true
        uxtb    w0, w0
        add     x1, x19, x23
        add     w3, w21, 2
        ldrb    w2, [x1, 224]
        tbz     x2, 1, .L568
        adrp    x1, wdl_to_map
        add     x1, x1, :lo12:wdl_to_map
        ldrsw   x1, [x1, w3, sxtw 2]
        add     x23, x1, x23, lsl 2
        add     x23, x19, x23, lsl 1
        ldrh    w1, [x23, 228]
        add     w0, w1, w0
        ldr     x1, [x19, 264]
        sxtw    x0, w0
        b       .L604
.L542:
        sxtw    x3, w0
        add     x7, x29, 120
        sub     w1, w0, 1
        sub     w0, w0, 1
        madd    x3, x3, x6, x2
        ldp     x4, x5, [x3]
        stp     x4, x5, [x7]
        sxtw    x4, w1
        sub     x0, x4, x0
        smull   x1, w1, w6
        ldr     x3, [x3, 16]
        madd    x0, x0, x6, x2
        str     x3, [x29, 136]
        add     x3, x1, x2
        mov     x2, -24
        sub     x0, x0, 24
        add     x1, x1, 24
        mul     x4, x4, x2
.L545:
        add     x2, x4, x3
        add     x2, x2, x1
        ldp     x6, x7, [x3]
        sub     x3, x3, 24
        stp     x6, x7, [x2]
        ldr     x5, [x3, 40]
        cmp     x3, x0
        str     x5, [x2, 16]
        bne     .L545
        add     x1, x29, 120
        add     x0, x19, :lo12:DTZ_table
        ldp     x2, x3, [x1]
        ldr     x1, [x29, 136]
        stp     x2, x3, [x0]
        str     x1, [x0, 16]
.L541:
        add     x19, x19, :lo12:DTZ_table
        ldr     x19, [x19, 16]
        cbz     x19, .L547
        ldrb    w0, [x19, 26]
        cbnz    w0, .L552
        ldr     x0, [x19, 8]
        cmp     x23, x0
        mov     x0, x20
        beq     .L553
        bl      side_to_move
        cmp     w0, 0
        cset    w25, eq
        mov     w24, 8
        mov     w26, 56
.L554:
        ldrb    w0, [x19, 27]
        cbnz    w0, .L556
        ldrb    w0, [x19, 76]
        and     w0, w0, 1
        cmp     w25, w0
        beq     .L557
        ldrb    w0, [x19, 26]
        cbnz    w0, .L557
.L564:
        mov     w0, -1
        str     w0, [x22]
.L601:
        mov     w0, 0
        b       .L540
.L546:
        ldr     x0, [x0, 8]
        add     x1, x29, 120
        ldr     x24, [x0, 8]
        mov     x0, x20
        cmp     x23, x24
        cset    w25, ne
        mov     w2, w25
        bl      prt_str
        add     x0, x19, :lo12:DTZ_table
        ldr     x0, [x0, 1528]
        cbz     x0, .L571
        bl      free_dtz_entry
.L571:
        add     x3, x19, :lo12:DTZ_table
        mov     x1, 0
.L549:
        add     x0, x1, x3
        sub     x1, x1, 24
        add     x2, x0, 1512
        add     x0, x0, 1488
        cmn     x1, 1512
        ldp     x4, x5, [x0]
        stp     x4, x5, [x2]
        ldr     x0, [x0, 16]
        str     x0, [x2, 16]
        bne     .L549
        mov     w1, w25
        mov     x0, x20
        bl      calc_key
        mov     x25, x0
        cmp     x23, x24
        mov     x0, x20
        cset    w1, eq
        bl      calc_key
        mov     x2, x0
        mov     x1, x25
        add     x0, x29, 120
        bl      load_dtz_table
        b       .L541

