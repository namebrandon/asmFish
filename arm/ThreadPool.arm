
ThreadPool_Create:
    ; in: rcx address of node affinity string
            stp  x21, x30, [sp, -16]!
             bl  Os_SetThreadPoolInfo
            mov  x1, 0
             bl  Thread_Create
            mov  w4, 1
           _lea  x6, threadPool
            str  w4, [x6, ThreadPool.threadCnt]
            ldp  x21, x30, [sp], 16
            ret


ThreadPool_Destroy:
            stp  x21, x30, [sp, -16]!
            stp  x26, x27, [sp, -16]!
           _lea  x6, threadPool
            ldr  w27, [x6, ThreadPool.threadCnt]
.NextThread:
            sub  w1, w27, 1
             bl  Thread_Delete
            sub  x27, x27, 1
           cbnz  x27, .NextThread
           _lea  x6, threadPool
            str  wzr, [x6, ThreadPool.threadCnt]

           _lea  x27, threadPool + ThreadPool.nodeTable
           _lea  x6, threadPool + ThreadPool.nodeCnt
            ldr  w4, [x6]
            mov  w5, sizeof.NumaNode
           madd  x21, x4, x5, x27
.NextNumaNode:
            ldr  x1, [x27, NumaNode.cmhTable]
            mov  x2, sizeof.CounterMoveHistoryStats
             bl  Os_VirtualFree
            str  xzr, [x27, NumaNode.cmhTable]
            add  x27, x27, sizeof.NumaNode
            cmp  x27, x21
            blo  .NextNumaNode
            ldp  x26, x27, [sp], 16
            ldp  x21, x30, [sp], 16
            ret


ThreadPool_ReadOptions:
            stp  x21, x30, [sp, -16]!
            stp  x26, x27, [sp, -16]!
           _lea  x6, options
            ldr  w26, [x6, Options.threads]
           _lea  x6, threadPool
            ldr  w27, [x6, ThreadPool.threadCnt]
            cmp  w27, w26
            beq  .Skip
.CheckCreate:
            cmp  w27, w26
            blo  .Create
.CheckDelete:
            cmp  w27, w26
            bhi  .Delete
             bl  ThreadPool_DisplayThreadDistribution
.Skip:
            ldp  x26, x27, [sp], 16
            ldp  x21, x30, [sp], 16
            ret
.Create:
            mov  w1, w27
             bl  Thread_Create
            add  w27, w27, 1
           _lea  x6, threadPool
            str  w27, [x6, ThreadPool.threadCnt]
              b  .CheckCreate
.Delete:
            sub  w27, w27, 1
            mov  w1, w27
             bl  Thread_Delete
           _lea  x6, threadPool+ThreadPool.threadCnt
            str  w27, [x6]
              b  .CheckDelete


ThreadPool_NodesSearched_TbHits:
           _lea  x4, threadPool + ThreadPool.threadCnt
           _lea  x5, threadPool + ThreadPool.threadTable
            ldr  w4, [x4]
            mov  w1, 0
            mov  x0, 0
            mov  x2, 0
.next_thread:
            ldr  x8, [x5, x1, lsl 3]
            ldr  x6, [x8, Thread.nodes]
            ldr  x7, [x8, Thread.tbHits]
            add  x0, x0, x6
            add  x2, x2, x7
            add  w1, w1, 1
            cmp  w1, w4
            blo  .next_thread
            ret


ThreadPool_DisplayThreadDistribution:
            stp  x21, x30, [sp, -16]!
            stp  x26, x27, [sp, -16]!
            stp  x24, x25, [sp, -16]!
           _lea  x27, Output
           _lea  x26, threadPool + ThreadPool.nodeTable
           _lea  x6, threadPool + ThreadPool.nodeCnt
            ldr  w4, [x6]
            mov  x5, sizeof.NumaNode
           madd  x25, x4, x5, x26
.NextNode:
           _lea  x1, sz_format_thread
            ldr  w0, [x26, NumaNode.nodeNumber]
            str  x0, [sp, -32]!
            add  x2, sp, 0
            mov  x3, 0
             bl  PrintFancy
            add  sp, sp, 32
            mov  w21, -1
.ThreadLoop:
            add  w21, w21, 1
           _lea  x6, threadPool
            ldr  w4, [x6, ThreadPool.threadCnt]
            cmp  w21, w4
            bhs  .ThreadLoopDone
           _lea  x6, threadPool + ThreadPool.threadTable
            ldr  x0, [x6, x21, lsl 3]
            ldr  x4, [x0, Thread.numaNode]
            cmp  x26, x4
            bne  .ThreadLoop
            mov  w0, ' '
           strb  w0, [x27], 1
            mov  w0, w21
             bl  PrintUInt
              b  .ThreadLoop
.ThreadLoopDone:
   PrintNewLine
            add  x26, x26, sizeof.NumaNode
            cmp  x26, x25
            blo  .NextNode
             bl  WriteLine_Output
.Return:
            ldp  x24, x25, [sp], 16
            ldp  x26, x27, [sp], 16
            ldp  x21, x30, [sp], 16
            ret


ThreadPool_StartThinking:
    ; in: x20 address of position
    ;     x1  address of limits struct
    ;            this will be copied to the global limits struct
    ;            so that search threads can see it

.moveList       = 0
.lend           = sizeof.ExtMove*MAX_MOVES + .moveList
.localsize      = (.lend + 15) and -16

            stp  x20, x30, [sp, -16]!
            stp  x21, x26, [sp, -16]!
            stp  x27, x23, [sp, -16]!
            stp  x24, x25, [sp, -16]!
            sub  sp, sp, .localsize

            mov  x26, x1
            mov  x25, x20
           _lea  x6, threadPool
            ldr  x24, [x6, ThreadPool.threadTable + 8*0]
    ; x26 = address of limits
    ; x25 = gui position
    ; x24 = main thread

            mov  x1, x24
             bl  Thread_WaitForSearchFinished

           _lea  x6, signals
           strb  wzr, [x6, Signals.stop]
           strb  wzr, [x6, Signals.stopOnPonderhit]
           _lea  x1, limits
            mov  x2, x26
             bl  Limits_Copy

    ; first, get root moves from gui position

           _lea  x26, limits+Limits.moveVec
            add  x27, sp, .moveList
           _lea  x6, limits+Limits.moveVecSize
            ldr  w1, [x6]
           cbnz  w1, .use_searchmoves
            ldr  x21, [x20, Pos.state]
             bl  Gen_Legal
.have_moves:
            add  x26, sp, .moveList
            add  x1, x24, Thread.rootPos + Pos.rootMovesVec
             bl  RootMovesVec_Clear
.push_moves:
            cmp  x26, x27
            bhs  .push_moves_done
            add  x1, x24, Thread.rootPos + Pos.rootMovesVec
            ldr  w2, [x26, ExtMove.move]
            add  x26, x26, sizeof.ExtMove
             bl  RootMovesVec_PushBackMove
              b  .push_moves
.push_moves_done:

    ; next, copy to mainThread
            str  wzr, [x24, Thread.rootDepth]
            str  xzr, [x24, Thread.nodes]
            str  xzr, [x24, Thread.tbHits]
           strb  wzr, [x24, Thread.selDepth]
            str  wzr, [x24, Thread.resetCnt]
            mov  w4, MIN_RESETCNT   ; check time asap
            str  w4, [x24, Thread.callsCnt]
            add  x1, x24, Thread.rootPos
             bl  Position_CopyToSearch

    ; switch x20 and x21 to position of main thread
            add  x20, x24, Thread.rootPos
            ldr  x21, [x20, Pos.state]


if USE_SYZYGY

    ; Skip TB probing when no TB found
           _lea  x6, options
           ldrb  w2, [x6, Options.syzygy50MoveRule]
           _lea  x6, Tablebase_RootInTB
           strb  wzr, [x6]
           _lea  x6, Tablebase_UseRule50
           strb  w2, [x6]
           _lea  x6, options
            ldr  w0, [x6, Options.syzygyProbeLimit]
           _lea  x6, options
            ldr  w1, [x6, Options.syzygyProbeDepth]
            mov  w2, 0
           _lea  x6, Tablebase_MaxCardinality
            ldr  w4, [x6]
            cmp  w0, w4
           csel  w0, w4, w0, gt
           csel  w1, w2 ,w1, gt
           _lea  x6, Tablebase_Cardinality
            str  w0, [x6]
           _lea  x6, Tablebase_ProbeDepth
            str  w1, [x6]

    ; filter moves
            ldr  x1, [x20, Pos.typeBB + 8*White]
            ldr  x4, [x20, Pos.typeBB + 8*Black]
            orr  x1, x1, x4
        _popcnt  x1, x1, x2
            ldr  x2, [x20, Pos.rootMovesVec + RootMovesVec.ender]
            ldr  x4, [x20, Pos.rootMovesVec + RootMovesVec.table]
            cmp  x2, x4
            bls  .check_tb_ret
            sub  w0, w0, w1
            asr  w0, w0, 31
           ldrb  w4, [x21, State.castlingRights]
            orr  w0, w0, w4
            cbz  w0, .check_tb
.check_tb_ret:

            str  x21, [x20, Pos.state]      ; Thread_Think uses Pos.state
end if



    ; position is passed to threads by first converting to a fen
    ;   and then parsing this fen string
    ; the net effect is a fixed order on piece lists
             bl  Position_SetPieceLists

    ; copy position in main thread to workers
            str  xzr, [x24, Thread.nodes]   ;filtering moves may have incremented mainThread.nodes
            mov  w27, 0
.next_thread:
            add  w27, w27, 1
           _lea  x6, threadPool
            ldr  w4, [x6, ThreadPool.threadCnt]
            cmp  w27, w4
            bhs  .thread_copy_done

    ; get address of worker thread
           _lea  x6, threadPool + ThreadPool.threadTable
            ldr  x26, [x6, x27, lsl 3]

            add  x1, x26, Thread.rootPos
             bl  Position_CopyToSearch
            str  wzr, [x26, Thread.rootDepth]
            str  xzr, [x26, Thread.nodes]
            str  xzr, [x26, Thread.tbHits]
           strb  wzr, [x26, Thread.selDepth]
            str  wzr, [x26, Thread.resetCnt]
          mov32  w4, MAX_RESETCNT
            str  w4, [x26, Thread.callsCnt]

            ldr  x0, [x26, Thread.rootPos + Pos.rootMovesVec + RootMovesVec.table]
            ldr  x2, [x24, Thread.rootPos + Pos.rootMovesVec + RootMovesVec.table]
    
.copy_moves_loop:
            ldr  x4, [x24, Thread.rootPos + Pos.rootMovesVec + RootMovesVec.ender]
            cmp  x2, x4
            bhs  .copy_moves_done
            ldp  x4, x5, [x2]
            ldp  x6, x7, [x2, 16]
            stp  x4, x5, [x0]
            stp  x6, x7, [x0, 16]
            add  x0, x0, sizeof.RootMove
            add  x2, x2, sizeof.RootMove
              b  .copy_moves_loop

.copy_moves_done:
            str  x0, [x26, Thread.rootPos+Pos.rootMovesVec+RootMovesVec.ender]
              b  .next_thread

.thread_copy_done:

            mov  x1, x24
             bl  Thread_StartSearching

            add  sp, sp, .localsize
            ldp  x24, x25, [sp], 16
            ldp  x27, x23, [sp], 16
            ldp  x21, x26, [sp], 16
            ldp  x20, x30, [sp], 16
            ret


if USE_SYZYGY
.check_tb:
            ldr  x0, [x20, Pos.moveList]
            str  x0, [x21, -1*sizeof.State + State.endMoves]
             bl  Tablebase_RootProbe
           _lea  x6, Tablebase_RootInTB
           strb  w0, [x6]
            mov  w2, 0
           cbnz   w0, .root_in
             bl  Tablebase_RootProbeWDL
           _lea  x6, Tablebase_RootInTB
           strb  w0, [x6]
            mov  w2, 0
            cbz  w0, .check_tb_ret
           _lea  x6, Tablebase_Score
            ldr  w4, [x6]
            cmp  w2, w4
           _lea  x6, Tablebase_Cardinality
            ldr  w4, [x6]
           csel  w2, w4, w2, lt

.root_in:
           _lea  x6, Tablebase_Cardinality
            str  w2, [x6]
            add  x1, x20, Pos.rootMovesVec
             bl  RootMovesVec_Size
            str  x0, [x20, -Thread.rootPos + Thread.tbHits]
           _lea  x6, Tablebase_UseRule50
           ldrb  w2, [x6]
           _lea  x6, Tablebase_Score
            ldr  w0, [x6]
           cbnz  w2, .check_tb_ret
          mov32  w1, VALUE_MATE - MAX_PLY - 1
            cmp  w0, w2
           csel  w0, w1, w0, gt
            neg  w1, w1
            cmp  w0, w2
           csel  w0, w1, w0, lt
           _lea  x6, Tablebase_Score
            str  w0, [x6]
              b  .check_tb_ret
end if




.use_searchmoves:
           ldrh  w0, [x26], 2
            str  x0, [x27], 8
            sub  w1, w1, 1
           cbnz  w1, .use_searchmoves
              b  .have_moves

