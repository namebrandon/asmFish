include 'format/format.inc'
format ELF64 executable 0
entry Start


macro calign boundary
    local size
    size = (boundary-1)-($+boundary-1) mod boundary
	db (size mod 4) dup 0
    dd (size  /  4) dup 0xd503201f
end macro


; some comments on ld-linux-aarch64.so.1:
;
; - Does require the program headers to be contained in a load command.
;       For this reason format.inc now has
;           ELF.Settings.LoadHeaders = 1
; - Does not require the interpreter segment to be contained in another load segment.
; - Does require the dynamic segment to be contained in another load segment.
;       For this reason the segment macros have been extended.


segment interpreter readable            ; will go inside next loaded segment
    db '/lib/ld-linux-aarch64.so.1', 0

segment readable executable 

    ; instruction addresses should be divisible by 4
         calign  4
Start:
    ; print hello without linkage
            mov  x0, 1
            adr  x1, Message
            mov  x2, MessageEnd - Message
            mov  x8, 64
            svc  0

    ; print hello using linked function
            mov  x0, 1
            adr  x1, Message
            mov  x2, MessageEnd - Message
            ldr  x8, write      ; if the address of write is too far away, another method of loading it is required
            blr  x8

    ; exit using linked function
            mov  x0, 0
            ldr  x8, exit       ; ditto for exit
            blr  x8


segment dynamic readable writeable      ; will go inside next loaded segment
    dq DT_NEEDED,  _libc - strtab 
    dq DT_STRTAB,  strtab 
    dq DT_STRSZ,   strsz 
    dq DT_SYMTAB,  symtab 
    dq DT_SYMENT,  sizeof.Elf64_Sym 
    dq DT_RELA,    rela 
    dq DT_RELASZ,  relasz 
    dq DT_RELAENT, sizeof.Elf64_Rela 
    ;dq DT_REL,     rel                 ; Not necessary if empty.
    ;dq DT_RELSZ,   relsz               ; (eventhough "rel" is claimed to be
    ;dq DT_RELENT,  sizeof.Elf64_Rela   ;      manditory by the standard)
    dq DT_HASH,    hash 
    dq DT_NULL,    0

segment readable writeable

          align  16
write:  dq 0
exit:   dq 0


symtab: 
    Elf64_Sym 0,               0, 0, 0,          0,        0, 0
    Elf64_Sym _write - strtab, 0, 0, STB_GLOBAL, STT_FUNC, 0, 0
    Elf64_Sym _exit  - strtab, 0, 0, STB_GLOBAL, STT_FUNC, 0, 0

rela:
    Elf64_Rela write, 1, R_AARCH64_ABS64, 0
    Elf64_Rela exit,  2, R_AARCH64_ABS64, 0
relasz = $ - rela 

rel:
relsz = $ - rel



hash: 
    dd 1, 3     ; size of bucket and size of chain 
    dd 0        ; fake bucket, just one hash value 
    repeat 3
        dd %    ; chain for all symbol table entries 
    end repeat


Message:
    db 'Hello World!', 10
MessageEnd:

strtab: 
    _null   db 0 
    _libc   db 'libc.so.6',0 
    _write  db 'write',0 
    _exit   db 'exit',0 
strsz = $ - strtab 


